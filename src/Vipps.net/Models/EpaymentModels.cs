//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace Vipps.net.Models.Epayment
{
    using System;
	using System.Collections.Generic;
	using System.CodeDom.Compiler;
	using System.Text.Json.Serialization;
	using System.Text.Json;
	using System.Runtime.Serialization;
	using System.Collections.ObjectModel;
	using System.Threading.Tasks;
	using System.Threading;
	using System.ComponentModel.DataAnnotations;

    [GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IVippsEpayment
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a payment
        /// </summary>
        /// <remarks>
        /// Create a new payment
        /// </remarks>
        /// <param name="body">New `CreatePaymentRequest` body.</param>
        /// <param name="idempotency_Key">Idempotency key for the request, ensures idempotent actions.
        /// <br/>See [idempotency](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers#idempotency)</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for a sales unit.
        /// <br/> See [API keys](https://developer.vippsmobilepay.com/docs/knowledge-base/api-keys/).</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <returns>Create Payment response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<CreatePaymentResponse> CreatePaymentAsync(CreatePaymentRequest body, string idempotency_Key, string ocp_Apim_Subscription_Key, string merchant_Serial_Number, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a payment
        /// </summary>
        /// <remarks>
        /// Get a payment object by its `reference` id.
        /// </remarks>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for a sales unit.
        /// <br/> See [API keys](https://developer.vippsmobilepay.com/docs/knowledge-base/api-keys/).</param>
        /// <returns>Get Payment response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<GetPaymentResponse> GetPaymentAsync(string reference, string merchant_Serial_Number, string ocp_Apim_Subscription_Key, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a payment's event log
        /// </summary>
        /// <remarks>
        /// Get event log for the specified payment's `reference` id.
        /// </remarks>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for a sales unit.
        /// <br/> See [API keys](https://developer.vippsmobilepay.com/docs/knowledge-base/api-keys/).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ICollection<PaymentEvent>> GetPaymentEventLogAsync(string reference, string merchant_Serial_Number, string ocp_Apim_Subscription_Key, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel a payment
        /// </summary>
        /// <remarks>
        /// Cancel the payment with the specified `reference` id.
        /// </remarks>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for a sales unit.
        /// <br/> See [API keys](https://developer.vippsmobilepay.com/docs/knowledge-base/api-keys/).</param>
        /// <param name="idempotency_Key">Idempotency key for the request, ensures idempotent actions.
        /// <br/>See [idempotency](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers#idempotency)</param>
        /// <param name="body">New `CancelModificationRequest` body.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <returns>Adjustment response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ModificationResponse> CancelPaymentAsync(string reference, string merchant_Serial_Number, string ocp_Apim_Subscription_Key, string idempotency_Key, CancelModificationRequest body = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Capture a payment
        /// </summary>
        /// <remarks>
        /// Capture the given payment
        /// </remarks>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for a sales unit.
        /// <br/> See [API keys](https://developer.vippsmobilepay.com/docs/knowledge-base/api-keys/).</param>
        /// <param name="idempotency_Key">Idempotency key for the request, ensures idempotent actions.
        /// <br/>See [idempotency](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers#idempotency)</param>
        /// <param name="body">Requested capture modification</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <returns>Adjustment response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ModificationResponse> CapturePaymentAsync(string reference, string merchant_Serial_Number, string ocp_Apim_Subscription_Key, string idempotency_Key, CaptureModificationRequest body = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Refund a payment
        /// </summary>
        /// <remarks>
        /// Refund the given payment
        /// </remarks>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for a sales unit.
        /// <br/> See [API keys](https://developer.vippsmobilepay.com/docs/knowledge-base/api-keys/).</param>
        /// <param name="idempotency_Key">Idempotency key for the request, ensures idempotent actions.
        /// <br/>See [idempotency](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers#idempotency)</param>
        /// <param name="body">Requested refund modification</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <returns>Adjustment response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ModificationResponse> RefundPaymentAsync(string reference, string merchant_Serial_Number, string ocp_Apim_Subscription_Key, string idempotency_Key, RefundModificationRequest body = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Force approve a payment
        /// </summary>
        /// <remarks>
        /// This endpoint is only available in the test environment.
        /// <br/>It allows developers to approve a payment through the ePayment API
        /// <br/>without the use of the Vipps or MobilePay app. This is useful for automated testing.
        /// <br/>Express checkout is not supported for this endpoint.
        /// <br/>Attempted use in production is not allowed, and will fail.
        /// <br/>Important: All test users must manually approve at least one payment
        /// <br/>in the Vipps or MobilePay app before this endpoint can be used for that user.
        /// </remarks>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for a sales unit.
        /// <br/> See [API keys](https://developer.vippsmobilepay.com/docs/knowledge-base/api-keys/).</param>
        /// <param name="body">Force approve request body</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task ForceApproveAsync(string reference, string merchant_Serial_Number, string ocp_Apim_Subscription_Key, ForceApprove body = null, CancellationToken cancellationToken = default(CancellationToken));

    }

    [GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VippsEpayment : IVippsEpayment
    {
    #pragma warning disable 8618 // Set by constructor via BaseUrl property
        private string _baseUrl;
    #pragma warning restore 8618 // Set by constructor via BaseUrl property
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<JsonSerializerOptions> _settings = new System.Lazy<JsonSerializerOptions>(CreateSerializerSettings, true);

        public VippsEpayment(System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = "https://api.vipps.no/epayment";
            _httpClient = httpClient;
        }

        private static JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        private static void UpdateJsonSerializerSettings(JsonSerializerOptions settings) => throw new NotImplementedException();

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a payment
        /// </summary>
        /// <remarks>
        /// Create a new payment
        /// </remarks>
        /// <param name="body">New `CreatePaymentRequest` body.</param>
        /// <param name="idempotency_Key">Idempotency key for the request, ensures idempotent actions.
        /// <br/>See [idempotency](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers#idempotency)</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for a sales unit.
        /// <br/> See [API keys](https://developer.vippsmobilepay.com/docs/knowledge-base/api-keys/).</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <returns>Create Payment response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<CreatePaymentResponse> CreatePaymentAsync(CreatePaymentRequest body, string idempotency_Key, string ocp_Apim_Subscription_Key, string merchant_Serial_Number, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (idempotency_Key == null)
                        throw new System.ArgumentNullException("idempotency_Key");
                    request_.Headers.TryAddWithoutValidation("Idempotency-Key", ConvertToString(idempotency_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (merchant_Serial_Number == null)
                        throw new System.ArgumentNullException("merchant_Serial_Number");
                    request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "v1/payments"
                    urlBuilder_.Append("v1/payments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreatePaymentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Standard problem response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Standard problem response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Standard problem response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a payment
        /// </summary>
        /// <remarks>
        /// Get a payment object by its `reference` id.
        /// </remarks>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for a sales unit.
        /// <br/> See [API keys](https://developer.vippsmobilepay.com/docs/knowledge-base/api-keys/).</param>
        /// <returns>Get Payment response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<GetPaymentResponse> GetPaymentAsync(string reference, string merchant_Serial_Number, string ocp_Apim_Subscription_Key, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (reference == null)
                throw new System.ArgumentNullException("reference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (merchant_Serial_Number == null)
                        throw new System.ArgumentNullException("merchant_Serial_Number");
                    request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "v1/payments/{reference}"
                    urlBuilder_.Append("v1/payments/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPaymentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a payment's event log
        /// </summary>
        /// <remarks>
        /// Get event log for the specified payment's `reference` id.
        /// </remarks>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for a sales unit.
        /// <br/> See [API keys](https://developer.vippsmobilepay.com/docs/knowledge-base/api-keys/).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ICollection<PaymentEvent>> GetPaymentEventLogAsync(string reference, string merchant_Serial_Number, string ocp_Apim_Subscription_Key, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (reference == null)
                throw new System.ArgumentNullException("reference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (merchant_Serial_Number == null)
                        throw new System.ArgumentNullException("merchant_Serial_Number");
                    request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "v1/payments/{reference}/events"
                    urlBuilder_.Append("v1/payments/");
                    urlBuilder_.Append("/events");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ICollection<PaymentEvent>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel a payment
        /// </summary>
        /// <remarks>
        /// Cancel the payment with the specified `reference` id.
        /// </remarks>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for a sales unit.
        /// <br/> See [API keys](https://developer.vippsmobilepay.com/docs/knowledge-base/api-keys/).</param>
        /// <param name="idempotency_Key">Idempotency key for the request, ensures idempotent actions.
        /// <br/>See [idempotency](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers#idempotency)</param>
        /// <param name="body">New `CancelModificationRequest` body.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <returns>Adjustment response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ModificationResponse> CancelPaymentAsync(string reference, string merchant_Serial_Number, string ocp_Apim_Subscription_Key, string idempotency_Key, CancelModificationRequest body = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (reference == null)
                throw new System.ArgumentNullException("reference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (merchant_Serial_Number == null)
                        throw new System.ArgumentNullException("merchant_Serial_Number");
                    request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (idempotency_Key == null)
                        throw new System.ArgumentNullException("idempotency_Key");
                    request_.Headers.TryAddWithoutValidation("Idempotency-Key", ConvertToString(idempotency_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/problem+json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "v1/payments/{reference}/cancel"
                    urlBuilder_.Append("v1/payments/");
                    urlBuilder_.Append("/cancel");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ModificationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Standard problem response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Standard problem response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Standard problem response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Capture a payment
        /// </summary>
        /// <remarks>
        /// Capture the given payment
        /// </remarks>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for a sales unit.
        /// <br/> See [API keys](https://developer.vippsmobilepay.com/docs/knowledge-base/api-keys/).</param>
        /// <param name="idempotency_Key">Idempotency key for the request, ensures idempotent actions.
        /// <br/>See [idempotency](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers#idempotency)</param>
        /// <param name="body">Requested capture modification</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <returns>Adjustment response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ModificationResponse> CapturePaymentAsync(string reference, string merchant_Serial_Number, string ocp_Apim_Subscription_Key, string idempotency_Key, CaptureModificationRequest body = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (reference == null)
                throw new System.ArgumentNullException("reference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (merchant_Serial_Number == null)
                        throw new System.ArgumentNullException("merchant_Serial_Number");
                    request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (idempotency_Key == null)
                        throw new System.ArgumentNullException("idempotency_Key");
                    request_.Headers.TryAddWithoutValidation("Idempotency-Key", ConvertToString(idempotency_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/problem+json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "v1/payments/{reference}/capture"
                    urlBuilder_.Append("v1/payments/");
                    urlBuilder_.Append("/capture");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ModificationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Standard problem response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Standard problem response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Standard problem response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Refund a payment
        /// </summary>
        /// <remarks>
        /// Refund the given payment
        /// </remarks>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for a sales unit.
        /// <br/> See [API keys](https://developer.vippsmobilepay.com/docs/knowledge-base/api-keys/).</param>
        /// <param name="idempotency_Key">Idempotency key for the request, ensures idempotent actions.
        /// <br/>See [idempotency](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers#idempotency)</param>
        /// <param name="body">Requested refund modification</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [http-headers](https://developer.vippsmobilepay.com/docs/knowledge-base/http-headers).</param>
        /// <returns>Adjustment response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ModificationResponse> RefundPaymentAsync(string reference, string merchant_Serial_Number, string ocp_Apim_Subscription_Key, string idempotency_Key, RefundModificationRequest body = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (reference == null)
                throw new System.ArgumentNullException("reference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (merchant_Serial_Number == null)
                        throw new System.ArgumentNullException("merchant_Serial_Number");
                    request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (idempotency_Key == null)
                        throw new System.ArgumentNullException("idempotency_Key");
                    request_.Headers.TryAddWithoutValidation("Idempotency-Key", ConvertToString(idempotency_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/problem+json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "v1/payments/{reference}/refund"
                    urlBuilder_.Append("v1/payments/");
                    urlBuilder_.Append("/refund");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ModificationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Standard problem response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Standard problem response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Standard problem response.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Force approve a payment
        /// </summary>
        /// <remarks>
        /// This endpoint is only available in the test environment.
        /// <br/>It allows developers to approve a payment through the ePayment API
        /// <br/>without the use of the Vipps or MobilePay app. This is useful for automated testing.
        /// <br/>Express checkout is not supported for this endpoint.
        /// <br/>Attempted use in production is not allowed, and will fail.
        /// <br/>Important: All test users must manually approve at least one payment
        /// <br/>in the Vipps or MobilePay app before this endpoint can be used for that user.
        /// </remarks>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for a sales unit.
        /// <br/> See [API keys](https://developer.vippsmobilepay.com/docs/knowledge-base/api-keys/).</param>
        /// <param name="body">Force approve request body</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task ForceApproveAsync(string reference, string merchant_Serial_Number, string ocp_Apim_Subscription_Key, ForceApprove body = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (reference == null)
                throw new System.ArgumentNullException("reference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (merchant_Serial_Number == null)
                        throw new System.ArgumentNullException("merchant_Serial_Number");
                    request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "v1/test/payments/{reference}/approve"
                    urlBuilder_.Append("v1/test/payments/");
                    urlBuilder_.Append("/approve");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, IReadOnlyDictionary<string, IEnumerable<string>> headers, CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(EnumMemberAttribute)) 
                            as EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// The target customer if the identity is known.
    /// <br/>The customer can be specified either with phone number, the customer token
    /// <br/>or with the user's personal QR code
    /// <br/>Specifying more than one of these will result in an error.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Customer
    {

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The full content of the user's personal QR code in the app, used in 'merchant scan' scenarios. 
    /// <br/>After the personal QR code has been scanned in a physical context, send the complete QR
    /// <br/>code content in this field to initiate a payment from the user (and do not send `phoneNumber`).
    /// <br/>
    /// <br/>**Important:** The content of the QR code can change at any time, without warning.
    /// <br/>It is very important to send the _complete content of the QR code_, like the complete URL in the example below.
    /// <br/>While the personal QR code does reveal the user's phone number in this example, that may change.
    /// <br/>The [Userinfo API](https://developer.vippsmobilepay.com/docs/APIs/userinfo-api/)
    /// <br/>should be used if you need the user to share personal information, 
    /// <br/>such as phone number, email address, etc.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PersonalQrCode
    {
        /// <summary>
        /// The full content of the user's personal QR code in the app.
        /// </summary>

        [JsonPropertyName("personalQr")]
        [StringLength(255, MinimumLength = 5)]
        public string PersonalQr { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The customer's token, if it is available. This token will be sent as part of the user.checked-in.v1 webhook event when a user scans a merchant callback QR
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerToken
    {
        /// <summary>
        /// A distinct token per customer.
        /// </summary>

        [JsonPropertyName("customerToken")]
        public string CustomerToken1 { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Amount object, containing a `value` and a `currency`.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount
    {

        [JsonPropertyName("currency")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public Currency Currency { get; set; }

        /// <summary>
        /// Amounts are specified in minor units (i.e., integers with two trailing zeros).
        /// <br/>For example: 10.00 NOK should be written as 1000.
        /// </summary>

        [JsonPropertyName("value")]
        [Range(0D, 65000000D)]
        public long Value { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Available types of currency are NOK, DKK, and EUR.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Currency
    {

        [EnumMember(Value = @"NOK")]
        NOK = 0,

        [EnumMember(Value = @"DKK")]
        DKK = 1,

        [EnumMember(Value = @"EUR")]
        EUR = 2,

    }

    /// <summary>
    /// Metadata is a key-value map that can be used to store additional
    /// <br/>information about the payment. The metadata is not used by Vipps
    /// <br/>MobilePay, but is passed through in the `GetPaymentResponse` object.
    /// <br/>Key length is limited to 100 characters, and value length is limited to 500 characters.
    /// <br/>Max capacity is 5 key-value pairs.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata : Dictionary<string, string>
    {

    }

    /// <summary>
    /// The `CreatePaymentRequest` object.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreatePaymentRequest
    {

        [JsonPropertyName("amount")]
        [Required]
        public Amount Amount { get; set; } = new Amount();

        [JsonPropertyName("customer")]
        public Customer Customer { get; set; }

        /// <summary>
        /// Minimum age in years required for the customer to make the purchase.
        /// </summary>

        [JsonPropertyName("minimumUserAge")]
        [Range(0, 100)]
        public int? MinimumUserAge { get; set; }

        /// <summary>
        /// The type of customer interaction that triggers the purchase.
        /// <br/>`CUSTOMER_PRESENT` means that the customer is physically present at the
        /// <br/>point of sale when the payment is made, typically in a store.
        /// </summary>

        [JsonPropertyName("customerInteraction")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public CreatePaymentRequestCustomerInteraction CustomerInteraction { get; set; } = Vipps.net.Models.Epayment.CreatePaymentRequestCustomerInteraction.CUSTOMER_NOT_PRESENT;

        [JsonPropertyName("industryData")]
        public IndustryData IndustryData { get; set; }

        [JsonPropertyName("paymentMethod")]
        [Required]
        public PaymentMethod PaymentMethod { get; set; } = new PaymentMethod();

        [JsonPropertyName("profile")]
        public ProfileRequest Profile { get; set; }

        [JsonPropertyName("reference")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(50, MinimumLength = 8)]
        [RegularExpression(@"^[a-zA-Z0-9-]{8,50}$")]
        public string Reference { get; set; }

        /// <summary>
        /// The URL the user is returned to after the payment session.
        /// <br/>The URL must use the `https://` scheme or a custom URL scheme.
        /// </summary>

        [JsonPropertyName("returnUrl")]
        public string ReturnUrl { get; set; }

        /// <summary>
        /// The flow for bringing the user to the Vipps or MobilePay app's payment confirmation screen.
        /// <br/>If `userFlow` is `PUSH_MESSAGE`, a valid value for `customer` is required.
        /// <br/>If `userFlow` is `WEB_REDIRECT`, a valid value for `returnUrl` is required.
        /// <br/>`WEB_REDIRECT` is the normal flow for browser-based payment flows. 
        /// <br/>If on a mobile device, the Vipps or MobilePay app will open. A valid value for `returnUrl` is required.
        /// <br/>Otherwise, the [landing page](https://developer.vippsmobilepay.com/docs/knowledge-base/landing-page/) will open.
        /// <br/>`NATIVE_REDIRECT` is for automatic app-switch between the merchant's native app and the Vipps or MobilePay app.
        /// <br/>`PUSH_MESSAGE` is to skip the landing page for payments initiated on a device other than the user's phone.
        /// <br/>The user gets a push message that opens the payment in the app. This requires a valid `customer` field.
        /// <br/>`QR` returns a QR code that can be scanned to complete the payment.
        /// </summary>

        [JsonPropertyName("userFlow")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public CreatePaymentRequestUserFlow UserFlow { get; set; }

        /// <summary>
        /// The payment will expire at the given date and time.
        /// <br/>The format must adhere to RFC 3339.
        /// <br/>The value must be more than 10 minutes and less than 60 days in the future.
        /// <br/>Can only be combined with `userFlow: PUSH_MESSAGE` or `userFlow: QR`.
        /// <br/>
        /// <br/>If `ExpiresAt` is set, `receipt` also must be set.
        /// </summary>

        [JsonPropertyName("expiresAt")]
        [RegularExpression(@"^((?:(\d{4}-\d{2}-\d{2})(T|t)(\d{2}:\d{2}:\d{2}(?:\.\d+)?))(Z|z|([+-](?:2[0-3]|[01][0-9]):[0-5][0-9])))$")]
        public string ExpiresAt { get; set; }

        /// <summary>
        /// Optional setting that is only applicable when `userFlow` is set to `QR`.
        /// <br/>This is used to set the format for the QR code.
        /// </summary>

        [JsonPropertyName("qrFormat")]
        public QrFormat QrFormat { get; set; }

        /// <summary>
        /// The payment description summary that will be provided to the user
        /// <br/>through the app, the merchant portal, and the settlement files.
        /// <br/>See the [recommendations](/docs/knowledge-base/transactiontext/).
        /// </summary>

        [JsonPropertyName("paymentDescription")]
        [StringLength(100, MinimumLength = 3)]
        public string PaymentDescription { get; set; }

        [JsonPropertyName("receipt")]
        public Receipt Receipt { get; set; }

        [JsonPropertyName("metadata")]
        public Metadata Metadata { get; set; }

        /// <summary>
        /// The URL where a receipt can be viewed or downloaded.
        /// <br/>The URL must use the `https://` scheme or a custom URL scheme.
        /// </summary>

        [JsonPropertyName("receiptUrl")]
        public string ReceiptUrl { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The `CreatePaymentResponse` object.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreatePaymentResponse
    {
        /// <summary>
        /// The URL to which the user is redirected when continuing the payment
        /// <br/>for `NATIVE_REDIRECT` and `WEB_REDIRECT`. When `userFlow` is `QR`,
        /// <br/>a link to the QR image (or the target URL) will be returned.
        /// <br/>Nothing will be returned when `userFlow` is `PUSH_MESSAGE`.
        /// </summary>

        [JsonPropertyName("redirectUrl")]
        public System.Uri RedirectUrl { get; set; }

        [JsonPropertyName("reference")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(50, MinimumLength = 8)]
        [RegularExpression(@"^[a-zA-Z0-9-]{8,50}$")]
        public string Reference { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The `GetPaymentResponse` object.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPaymentResponse
    {

        [JsonPropertyName("aggregate")]
        [Required]
        public Aggregate Aggregate { get; set; } = new Aggregate();

        [JsonPropertyName("amount")]
        [Required]
        public Amount Amount { get; set; } = new Amount();

        [JsonPropertyName("state")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public State State { get; set; }

        [JsonPropertyName("paymentMethod")]
        [Required]
        public PaymentMethodResponse PaymentMethod { get; set; } = new PaymentMethodResponse();

        [JsonPropertyName("profile")]
        [Required]
        public ProfileResponse Profile { get; set; } = new ProfileResponse();

        [JsonPropertyName("pspReference")]
        [Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }

        /// <summary>
        /// The URL you should redirect the user to to continue with the payment.
        /// <br/>This is the URL to the Vipps MobilePay landing page.
        /// <br/>See: https://developer.vippsmobilepay.com/docs/knowledge-base/landing-page/
        /// </summary>

        [JsonPropertyName("redirectUrl")]
        public System.Uri RedirectUrl { get; set; }

        [JsonPropertyName("reference")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(50, MinimumLength = 8)]
        [RegularExpression(@"^[a-zA-Z0-9-]{8,50}$")]
        public string Reference { get; set; }

        [JsonPropertyName("metadata")]
        public Metadata Metadata { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Additional compliance data related to the transaction.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IndustryData
    {

        [JsonPropertyName("airlineData")]
        public AirlineData AirlineData { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Airline related data.
    /// <br/>If present, `passengerName`, `airlineCode`, `airlineDesignatorCode`,
    /// <br/>and `agencyInvoiceNumber` are all required.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AirlineData
    {
        /// <summary>
        /// Reference number for the invoice, issued by the agency.
        /// </summary>

        [JsonPropertyName("agencyInvoiceNumber")]
        [Required]
        [StringLength(6, MinimumLength = 1)]
        public string AgencyInvoiceNumber { get; set; }

        /// <summary>
        /// IATA 3-digit accounting code (PAX); numeric.
        /// <br/>It identifies the carrier. eg KLM = 074.
        /// </summary>

        [JsonPropertyName("airlineCode")]
        [Required]
        [StringLength(3, MinimumLength = 3)]
        public string AirlineCode { get; set; }

        /// <summary>
        /// IATA 2-letter accounting code (PAX); alphabetical.
        /// <br/>It identifies the carrier. Eg KLM = KL.
        /// </summary>

        [JsonPropertyName("airlineDesignatorCode")]
        [Required]
        [StringLength(2, MinimumLength = 2)]
        public string AirlineDesignatorCode { get; set; }

        /// <summary>
        /// Passenger name, initials, and a title.
        /// </summary>

        [JsonPropertyName("passengerName")]
        [Required]
        [StringLength(49, MinimumLength = 1)]
        public string PassengerName { get; set; }

        /// <summary>
        /// The ticket's unique identifier.
        /// </summary>

        [JsonPropertyName("ticketNumber")]
        [StringLength(150, MinimumLength = 1)]
        public string TicketNumber { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Aggregate
    {

        [JsonPropertyName("authorizedAmount")]
        [Required]
        public Amount AuthorizedAmount { get; set; } = new Amount();

        [JsonPropertyName("cancelledAmount")]
        [Required]
        public Amount CancelledAmount { get; set; } = new Amount();

        [JsonPropertyName("capturedAmount")]
        [Required]
        public Amount CapturedAmount { get; set; } = new Amount();

        [JsonPropertyName("refundedAmount")]
        [Required]
        public Amount RefundedAmount { get; set; } = new Amount();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CancelModificationRequest
    {
        /// <summary>
        /// Only cancel transaction if it has not been authorized.
        /// <br/>If this flag is set and the transaction has been authorized, the reserved amount will not be canceled.
        /// </summary>

        [JsonPropertyName("cancelTransactionOnly")]
        public bool CancelTransactionOnly { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaptureModificationRequest
    {

        [JsonPropertyName("modificationAmount")]
        [Required]
        public Amount ModificationAmount { get; set; } = new Amount();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefundModificationRequest
    {

        [JsonPropertyName("modificationAmount")]
        [Required]
        public Amount ModificationAmount { get; set; } = new Amount();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModificationResponse
    {

        [JsonPropertyName("amount")]
        [Required]
        public Amount Amount { get; set; } = new Amount();

        [JsonPropertyName("state")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public State State { get; set; }

        [JsonPropertyName("aggregate")]
        [Required]
        public Aggregate Aggregate { get; set; } = new Aggregate();

        [JsonPropertyName("pspReference")]
        [Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }

        [JsonPropertyName("reference")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(50, MinimumLength = 8)]
        [RegularExpression(@"^[a-zA-Z0-9-]{8,50}$")]
        public string Reference { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PaymentEventName
    {

        [EnumMember(Value = @"CREATED")]
        CREATED = 0,

        [EnumMember(Value = @"ABORTED")]
        ABORTED = 1,

        [EnumMember(Value = @"EXPIRED")]
        EXPIRED = 2,

        [EnumMember(Value = @"CANCELLED")]
        CANCELLED = 3,

        [EnumMember(Value = @"CAPTURED")]
        CAPTURED = 4,

        [EnumMember(Value = @"REFUNDED")]
        REFUNDED = 5,

        [EnumMember(Value = @"AUTHORIZED")]
        AUTHORIZED = 6,

        [EnumMember(Value = @"TERMINATED")]
        TERMINATED = 7,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address
    {

        [JsonPropertyName("city")]
        [Required(AllowEmptyStrings = true)]
        public string City { get; set; }

        /// <summary>
        /// Country code according to ISO 3166-2 (two capital letters).
        /// </summary>

        [JsonPropertyName("country")]
        [Required(AllowEmptyStrings = true)]
        [RegularExpression(@"^[A-Z]{2}$")]
        public string Country { get; set; }

        /// <summary>
        /// Unique ID of the address, always provided in response from Vipps MobilePay.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// Array of addressLines, for example street name, number, etc.
        /// </summary>

        [JsonPropertyName("lines")]
        [Required]
        public ICollection<string> Lines { get; set; } = new Collection<string>();

        /// <summary>
        /// Postcode of the address in local country format.
        /// </summary>

        [JsonPropertyName("postCode")]
        [Required(AllowEmptyStrings = true)]
        public string PostCode { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProfileRequest
    {
        /// <summary>
        /// A space-separated string list of the required user information (e.g., "name phoneNumber") for the payment, in
        /// <br/>accordance with the OpenID Connect specification.
        /// <br/>See the
        /// <br/>[Userinfo user guide](https://developer.vippsmobilepay.com/docs/APIs/userinfo-api/userinfo-api-guide#scope)
        /// <br/>for details.
        /// <br/>Possible values are:
        /// <br/>- name
        /// <br/>- address
        /// <br/>- email
        /// <br/>- phoneNumber
        /// <br/>- birthDate
        /// <br/>- nin
        /// </summary>

        [JsonPropertyName("scope")]
        public string Scope { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProfileResponse
    {
        /// <summary>
        /// If `profile.scope` was requested in `createPayment`, this value will be populated once
        /// <br/>`state` is `AUTHORIZED`. This can be used towards the
        /// <br/>[Userinfo endpoint](https://developer.vippsmobilepay.com/api/userinfo#operation/getUserinfo)
        /// <br/>to fetch required user data.
        /// </summary>

        [JsonPropertyName("sub")]
        public string Sub { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentMethod
    {

        [JsonPropertyName("type")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PaymentMethodType Type { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentMethodResponse
    {

        [JsonPropertyName("type")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PaymentMethodType Type { get; set; }

        /// <summary>
        /// The payment card's Bank Identification Number (BIN), that
        /// <br/>identifies which bank has issued the card.
        /// </summary>

        [JsonPropertyName("cardBin")]
        [StringLength(6, MinimumLength = 6)]
        public string CardBin { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The paymentMethod type to be performed.
    /// <br/>`WALLET` is a card used in the Vipps or MobilePay app.
    /// <br/>`CARD` is free-standing card payments, outside of the Vipps or MobilePay app.
    /// <br/>`CARD` has to be combined with a `userFlow` of `WEB_REDIRECT`,
    /// <br/>as the card payment can not be completed in the Vipps or MobilePay app.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PaymentMethodType
    {

        [EnumMember(Value = @"WALLET")]
        WALLET = 0,

        [EnumMember(Value = @"CARD")]
        CARD = 1,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentAdjustment
    {

        [JsonPropertyName("modificationAmount")]
        [Required]
        public Amount ModificationAmount { get; set; } = new Amount();

        [JsonPropertyName("modificationReference")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(50, MinimumLength = 8)]
        [RegularExpression(@"^[a-zA-Z0-9-]{8,50}$")]
        public string ModificationReference { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WebhookEvent
    {

        [JsonPropertyName("msn")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(7, MinimumLength = 4)]
        [RegularExpression(@"^[0-9]{4,7}$")]
        public string Msn { get; set; }

        [JsonPropertyName("reference")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(50, MinimumLength = 8)]
        [RegularExpression(@"^[a-zA-Z0-9-]{8,50}$")]
        public string Reference { get; set; }

        [JsonPropertyName("pspReference")]
        [Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }

        [JsonPropertyName("name")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PaymentEventName Name { get; set; }

        [JsonPropertyName("amount")]
        [Required]
        public Amount Amount { get; set; } = new Amount();

        [JsonPropertyName("timestamp")]
        [Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; }

        /// <summary>
        /// The Idempotency key of the request.
        /// </summary>

        [JsonPropertyName("idempotencyKey")]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// The outcome of the event
        /// </summary>

        [JsonPropertyName("success")]
        public bool Success { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentEvent
    {

        [JsonPropertyName("reference")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(50, MinimumLength = 8)]
        [RegularExpression(@"^[a-zA-Z0-9-]{8,50}$")]
        public string Reference { get; set; }

        [JsonPropertyName("pspReference")]
        [Required(AllowEmptyStrings = true)]
        public string PspReference { get; set; }

        [JsonPropertyName("name")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PaymentEventName Name { get; set; }

        [JsonPropertyName("amount")]
        [Required]
        public Amount Amount { get; set; } = new Amount();

        [JsonPropertyName("timestamp")]
        [Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; }

        /// <summary>
        /// The idempotency key of the request.
        /// <br/>Specified by the merchant/partner making the API request.
        /// </summary>

        [JsonPropertyName("idempotencyKey")]
        [StringLength(50)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// The outcome of the event
        /// </summary>

        [JsonPropertyName("success")]
        public bool Success { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The standard error object, based on RFC 7808.
    /// <br/>See https://developer.vippsmobilepay.com/docs/knowledge-base/errors
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Problem
    {
        /// <summary>
        /// A URI reference that identifies the problem type.
        /// </summary>

        [JsonPropertyName("type")]
        [Required(AllowEmptyStrings = true)]
        public System.Uri Type { get; set; }

        /// <summary>
        /// A short, human-readable summary of the problem type. It will not change from occurrence to occurrence of the problem.
        /// </summary>

        [JsonPropertyName("title")]
        [Required(AllowEmptyStrings = true)]
        public string Title { get; set; }

        /// <summary>
        /// A human-readable explanation specific to this occurrence of the problem.
        /// </summary>

        [JsonPropertyName("detail")]
        public string Detail { get; set; }

        /// <summary>
        /// The HTTP response code.
        /// </summary>

        [JsonPropertyName("status")]
        public int Status { get; set; }

        /// <summary>
        /// An id that can be used to facilitate in tracing the error.
        /// </summary>

        [JsonPropertyName("traceId")]
        [Required(AllowEmptyStrings = true)]
        public string TraceId { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The state of the Payment.
    /// <br/>One of:
    /// <br/>- `CREATED`: The user has not yet acted upon the payment.
    /// <br/>  Example: The user has received a push message, but not yet opened it.
    /// <br/>- `ABORTED`: The user has aborted the payment before authorization. This is a final state.
    /// <br/>  Example: The user cancelled instead of accepting the payment.
    /// <br/>- `EXPIRED`: The user did not act on the payment within the payment expiration time. This is a final state.
    /// <br/>  Example: The user received a push message, but did nothing before the payment request timed out.
    /// <br/>- `AUTHORIZED`: The user has approved the payment. This is a final state.
    /// <br/>  Example: A payment that has been refunded may have one or more refund events, but the state would be `AUTHORIZED`. 
    /// <br/>- `TERMINATED`: The merchant has terminated the payment via the cancelPayment endpoint. This is a final state.
    /// <br/>  Example: The merchant was not able to provide the product or service, and has cancelled the payment.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum State
    {

        [EnumMember(Value = @"CREATED")]
        CREATED = 0,

        [EnumMember(Value = @"ABORTED")]
        ABORTED = 1,

        [EnumMember(Value = @"EXPIRED")]
        EXPIRED = 2,

        [EnumMember(Value = @"AUTHORIZED")]
        AUTHORIZED = 3,

        [EnumMember(Value = @"TERMINATED")]
        TERMINATED = 4,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ForceApprove
    {

        [JsonPropertyName("customer")]
        public Customer Customer { get; set; }

        /// <summary>
        /// The token value received in the `redirectUrl` property in the Create payment response
        /// </summary>

        [JsonPropertyName("token")]
        public string Token { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Available units for quantity. Will default to PCS if not set
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum QuantityUnitEnum
    {

        [EnumMember(Value = @"PCS")]
        PCS = 0,

        [EnumMember(Value = @"KG")]
        KG = 1,

        [EnumMember(Value = @"KM")]
        KM = 2,

        [EnumMember(Value = @"MINUTE")]
        MINUTE = 3,

        [EnumMember(Value = @"LITRE")]
        LITRE = 4,

        [EnumMember(Value = @"KWH")]
        KWH = 5,

    }

    /// <summary>
    /// Optional. If no quantity info is provided the order line will default to 1 pcs
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnitInfo
    {
        /// <summary>
        /// Total price per unit, including tax and excluding discount
        /// </summary>

        [JsonPropertyName("unitPrice")]
        [Range(0D, double.MaxValue)]
        public long? UnitPrice { get; set; }

        /// <summary>
        /// Quantity given as a integer or fraction (only for cosmetics)
        /// </summary>

        [JsonPropertyName("quantity")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(10)]
        [RegularExpression(@"^\d+([\.]\d{1,8})?$")]
        public string Quantity { get; set; }

        [JsonPropertyName("quantityUnit")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public QuantityUnitEnum? QuantityUnit { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Amounts are specified in minor units (i.e., integers with two trailing zeros). For example: 10.00 EUR/NOK/DKK should be written as 1000.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderLine
    {
        /// <summary>
        /// Name of the product in the order line.
        /// </summary>

        [JsonPropertyName("name")]
        [Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The product ID
        /// </summary>

        [JsonPropertyName("id")]
        [Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// Total amount of the order line, including tax and discount. Amounts are specified in minor units (i.e., integers with two trailing zeros). For example: 10.00 EUR/NOK/DKK should be written as 1000.
        /// </summary>

        [JsonPropertyName("totalAmount")]
        public long TotalAmount { get; set; }

        /// <summary>
        /// Total amount of order line with discount excluding tax. Amounts are specified in minor units (i.e., integers with two trailing zeros). For example: 10.00 EUR/NOK/DKK should be written as 1000.
        /// </summary>

        [JsonPropertyName("totalAmountExcludingTax")]
        public long TotalAmountExcludingTax { get; set; }

        /// <summary>
        /// Total tax amount paid for the order line. Amounts are specified in minor units (i.e., integers with two trailing zeros). For example: 10.00 EUR/NOK/DKK should be written as 1000.
        /// </summary>

        [JsonPropertyName("totalTaxAmount")]
        public long TotalTaxAmount { get; set; }

        /// <summary>
        /// Tax percentage for the order line. Between 0-100
        /// </summary>

        [JsonPropertyName("taxPercentage")]
        [Range(0, 100)]
        public int TaxPercentage { get; set; }

        [JsonPropertyName("unitInfo")]
        public UnitInfo UnitInfo { get; set; }

        /// <summary>
        /// Total discount for the order line. Amounts are specified in minor units (i.e., integers with two trailing zeros). For example: 1.00 EUR/NOK/DKK should be written as 100.
        /// </summary>

        [JsonPropertyName("discount")]
        [Range(0D, double.MaxValue)]
        public long? Discount { get; set; }

        /// <summary>
        /// Optional URL linking back to the product at the merchant.
        /// </summary>

        [JsonPropertyName("productUrl")]
        public string ProductUrl { get; set; }

        /// <summary>
        /// Flag for marking the order line as returned. This will make it count negative towards all the sums in bottomLine.
        /// </summary>

        [JsonPropertyName("isReturn")]
        public bool? IsReturn { get; set; }

        /// <summary>
        /// Flag for marking the order line as a shipping line. This will be shown differently in the app.
        /// </summary>

        [JsonPropertyName("isShipping")]
        public bool? IsShipping { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Currency information
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CurrencyEnum
    {

        [EnumMember(Value = @"NOK")]
        NOK = 0,

        [EnumMember(Value = @"DKK")]
        DKK = 1,

        [EnumMember(Value = @"EUR")]
        EUR = 2,

    }

    /// <summary>
    /// Deprecated, use a regular orderLine with "isShipping" flag. Using this will result in faulty calculation of sum and tax.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.Obsolete]
    public partial class ShippingInfo
    {
        /// <summary>
        /// Total amount for the shipping, including tax and discount
        /// </summary>

        [JsonPropertyName("amount")]
        [Range(0D, double.MaxValue)]
        public long? Amount { get; set; }

        /// <summary>
        /// Total amount for shipping excluding tax
        /// </summary>

        [JsonPropertyName("amountExcludingTax")]
        [Range(0D, double.MaxValue)]
        public long? AmountExcludingTax { get; set; }

        /// <summary>
        /// Total tax amount paid for the shipping
        /// </summary>

        [JsonPropertyName("taxAmount")]
        [Range(0D, double.MaxValue)]
        public long? TaxAmount { get; set; }

        /// <summary>
        /// Tax-percentage for the Shipping
        /// </summary>

        [JsonPropertyName("taxPercentage")]
        [Range(0, 100)]
        public int? TaxPercentage { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentSources
    {

        [JsonPropertyName("giftCard")]
        public int? GiftCard { get; set; }

        [JsonPropertyName("card")]
        public int? Card { get; set; }

        [JsonPropertyName("voucher")]
        public int? Voucher { get; set; }

        [JsonPropertyName("cash")]
        public int? Cash { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BarcodeFormatEnum
    {

        [EnumMember(Value = @"EAN-13")]
        EAN13 = 0,

        [EnumMember(Value = @"CODE 39")]
        CODE_39 = 1,

        [EnumMember(Value = @"CODE 128")]
        CODE_128 = 2,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Barcode
    {

        [JsonPropertyName("format")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public BarcodeFormatEnum? Format { get; set; }

        [JsonPropertyName("data")]
        public string Data { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Summary of the order. Total amount and total. Amounts are specified in minor units (i.e., integers with two trailing zeros). For example: 10.00 EUR/NOK/DKK should be written as 1000.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BottomLine
    {

        [JsonPropertyName("currency")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public CurrencyEnum? Currency { get; set; }

        /// <summary>
        /// Tip amount for the order. Amounts are specified in minor units (i.e., integers with two trailing zeros). For example: 10.00 EUR/NOK/DKK should be written as 1000.
        /// </summary>

        [JsonPropertyName("tipAmount")]
        [Range(0D, double.MaxValue)]
        public long? TipAmount { get; set; }

        /// <summary>
        /// Amount paid by gift card or coupon.
        /// </summary>

        [JsonPropertyName("giftCardAmount")]
        [Range(0D, double.MaxValue)]
        [System.Obsolete]
        public long? GiftCardAmount { get; set; }

        /// <summary>
        /// POS ID is the device number of the POS terminal
        /// </summary>

        [JsonPropertyName("posId")]
        public string PosId { get; set; }

        /// <summary>
        /// Deprecated, sum will be calculated based on the sum of the orderLines
        /// </summary>

        [JsonPropertyName("totalAmount")]
        [System.Obsolete]
        public long? TotalAmount { get; set; }

        /// <summary>
        /// Deprecated, tax will be calculated based on the sum of the totalTaxAmount field on each orderLine
        /// </summary>

        [JsonPropertyName("totalTax")]
        [Range(0D, double.MaxValue)]
        [System.Obsolete]
        public long? TotalTax { get; set; }

        /// <summary>
        /// Deprecated, discount will be calculated based on the sum of the discount field on each orderLine
        /// </summary>

        [JsonPropertyName("totalDiscount")]
        [Range(0D, double.MaxValue)]
        [System.Obsolete]
        public long? TotalDiscount { get; set; }

        /// <summary>
        /// Deprecated, use a regular orderLine with "isShipping" flag. Using this will result in faulty calculation of sum and tax.
        /// </summary>

        [JsonPropertyName("shippingAmount")]
        [Range(0D, double.MaxValue)]
        [System.Obsolete]
        public long? ShippingAmount { get; set; }

        [JsonPropertyName("shippingInfo")]
        public ShippingInfo ShippingInfo { get; set; }

        [JsonPropertyName("paymentSources")]
        public PaymentSources PaymentSources { get; set; }

        [JsonPropertyName("barcode")]
        public Barcode Barcode { get; set; }

        [JsonPropertyName("receiptNumber")]
        public string ReceiptNumber { get; set; }

        /// <summary>
        /// Deprecated, use "posId" instead.
        /// </summary>

        [JsonPropertyName("terminalId")]
        [System.Obsolete]
        public string TerminalId { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Receipt
    {
        /// <summary>
        /// Amounts are specified in minor units (i.e., integers with two trailing zeros). For example: 10.00 EUR/NOK/DKK should be written as 1000.
        /// </summary>

        [JsonPropertyName("orderLines")]
        [Required]
        [MinLength(1)]
        public ICollection<OrderLine> OrderLines { get; set; } = new Collection<OrderLine>();

        [JsonPropertyName("bottomLine")]
        [Required]
        public BottomLine BottomLine { get; set; } = new BottomLine();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CreatePaymentRequestCustomerInteraction
    {

        [EnumMember(Value = @"CUSTOMER_PRESENT")]
        CUSTOMER_PRESENT = 0,

        [EnumMember(Value = @"CUSTOMER_NOT_PRESENT")]
        CUSTOMER_NOT_PRESENT = 1,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CreatePaymentRequestUserFlow
    {

        [EnumMember(Value = @"PUSH_MESSAGE")]
        PUSH_MESSAGE = 0,

        [EnumMember(Value = @"NATIVE_REDIRECT")]
        NATIVE_REDIRECT = 1,

        [EnumMember(Value = @"WEB_REDIRECT")]
        WEB_REDIRECT = 2,

        [EnumMember(Value = @"QR")]
        QR = 3,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QrFormat
    {
        /// <summary>
        /// If `userFlow` is `QR` and `qrFormat` is not set, the QR code image will be returned as `SVG+XML`, by default.
        /// </summary>

        [JsonPropertyName("format")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public QrFormatFormat Format { get; set; } = Vipps.net.Models.Epayment.QrFormatFormat.IMAGE_SVG_XML;

        /// <summary>
        /// For example, if the value is 200, then 200x200 px is set as the dimension for the QR code.
        /// <br/>This is only applicable when the format is set to `PNG`. If not set, the default is 1024.
        /// </summary>

        [JsonPropertyName("size")]
        [Range(100, 2000)]
        public int? Size { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum QrFormatFormat
    {

        [EnumMember(Value = @"TEXT/TARGETURL")]
        TEXT_TARGETURL = 0,

        [EnumMember(Value = @"IMAGE/SVG+XML")]
        IMAGE_SVG_XML = 1,

        [EnumMember(Value = @"IMAGE/PNG")]
        IMAGE_PNG = 2,

    }



    [GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public IReadOnlyDictionary<string, IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, IReadOnlyDictionary<string, IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, IReadOnlyDictionary<string, IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625
