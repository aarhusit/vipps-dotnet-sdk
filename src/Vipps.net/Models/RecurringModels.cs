//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace Vipps.net.Models.Recurring
{
    using System;
	using System.Collections.Generic;
	using System.CodeDom.Compiler;
	using System.Text.Json.Serialization;
	using System.Runtime.Serialization;
	using System.Collections.ObjectModel;

    

    /// <summary>
    /// Status of the agreement.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AgreementStatus
    {

        [EnumMember(Value = @"PENDING")]
        PENDING = 0,

        [EnumMember(Value = @"ACTIVE")]
        ACTIVE = 1,

        [EnumMember(Value = @"STOPPED")]
        STOPPED = 2,

        [EnumMember(Value = @"EXPIRED")]
        EXPIRED = 3,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChargeStatus
    {

        [EnumMember(Value = @"PENDING")]
        PENDING = 0,

        [EnumMember(Value = @"DUE")]
        DUE = 1,

        [EnumMember(Value = @"RESERVED")]
        RESERVED = 2,

        [EnumMember(Value = @"CHARGED")]
        CHARGED = 3,

        [EnumMember(Value = @"PARTIALLY_CAPTURED")]
        PARTIALLY_CAPTURED = 4,

        [EnumMember(Value = @"FAILED")]
        FAILED = 5,

        [EnumMember(Value = @"CANCELLED")]
        CANCELLED = 6,

        [EnumMember(Value = @"PARTIALLY_REFUNDED")]
        PARTIALLY_REFUNDED = 7,

        [EnumMember(Value = @"REFUNDED")]
        REFUNDED = 8,

        [EnumMember(Value = @"PROCESSING")]
        PROCESSING = 9,

    }

    /// <summary>
    /// A summary of the amounts captured, refunded and cancelled
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChargeSummary
    {
        /// <summary>
        /// The total amount which has been captured/charged, in case of status charged/partial capture.
        /// <br/>Amounts are specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("captured")]
        public int Captured { get; set; }

        /// <summary>
        /// The total amount which has been refunded, in case of status refund/partial refund.
        /// <br/>Amounts are specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("refunded")]
        public int Refunded { get; set; }

        /// <summary>
        /// The total amount which has been cancelled.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("cancelled")]
        public int Cancelled { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of events related to the charge.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChargeHistory : Collection<ChargeEvent>
    {

    }

    /// <summary>
    /// Describes the operation that was performed on the charge
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChargeEvent
    {
        /// <summary>
        /// Date and time of the event, as timestamp on the format `yyyy-MM-dd'T'HH:mm:ss'Z'`,
        /// <br/>with or without milliseconds.
        /// </summary>

        [JsonPropertyName("occurred")]
        public System.DateTimeOffset Occurred { get; set; }

        [JsonPropertyName("event")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ChargeEventEvent Event { get; set; }

        /// <summary>
        /// The amount related to the operation.
        /// <br/>Amounts are specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("amount")]
        public int Amount { get; set; }

        /// <summary>
        /// The idempotency key of the event
        /// </summary>

        [JsonPropertyName("idempotencyKey")]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// True if the operation was successful, false otherwise
        /// </summary>

        [JsonPropertyName("success")]
        public bool Success { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// ISO-4217: https://www.iso.org/iso-4217-currency-codes.html
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Currency
    {

        [EnumMember(Value = @"NOK")]
        NOK = 0,

    }

    /// <summary>
    /// Only NOK is supported at the moment. Support for EUR and DKK will be provided in early 2024.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CurrencyV3
    {

        [EnumMember(Value = @"NOK")]
        NOK = 0,

    }

    /// <summary>
    /// Type of transaction, either direct capture or reserve capture
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransactionType
    {

        [EnumMember(Value = @"DIRECT_CAPTURE")]
        DIRECT_CAPTURE = 0,

        [EnumMember(Value = @"RESERVE_CAPTURE")]
        RESERVE_CAPTURE = 1,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChargeType
    {

        [EnumMember(Value = @"INITIAL")]
        INITIAL = 0,

        [EnumMember(Value = @"RECURRING")]
        RECURRING = 1,

    }

    /// <summary>
    /// Interval for subscription
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Interval
    {

        [EnumMember(Value = @"YEAR")]
        YEAR = 0,

        [EnumMember(Value = @"MONTH")]
        MONTH = 1,

        [EnumMember(Value = @"WEEK")]
        WEEK = 2,

        [EnumMember(Value = @"DAY")]
        DAY = 3,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DraftAgreementV2
    {

        [JsonPropertyName("variableAmount")]
        public VariableAmount VariableAmount { get; set; }

        [JsonPropertyName("campaign")]
        public CampaignV2 Campaign { get; set; }

        [JsonPropertyName("currency")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public Currency Currency { get; set; }

        /// <summary>
        /// Customers phone number (if available). Used to simplify the
        /// <br/>following Vipps MobilePay interaction.
        /// <br/>The format is MSISDN: Digits only: Country code and subscriber
        /// <br/>number, but no prefix.
        /// <br/>If the phone number is a Norwegian phone number `(+47) 91 23 45 67`, the MSISDN representation is `4791234567`.
        /// <br/>See: https://en.wikipedia.org/wiki/MSISDN
        /// </summary>

        [JsonPropertyName("customerPhoneNumber")]
        public string CustomerPhoneNumber { get; set; }

        [JsonPropertyName("initialCharge")]
        public InitialChargeV2 InitialCharge { get; set; }

        [JsonPropertyName("interval")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public Interval Interval { get; set; }

        /// <summary>
        /// Number of intervals between charges. Example: interval=week,
        /// <br/>intervalCount=2 to be able to charge every two weeks.
        /// <br/>Charges should occur at least once a year.
        /// </summary>

        [JsonPropertyName("intervalCount")]
        public int IntervalCount { get; set; }

        /// <summary>
        /// This optional parameter indicates whether payment request is triggered from
        /// <br/>Mobile App or Web browser. Based on this value, response will be
        /// <br/>redirect URL for Vipps MobilePay landing page or deeplink URL to connect vipps
        /// <br/>App. When isApp is set to true, URLs passed to us will not be
        /// <br/>validated as regular URLs.
        /// <br/>See: https://developer.vippsmobilepay.com/docs/knowledge-base/isApp
        /// </summary>

        [JsonPropertyName("isApp")]
        public bool IsApp { get; set; } = false;

        /// <summary>
        /// URL where you can send the customer to view/manage their
        /// <br/>subscription. Typically a "My page" where the user can change, pause, cancel, etc.
        /// <br/>The page must offer management tools, not just information about how to
        /// <br/>contact customer service, etc.
        /// <br/>We recommend letting users
        /// <br/>[log in](/docs/APIs/login-api),
        /// <br/>not with username and password.
        /// <br/>We do not have any specific requirements for the security of the page other than requiring HTTPS.
        /// <br/>Only HTTP or HTTPS scheme is allowed. 
        /// </summary>

        [JsonPropertyName("merchantAgreementUrl")]
        public string MerchantAgreementUrl { get; set; }

        /// <summary>
        /// URL where customer should be redirected after the agreement has been
        /// <br/>approved/rejected in the Vipps or MobilePay app. 
        /// <br/>HTTPS and deeplinks are allowed (example: myApp://home)
        /// </summary>

        [JsonPropertyName("merchantRedirectUrl")]
        public string MerchantRedirectUrl { get; set; }

        /// <summary>
        /// The price of the agreement.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("price")]
        public int Price { get; set; }

        /// <summary>
        /// Product name (short)
        /// </summary>

        [JsonPropertyName("productName")]
        public string ProductName { get; set; }

        /// <summary>
        /// Product description (longer)
        /// </summary>

        [JsonPropertyName("productDescription")]
        public string ProductDescription { get; set; }

        /// <summary>
        /// Space-separated list of the required user information (e.g., "name phoneNumber")
        /// <br/>for the agreement. See the
        /// <br/>[Userinfo user guide](/docs/APIs/userinfo-api/userinfo-api-guide#scope)
        /// <br/>for details.
        /// <br/>Possible values are:
        /// <br/>- name
        /// <br/>- address
        /// <br/>- email
        /// <br/>- phoneNumber
        /// <br/>- birthDate
        /// <br/>- nin
        /// <br/>
        /// </summary>

        [JsonPropertyName("scope")]
        public string Scope { get; set; }

        /// <summary>
        /// If the property is set to `true`, it will cause a push notification
        /// <br/>to be sent to the given phone number immediately, without loading
        /// <br/>the landing page.
        /// <br/>This feature has to be specially enabled for eligible sales
        /// <br/>units: The sales units must be whitelisted by Vipps MobilePay. If the sales unit is not whitelisted,
        /// <br/>the request will fail and an error message will be returned (statusCode=403).
        /// <br/>See: https://developer.vippsmobilepay.com/docs/knowledge-base/landing-page
        /// </summary>

        [JsonPropertyName("skipLandingPage")]
        public bool SkipLandingPage { get; set; } = false;

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DraftAgreementV3
    {

        [JsonPropertyName("campaign")]
        public CampaignV3 Campaign { get; set; }

        [JsonPropertyName("pricing")]
        public PricingRequest Pricing { get; set; } = new PricingRequest();

        /// <summary>
        /// Customers phone number (if available). Used to simplify the
        /// <br/>following interaction. MSISDN: https://en.wikipedia.org/wiki/MSISDN
        /// </summary>

        [JsonPropertyName("phoneNumber")]
        public string PhoneNumber { get; set; }

        [JsonPropertyName("initialCharge")]
        public InitialChargeV3 InitialCharge { get; set; }

        [JsonPropertyName("interval")]
        public TimePeriod Interval { get; set; } = new TimePeriod();

        /// <summary>
        /// This optional parameter indicates whether payment request is triggered from
        /// <br/>Mobile App or Web browser. Based on this value, response will be
        /// <br/>redirect URL for Vipps MobilePay landing page or deeplink URL to connect vipps
        /// <br/>App. When isApp is set to true, URLs passed to us will not be
        /// <br/>validated as regular URLs.
        /// <br/>See: https://developer.vippsmobilepay.com/docs/knowledge-base/isApp
        /// </summary>

        [JsonPropertyName("isApp")]
        public bool IsApp { get; set; } = false;

        /// <summary>
        /// URL where we can send the customer to view/manage their
        /// <br/>subscription. Typically a "My page" where the user can change, pause, cancel, etc.
        /// <br/>The page must offer actual management, not just information about how to
        /// <br/>contact customer service, etc.
        /// <br/>We recommend letting users
        /// <br/>[log in](/docs/APIs/login-api),
        /// <br/>not with username and password.
        /// <br/>We do not have any specific requirements for the security of the page other than requiring HTTPS.
        /// <br/>Only HTTPS scheme is allowed. 
        /// </summary>

        [JsonPropertyName("merchantAgreementUrl")]
        public string MerchantAgreementUrl { get; set; }

        /// <summary>
        /// URL where customer should be redirected after the agreement has been
        /// <br/>approved/rejected in the Vipps mobile application.
        /// <br/>HTTPS and deeplinks are allowed (example: myApp://home)
        /// </summary>

        [JsonPropertyName("merchantRedirectUrl")]
        public string MerchantRedirectUrl { get; set; }

        /// <summary>
        /// Product name (short)
        /// </summary>

        [JsonPropertyName("productName")]
        public string ProductName { get; set; }

        /// <summary>
        /// Product description (longer)
        /// </summary>

        [JsonPropertyName("productDescription")]
        public string ProductDescription { get; set; }

        /// <summary>
        /// Space-separated list of the required user information (e.g., "name phoneNumber")
        /// <br/>for the agreement. See the
        /// <br/>[Userinfo user guide](/docs/APIs/userinfo-api/userinfo-api-guide#scope)
        /// <br/>for details.
        /// <br/>Possible values are:
        /// <br/>- name
        /// <br/>- address
        /// <br/>- email
        /// <br/>- phoneNumber
        /// <br/>- birthDate
        /// <br/>- nin
        /// <br/>
        /// </summary>

        [JsonPropertyName("scope")]
        public string Scope { get; set; }

        /// <summary>
        /// If the property is set to `true`, it will cause a push notification
        /// <br/>to be sent to the given phone number immediately, without loading
        /// <br/>the landing page.
        /// <br/>This feature has to be specially enabled for eligible sales
        /// <br/>units: The sales units must be whitelisted by Vipps MobilePay. If the sales unit is not whitelisted,
        /// <br/>the request will fail and an error message will be returned (statusCode=403).
        /// <br/>See: https://developer.vippsmobilepay.com/docs/knowledge-base/landing-page
        /// </summary>

        [JsonPropertyName("skipLandingPage")]
        public bool SkipLandingPage { get; set; } = false;

        /// <summary>
        /// An optional external ID for the agreement.
        /// <br/>The `externalId` can be used by the merchant to map the `agreementId`
        /// <br/>to an ID in a subscription system or similar.
        /// </summary>

        [JsonPropertyName("externalId")]
        public string ExternalId { get; set; }

        /// <summary>
        /// An optional country code for the agreement according to ISO 3166-2 (two capital letters)
        /// </summary>

        [JsonPropertyName("countryCode")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public DraftAgreementV3CountryCode CountryCode { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DraftAgreementResponseV2
    {
        /// <summary>
        /// Reference of a an agreement which user may agree to.
        /// <br/>Initially the agreement is in a pending state waiting for user approval.
        /// <br/>It enters active state once the user has approved it in the Vipps or MobilePay app.
        /// </summary>

        [JsonPropertyName("agreementResource")]
        public string AgreementResource { get; set; }

        /// <summary>
        /// Id of a an agreement which user may agree to.
        /// <br/>Initially the agreement is in a pending state waiting for user approval.
        /// <br/>It enters active state once the user has approved it in the Vipps or MobilePay app.
        /// </summary>

        [JsonPropertyName("agreementId")]
        public string AgreementId { get; set; }

        /// <summary>
        /// The `vippsConfirmationUrl` should be used to redirect the
        /// <br/>user to the Vipps MobilePay landing page in a desktop flow (with `https://`),
        /// <br/>or to the Vipps or MobilePay app in a mobile flow (with `vipps://`), where the
        /// <br/>user can then approve the agreement.
        /// </summary>

        [JsonPropertyName("vippsConfirmationUrl")]
        public string VippsConfirmationUrl { get; set; }

        /// <summary>
        /// The Id of the initialCharge if given, otherwise `null`.
        /// <br/>If an `orderId` is specified this is used as the `chargeId` otherwise it is auto generated.
        /// </summary>

        [JsonPropertyName("chargeId")]
        public string ChargeId { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DraftAgreementResponseV3
    {
        /// <summary>
        /// Id of a an agreement which user may agree to.
        /// <br/>Initially the agreement is in a pending state waiting for user approval.
        /// <br/>It enters active state once the user has approved it in the Vipps or MobilePay app.
        /// </summary>

        [JsonPropertyName("agreementId")]
        public string AgreementId { get; set; }

        /// <summary>
        /// UUID (RFC 4122) representation of agreementId
        /// </summary>

        [JsonPropertyName("uuid")]
        public System.Guid Uuid { get; set; }

        /// <summary>
        /// The `vippsConfirmationUrl` should be used to redirect the
        /// <br/>user to the Vipps MobilePay landing page in a desktop flow (with `https://`),
        /// <br/>or to the Vipps or MobilePay app in a mobile flow (with `vipps://`), where the
        /// <br/>user can then approve the agreement.
        /// </summary>

        [JsonPropertyName("vippsConfirmationUrl")]
        public string VippsConfirmationUrl { get; set; }

        /// <summary>
        /// The Id of the initialCharge if given, otherwise `null`.
        /// <br/>If an `orderId` is specified this is used as the `chargeId` otherwise it is auto generated.
        /// </summary>

        [JsonPropertyName("chargeId")]
        public string ChargeId { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AgreementResponseV2
    {

        [JsonPropertyName("campaign")]
        public CampaignV2 Campaign { get; set; }

        [JsonPropertyName("currency")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public Currency Currency { get; set; }

        /// <summary>
        /// Uniquely identifies this agreement
        /// </summary>

        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("interval")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public Interval Interval { get; set; }

        /// <summary>
        /// Number of intervals between charges. Example: interval=WEEK, intervalCount=2 to be able to charge every two weeks. Charges should occur at least once a year.
        /// </summary>

        [JsonPropertyName("intervalCount")]
        public int IntervalCount { get; set; }

        /// <summary>
        /// The price of the agreement.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("price")]
        public int Price { get; set; }

        /// <summary>
        /// Product name (short)
        /// </summary>

        [JsonPropertyName("productName")]
        public string ProductName { get; set; }

        /// <summary>
        /// Product description (longer)
        /// </summary>

        [JsonPropertyName("productDescription")]
        public string ProductDescription { get; set; }

        /// <summary>
        /// Date and time when agreement was started, in ISO 8601 format.
        /// <br/>This is when the agreement was activated.
        /// </summary>

        [JsonPropertyName("start")]
        public System.DateTimeOffset? Start { get; set; }

        /// <summary>
        /// Date and time when agreement was stopped, in ISO 8601 format.
        /// </summary>

        [JsonPropertyName("stop")]
        public System.DateTimeOffset? Stop { get; set; }

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public AgreementStatus Status { get; set; }

        /// <summary>
        /// URL where we can send the customer to view/manage their
        /// <br/>subscription. Typically a "My page" where the user can change, pause, cancel, etc.
        /// <br/>The page must offer actual management, not just information about how to
        /// <br/>contact customer service, etc.
        /// <br/>We recommend letting users log in with Vipps MobilePay, not with username and password:
        /// <br/>https://developer.vippsmobilepay.com/docs/APIs/login-api
        /// <br/>We do not have any specific requirements for the security of the
        /// <br/>page other than requiring HTTPS.
        /// </summary>

        [JsonPropertyName("merchantAgreementUrl")]
        public string MerchantAgreementUrl { get; set; }

        /// <summary>
        /// User identifier (subject). Will be null if profile data was not requested.
        /// </summary>

        [JsonPropertyName("sub")]
        public string Sub { get; set; }

        /// <summary>
        /// The full path of the URL for the userinfo endpoint where the user data can be retrieved:
        /// <br/>[`GET:/vipps-userinfo-api/userinfo/{sub}`](/api/userinfo#operation/getUserinfo).
        /// <br/>This will be null if profile data was not requested.
        /// </summary>

        [JsonPropertyName("userinfoUrl")]
        public string UserinfoUrl { get; set; }

        [JsonPropertyName("variableAmount")]
        public VariableAmountResponse VariableAmount { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AgreementResponseV3
    {

        [JsonPropertyName("campaign")]
        public CampaignResponseV3 Campaign { get; set; }

        [JsonPropertyName("pricing")]
        public PricingResponse Pricing { get; set; }

        /// <summary>
        /// Uniquely identifies this agreement
        /// </summary>

        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("interval")]
        public TimePeriodResponse Interval { get; set; } = new TimePeriodResponse();

        /// <summary>
        /// Product name (short)
        /// </summary>

        [JsonPropertyName("productName")]
        public string ProductName { get; set; }

        /// <summary>
        /// Product description (longer)
        /// </summary>

        [JsonPropertyName("productDescription")]
        public string ProductDescription { get; set; }

        /// <summary>
        /// Date when agreement was created, in ISO 8601 format.
        /// <br/>This is when the agreement was initiated with the API.
        /// </summary>

        [JsonPropertyName("created")]
        public System.DateTimeOffset Created { get; set; }

        /// <summary>
        /// Date and time when agreement was started, in ISO 8601 format.
        /// <br/>This is when the agreement was activated.
        /// </summary>

        [JsonPropertyName("start")]
        public System.DateTimeOffset? Start { get; set; }

        /// <summary>
        /// Date and time when agreement was stopped, in ISO 8601 format.
        /// </summary>

        [JsonPropertyName("stop")]
        public System.DateTimeOffset? Stop { get; set; }

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public AgreementStatus Status { get; set; }

        /// <summary>
        /// URL where we can send the customer to view/manage their
        /// <br/>subscription. Typically a "My page" where the user can change, pause, cancel, etc.
        /// <br/>The page must offer actual management, not just information about how to
        /// <br/>contact customer service, etc.
        /// <br/>We recommend letting users log in with Vipps MobilePay, not with username and password:
        /// <br/>https://developer.vippsmobilepay.com/docs/APIs/login-api
        /// <br/>We do not have any specific requirements for the security of the
        /// <br/>page other than requiring HTTPS.
        /// </summary>

        [JsonPropertyName("merchantAgreementUrl")]
        public string MerchantAgreementUrl { get; set; }

        /// <summary>
        /// URL where customer should be redirected after the agreement has been
        /// <br/>approved/rejected in the Vipps or MobilePay app. 
        /// <br/>HTTPS and deeplinks are allowed (example: myApp://home)
        /// </summary>

        [JsonPropertyName("merchantRedirectUrl")]
        public string MerchantRedirectUrl { get; set; }

        /// <summary>
        /// User identifier (subject). Will be null if profile data was not requested.
        /// </summary>

        [JsonPropertyName("sub")]
        public string Sub { get; set; }

        /// <summary>
        /// The full path of the URL for the userinfo endpoint where the user data can be retrieved.:
        /// <br/>[`GET:/vipps-userinfo-api/userinfo/{sub}`](/api/userinfo#operation/getUserinfo).
        /// <br/>This will be null if profile data was not requested.
        /// </summary>

        [JsonPropertyName("userinfoUrl")]
        public string UserinfoUrl { get; set; }

        /// <summary>
        /// An optional external ID for the agreement.
        /// <br/>The `externalId` can be used by the merchant to map the `agreementId`
        /// <br/>to an ID in a subscription system or similar.
        /// </summary>

        [JsonPropertyName("externalId")]
        public string ExternalId { get; set; }

        /// <summary>
        /// An optional country code for the agreement according to ISO 3166-2 (two capital letters)
        /// </summary>

        [JsonPropertyName("countryCode")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public AgreementResponseV3CountryCode CountryCode { get; set; }

        /// <summary>
        /// UUID (RFC 4122) representation of ID
        /// </summary>

        [JsonPropertyName("uuid")]
        public System.Guid Uuid { get; set; }

        /// <summary>
        /// The `vippsConfirmationUrl` should be used to redirect the
        /// <br/>user to the Vipps MobilePay landing page in a desktop flow (with `https://`),
        /// <br/>or to the Vipps or MobilePay app in a mobile flow (with `vipps://`), where the
        /// <br/>user can then approve the agreement.
        /// </summary>

        [JsonPropertyName("vippsConfirmationUrl")]
        public string VippsConfirmationUrl { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchAgreementV2
    {
        /// <summary>
        /// The suggested max amount that the customer should choose.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("suggestedMaxAmount")]
        public int SuggestedMaxAmount { get; set; }

        [JsonPropertyName("campaign")]
        public CampaignV2 Campaign { get; set; }

        /// <summary>
        /// The price of the agreement.
        /// <br/>
        /// <br/>Price is specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("price")]
        public int Price { get; set; }

        /// <summary>
        /// Product name (short)
        /// </summary>

        [JsonPropertyName("productName")]
        public string ProductName { get; set; }

        /// <summary>
        /// Product description (longer)
        /// </summary>

        [JsonPropertyName("productDescription")]
        public string ProductDescription { get; set; }

        /// <summary>
        /// URL where we can send the customer to view/manage their
        /// <br/>subscription. Typically a "My page" where the user can change, pause, cancel, etc.
        /// <br/>The page must offer actual management, not just information about how to
        /// <br/>contact customer service, etc.
        /// <br/>We recommend letting users log in with Vipps MobilePay, not with username and password:
        /// <br/>https://developer.vippsmobilepay.com/docs/APIs/login-api
        /// <br/>We do not have any specific requirements for the security of the
        /// <br/>page other than requiring HTTPS.
        /// </summary>

        [JsonPropertyName("merchantAgreementUrl")]
        public string MerchantAgreementUrl { get; set; }

        /// <summary>
        /// Status of the agreement.
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PatchAgreementV2Status Status { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchAgreementV3
    {
        /// <summary>
        /// Name of the product being subscribed to.
        /// </summary>

        [JsonPropertyName("productName")]
        public string ProductName { get; set; }

        /// <summary>
        /// Product description (longer)
        /// </summary>

        [JsonPropertyName("productDescription")]
        public string ProductDescription { get; set; }

        /// <summary>
        /// URL where we can send the customer to view/manage their
        /// <br/>subscription. Typically a "My page" where the user can change, pause, cancel, etc.
        /// <br/>The page must offer actual management, not just information about how to
        /// <br/>contact customer service, etc.
        /// <br/>We recommend letting users log in with Vipps MobilePay, not with username and password:
        /// <br/>https://developer.vippsmobilepay.com/docs/APIs/login-api
        /// <br/>We do not have any specific requirements for the security of the
        /// <br/>page other than requiring HTTPS.
        /// </summary>

        [JsonPropertyName("merchantAgreementUrl")]
        public string MerchantAgreementUrl { get; set; }

        /// <summary>
        /// An optional external ID for the agreement.
        /// <br/>The `externalId` can be used by the merchant to map the `agreementId`
        /// <br/>to an ID in a subscription system or similar.
        /// </summary>

        [JsonPropertyName("externalId")]
        public string ExternalId { get; set; }

        /// <summary>
        /// Status of the agreement.
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PatchAgreementV3Status Status { get; set; }

        [JsonPropertyName("pricing")]
        public PricingUpdateRequest Pricing { get; set; }

        /// <summary>
        /// The interval of the agreement.
        /// <br/>
        /// <br/>The interval is specified by the `type` and `period` properties.
        /// <br/>When the type is `RECURRING`, then the property `period` is required.
        /// </summary>

        [JsonPropertyName("interval")]
        public Interval2 Interval { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AgreementReference
    {
        /// <summary>
        /// Id of a an agreement which user may agree to.
        /// <br/>Initially the agreement is in a pending state waiting for user approval.
        /// <br/>It enters active state once the user has approved it in the Vipps or MobilePay app.
        /// </summary>

        [JsonPropertyName("agreementId")]
        public string AgreementId { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VariableAmount
    {
        /// <summary>
        /// The suggested max amount that the customer should choose.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("suggestedMaxAmount")]
        public int SuggestedMaxAmount { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VariableAmountResponse
    {
        /// <summary>
        /// The suggested max amount that the customer should choose.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("suggestedMaxAmount")]
        public int SuggestedMaxAmount { get; set; }

        /// <summary>
        /// The max amount chosen by the customer.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("maxAmount")]
        public int MaxAmount { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CampaignV2
    {
        /// <summary>
        /// The price of the agreement in the discount period.
        /// <br/>The lowering of the price will be displayed in-app.
        /// <br/>Price is specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("campaignPrice")]
        public int CampaignPrice { get; set; }

        /// <summary>
        /// The date and time the campaign ends.
        /// <br/>This is a required field for `EVENT_CAMPAIGN`, and is illegal for other types.
        /// <br/>But: If you add this type of info, you also need to add that interval
        /// <br/>and end is used by `FULL_FLEX_CAMPAIGN` and that period is used by `PERIOD_CAMPAIGN`, etc.
        /// <br/>Must be UTC.
        /// </summary>

        [JsonPropertyName("end")]
        public System.DateTimeOffset End { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CampaignResponseV2
    {
        /// <summary>
        /// The price of the agreement in the discount period. The lowering of the price will be displayed in-app.
        /// <br/>Price is specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("campaignPrice")]
        public int CampaignPrice { get; set; }

        /// <summary>
        /// The date and time the campaign starts. Must be UTC.
        /// </summary>

        [JsonPropertyName("start")]
        public System.DateTimeOffset Start { get; set; }

        /// <summary>
        /// The date and time the campaign ends.
        /// <br/>This is a required field when using `EVENT_CAMPAIGN`.
        /// <br/>Must be UTC.
        /// </summary>

        [JsonPropertyName("end")]
        public System.DateTimeOffset End { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [JsonInheritanceConverter(typeof(CampaignV3), "type")]
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CampaignV3
    {

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PriceCampaignV3
    {
        /// <summary>
        /// The type of campaign. This decides which properties are required
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PriceCampaignV3Type Type { get; set; }

        /// <summary>
        /// The price of the agreement in the discount period. The lowering of the price will be displayed in-app.
        /// <br/>
        /// <br/>Price is specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("price")]
        public int Price { get; set; }

        /// <summary>
        /// The date and time the campaign ends.
        /// <br/>Needs to be UTC.
        /// </summary>

        [JsonPropertyName("end")]
        public string End { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PeriodCampaignV3
    {
        /// <summary>
        /// The type of campaign. This decides which properties are required
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PeriodCampaignV3Type Type { get; set; }

        /// <summary>
        /// The price of the agreement in the discount period. The lowering of the price will be displayed in-app.
        /// <br/>
        /// <br/>Price is specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("price")]
        public int Price { get; set; }

        [JsonPropertyName("period")]
        public TimePeriod Period { get; set; } = new TimePeriod();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EventCampaignV3
    {
        /// <summary>
        /// The type of campaign. This decides which properties are required
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public EventCampaignV3Type Type { get; set; }

        /// <summary>
        /// The price of the agreement in the discount period. The lowering of the price will be displayed in-app.
        /// <br/>
        /// <br/>Price is specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("price")]
        public int Price { get; set; }

        /// <summary>
        /// The date and time the campaign ends. Must be UTC.
        /// </summary>

        [JsonPropertyName("eventDate")]
        public System.DateTimeOffset EventDate { get; set; }

        /// <summary>
        /// A short text that describes the event
        /// </summary>

        [JsonPropertyName("eventText")]
        public string EventText { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FullFlexCampaignV3
    {
        /// <summary>
        /// The type of campaign. This decides which properties are required
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public FullFlexCampaignV3Type Type { get; set; }

        /// <summary>
        /// The price of the agreement in the discount period. The lowering of the price will be displayed in-app.
        /// <br/>
        /// <br/>Price is specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("price")]
        public int Price { get; set; }

        [JsonPropertyName("interval")]
        public TimePeriod Interval { get; set; } = new TimePeriod();

        /// <summary>
        /// The date and time the campaign ends.
        /// <br/>Needs to be UTC.
        /// </summary>

        [JsonPropertyName("end")]
        public string End { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CampaignResponseV3
    {

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PeriodCampaignResponseV3
    {
        /// <summary>
        /// The type of campaign. This decides which properties are required
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PeriodCampaignResponseV3Type Type { get; set; }

        /// <summary>
        /// The price of the agreement in the discount period. The lowering of the price will be displayed in-app.
        /// <br/>
        /// <br/>Price is specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("price")]
        public int Price { get; set; }

        /// <summary>
        /// The date and time the campaign ends.
        /// <br/>Needs to be UTC.
        /// </summary>

        [JsonPropertyName("end")]
        public string End { get; set; }

        [JsonPropertyName("period")]
        public TimePeriod Period { get; set; } = new TimePeriod();

        /// <summary>
        /// The text displayed in the Vipps or MobilePay app to explain the campaign to the user
        /// </summary>

        [JsonPropertyName("explanation")]
        public string Explanation { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EventCampaignResponseV3
    {
        /// <summary>
        /// The type of campaign. This decides which properties are required
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public EventCampaignResponseV3Type Type { get; set; }

        /// <summary>
        /// The price of the agreement in the discount period. The lowering of the price will be displayed in-app.
        /// <br/>
        /// <br/>Price is specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("price")]
        public int Price { get; set; }

        /// <summary>
        /// The date and time the campaign ends. Must be UTC.
        /// </summary>

        [JsonPropertyName("eventDate")]
        public System.DateTimeOffset EventDate { get; set; }

        /// <summary>
        /// A short text that describes the event
        /// </summary>

        [JsonPropertyName("eventText")]
        public string EventText { get; set; }

        /// <summary>
        /// The text displayed in the Vipps or MobilePay app to explain the campaign to the user
        /// </summary>

        [JsonPropertyName("explanation")]
        public string Explanation { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FullFlexCampaignResponseV3
    {
        /// <summary>
        /// The type of campaign. This decides which properties are required
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public FullFlexCampaignResponseV3Type Type { get; set; }

        /// <summary>
        /// The price of the agreement in the discount period. The lowering of the price will be displayed in-app.
        /// <br/>
        /// <br/>Price is specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("price")]
        public int Price { get; set; }

        /// <summary>
        /// The date and time the campaign ends.
        /// <br/>Needs to be UTC.
        /// </summary>

        [JsonPropertyName("end")]
        public string End { get; set; }

        [JsonPropertyName("interval")]
        public TimePeriod Interval { get; set; } = new TimePeriod();

        /// <summary>
        /// The text displayed in the Vipps or MobilePay app to explain the campaign to the user
        /// </summary>

        [JsonPropertyName("explanation")]
        public string Explanation { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LegacyCampaignResponseV3
    {
        /// <summary>
        /// The type of campaign. This decides which properties are required
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public LegacyCampaignResponseV3Type Type { get; set; }

        /// <summary>
        /// The price of the agreement in the discount period. The lowering of the price will be displayed in-app.
        /// <br/>
        /// <br/>Price is specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("price")]
        public int Price { get; set; }

        /// <summary>
        /// The date and time the campaign ends.
        /// <br/>Needs to be UTC.
        /// </summary>

        [JsonPropertyName("end")]
        public string End { get; set; }

        /// <summary>
        /// The text displayed in the Vipps or MobilePay app to explain the campaign to the user
        /// </summary>

        [JsonPropertyName("explanation")]
        public string Explanation { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PricingRequest
    {
        /// <summary>
        /// The type of pricing. This decides which properties are required.
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PricingRequestType Type { get; set; } = Vipps.net.Models.Recurring.PricingRequestType.LEGACY;

        [JsonPropertyName("currency")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public CurrencyV3 Currency { get; set; }

        /// <summary>
        /// The price of the agreement, required if type is LEGACY or not present.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("amount")]
        public int Amount { get; set; }

        /// <summary>
        /// The suggested max amount that the customer should choose, required if type is VARIABLE.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("suggestedMaxAmount")]
        public int SuggestedMaxAmount { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PricingResponse
    {

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VariableAmountPricingResponse
    {
        /// <summary>
        /// The type of pricing. This decides which properties are present.
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public VariableAmountPricingResponseType Type { get; set; }

        [JsonPropertyName("currency")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public Currency Currency { get; set; }

        /// <summary>
        /// The suggested max amount that the customer should choose, present if type is VARIABLE.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("suggestedMaxAmount")]
        public int SuggestedMaxAmount { get; set; }

        /// <summary>
        /// The max amount chosen by the customer.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.       
        /// </summary>

        [JsonPropertyName("maxAmount")]
        public int MaxAmount { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PricingUpdateRequest
    {
        /// <summary>
        /// The price of the agreement, can only be updated if agreement type is LEGACY
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("amount")]
        public int Amount { get; set; }

        /// <summary>
        /// The suggested max amount that the customer should choose, can only be updated if agreement type is VARIABLE.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("suggestedMaxAmount")]
        public int SuggestedMaxAmount { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An initial charge for a new agreement.
    /// <br/>The charge will be processed immediately when the user approves the agreement.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InitialChargeV2
    {
        /// <summary>
        /// The amount that must be paid or approved before starting the agreement.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("amount")]
        public int Amount { get; set; }

        [JsonPropertyName("currency")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public Currency Currency { get; set; }

        /// <summary>
        /// This field is visible to the end user in-app
        /// </summary>

        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// The type of payment to be made.
        /// </summary>

        [JsonPropertyName("transactionType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public InitialChargeV2TransactionType TransactionType { get; set; }

        /// <summary>
        /// An optional, but recommended `orderId` for the charge.
        /// <br/>If provided, this will be the `chargeId` for this charge.
        /// <br/>See: https://developer.vippsmobilepay.com/docs/knowledge-base/orderid/
        /// <br/>If no `orderId` is specified, the `chargeId` will be automatically generated.
        /// </summary>

        [JsonPropertyName("orderId")]
        public string OrderId { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An initial charge for a new agreement.
    /// <br/>The charge will be processed immediately when the user approves the agreement.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InitialChargeV3
    {
        /// <summary>
        /// The amount that must be paid or approved before starting the agreement.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("amount")]
        public int Amount { get; set; }

        /// <summary>
        /// This field is visible to the end user in-app
        /// </summary>

        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// The type of payment to be made.
        /// </summary>

        [JsonPropertyName("transactionType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public InitialChargeV3TransactionType TransactionType { get; set; }

        /// <summary>
        /// An optional, but recommended `orderId` for the charge.
        /// <br/>If provided, this will be the `chargeId` for this charge.
        /// <br/>See: https://developer.vippsmobilepay.com/docs/knowledge-base/orderid/
        /// <br/>If no `orderId` is specified, the `chargeId` will be automatically generated.
        /// </summary>

        [JsonPropertyName("orderId")]
        public string OrderId { get; set; }

        /// <summary>
        /// An optional external ID for the charge
        /// <br/>The `externalId` can be used by the merchant to map the `chargeId`
        /// <br/>to an ID in a subscription system or similar.
        /// </summary>

        [JsonPropertyName("externalId")]
        public string ExternalId { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateChargeV2
    {
        /// <summary>
        /// Amount to be paid by the customer.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("amount")]
        public int Amount { get; set; }

        [JsonPropertyName("currency")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public Currency Currency { get; set; }

        /// <summary>
        /// This field is visible to the end user in-app
        /// </summary>

        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// The date when the charge is due to be processed.
        /// <br/>Must be in the format `YYYY-MM-DD` and ISO 8601.
        /// </summary>

        [JsonPropertyName("due")]
        public string Due { get; set; }

        /// <summary>
        /// The service will attempt to charge the customer for the number of days
        /// <br/>specified in `retryDays` after the `due` date.
        /// <br/>We recommend at least two days retry.
        /// </summary>

        [JsonPropertyName("retryDays")]
        public int RetryDays { get; set; }

        /// <summary>
        /// An optional, but recommended `orderId` for the charge.
        /// <br/>If provided, this will be the `chargeId` for this charge.
        /// <br/>See: https://developer.vippsmobilepay.com/docs/knowledge-base/orderid/
        /// <br/>If no `orderId` is specified, the `chargeId` will be automatically generated.
        /// </summary>

        [JsonPropertyName("orderId")]
        public string OrderId { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateChargeV3
    {
        /// <summary>
        /// Amount to be paid by the customer.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("amount")]
        public int Amount { get; set; }

        [JsonPropertyName("transactionType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public TransactionType TransactionType { get; set; }

        /// <summary>
        /// This field is visible to the end user in-app
        /// </summary>

        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// The date when the charge is due to be processed.
        /// <br/>
        /// <br/>Must be at least two days in advance in the production environment,
        /// <br/>and at least one day in the test environment.
        /// <br/>
        /// <br/>If the charge is `DIRECT_CAPTURE`, the charge is processed and charged on the `due` date.
        /// <br/>If the charge is `RESERVE_CAPTURE`, the charge is `RESERVED` on `due` date.
        /// <br/>
        /// <br/>Must be in the format `YYYY-MM-DD` and ISO 8601.
        /// </summary>

        [JsonPropertyName("due")]
        public string Due { get; set; }

        /// <summary>
        /// The service will attempt to charge the customer for the number of days
        /// <br/>specified in `retryDays` after the `due` date.
        /// <br/>We recommend at least two days retry.
        /// </summary>

        [JsonPropertyName("retryDays")]
        public int RetryDays { get; set; }

        /// <summary>
        /// An optional, but recommended `orderId` for the charge.
        /// <br/>If provided, this will be the `chargeId` for this charge.
        /// <br/>This is the unique identifier of the payment, from the payment is initiated and all the way to the settlement data.
        /// <br/>See: https://developer.vippsmobilepay.com/docs/knowledge-base/orderid/
        /// <br/>If no `orderId` is specified, the `chargeId` will be automatically generated.
        /// </summary>

        [JsonPropertyName("orderId")]
        public string OrderId { get; set; }

        /// <summary>
        /// An optional external ID for the charge, that takes the place of the `orderId` in settlement reports without overriding the default `chargeId`
        /// <br/>The `externalId` can be used by the merchant to map the `chargeId` to an ID in a subscription system or similar.
        /// <br/>Note that while `orderId` must be unique per merchant, `externalId` does not have this limitation, 
        /// <br/>so you need to avoid assigning the same `externalId` to multiple charges if you want to keep them separate in settlement reports.
        /// </summary>

        [JsonPropertyName("externalId")]
        public string ExternalId { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChargeReference
    {
        /// <summary>
        /// Unique identifier for this charge, up to 15 characters.
        /// </summary>

        [JsonPropertyName("chargeId")]
        public string ChargeId { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChargeResponseV2
    {
        /// <summary>
        /// Amount to be paid by the customer.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("amount")]
        public int Amount { get; set; }

        /// <summary>
        /// The total amount which has been refunded, in case of status refund/partial refund.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("amountRefunded")]
        public int AmountRefunded { get; set; }

        /// <summary>
        /// Description of the charge.
        /// </summary>

        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// The due date for this charge.
        /// </summary>

        [JsonPropertyName("due")]
        public System.DateTimeOffset Due { get; set; }

        /// <summary>
        /// Identifier for this charge (for this customer's subscription).
        /// </summary>

        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ChargeStatus Status { get; set; }

        /// <summary>
        /// Contains null until the status has reached CHARGED.
        /// </summary>

        [JsonPropertyName("transactionId")]
        public string TransactionId { get; set; }

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ChargeType Type { get; set; }

        /// <summary>
        /// Identifies the reason why the charged has been marked as `FAILED`:
        /// <br/>  * `user_action_required` - The user's card can not fulfil the payment. The user needs to take action in the app.
        /// <br/>     Examples: Card is blocked for ecommerce, insufficient funds, expired card.
        /// <br/>
        /// <br/>  * `charge_amount_too_high` - The user's max amount is too low. The user needs to update their max amount in the Vipps or MobilePay app.
        /// <br/>
        /// <br/>  * `non_technical_error` - Something went wrong with charging the user.
        /// <br/>     Examples: User has deleted their Vipps MobilePay Profile.
        /// <br/>
        /// <br/>  * `technical_error` - Something went wrong in Recurring while performing the payment.
        /// <br/>     Examples: Failure in Recurring, failure in downstream services.
        /// <br/>
        /// </summary>

        [JsonPropertyName("failureReason")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ChargeResponseV2FailureReason FailureReason { get; set; }

        /// <summary>
        /// Description for the failure reason.
        /// </summary>

        [JsonPropertyName("failureDescription")]
        public string FailureDescription { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChargeResponseV3
    {
        /// <summary>
        /// Amount to be paid by the customer.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("amount")]
        public int Amount { get; set; }

        [JsonPropertyName("currency")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public Currency Currency { get; set; }

        /// <summary>
        /// Description of the charge
        /// </summary>

        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// The due date for this charge
        /// </summary>

        [JsonPropertyName("due")]
        public System.DateTimeOffset Due { get; set; }

        /// <summary>
        /// Identifier for this charge (for this customer's subscription).
        /// </summary>

        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Id of the agreement the charge belongs to
        /// </summary>

        [JsonPropertyName("agreementId")]
        public string AgreementId { get; set; }

        /// <summary>
        /// An optional external ID for the charge
        /// <br/>The `externalId` can be used by the merchant to map the `chargeId`
        /// <br/>to an ID in a subscription system or similar.
        /// </summary>

        [JsonPropertyName("externalId")]
        public string ExternalId { get; set; }

        /// <summary>
        /// An optional external ID for the agreement
        /// <br/>The `externalId` can be used by the merchant to map the `agreementId`
        /// <br/>to an ID in a subscription system or similar.
        /// </summary>

        [JsonPropertyName("externalAgreementId")]
        public string ExternalAgreementId { get; set; }

        /// <summary>
        /// The service will attempt to charge the customer for the number of days
        /// <br/>specified in `retryDays` after the `due` date.
        /// <br/>We recommend at least two days retry.
        /// </summary>

        [JsonPropertyName("retryDays")]
        public int RetryDays { get; set; }

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ChargeStatus Status { get; set; }

        /// <summary>
        /// Contains null until the status has reached CHARGED
        /// </summary>

        [JsonPropertyName("transactionId")]
        public string TransactionId { get; set; }

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ChargeType Type { get; set; }

        [JsonPropertyName("transactionType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public TransactionType TransactionType { get; set; }

        /// <summary>
        /// Identifies the reason why the charged has been marked as `FAILED`:
        /// <br/>  * `user_action_required` - The user's card can not fulfil the payment, user needs to take action in the Vipps or MobilePay app.
        /// <br/>     Examples: Card is blocked for ecommerce, insufficient funds, expired card.
        /// <br/>
        /// <br/>  * `charge_amount_too_high` - The user's max amount is too low, user needs to update their max amount in the Vipps or MobilePay app.
        /// <br/>
        /// <br/>  * `non_technical_error` - Something went wrong with charging the user.
        /// <br/>     Examples: User has deleted their Vipps MobilePay Profile.
        /// <br/>
        /// <br/>  * `technical_error` - Something went wrong in Recurring while performing the payment.
        /// <br/>     Examples: Failure in Recurring, failure in downstream services.
        /// <br/>
        /// </summary>

        [JsonPropertyName("failureReason")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ChargeResponseV3FailureReason? FailureReason { get; set; }

        /// <summary>
        /// Description for the failure reason
        /// </summary>

        [JsonPropertyName("failureDescription")]
        public string FailureDescription { get; set; }

        [JsonPropertyName("summary")]
        public ChargeSummary Summary { get; set; } = new ChargeSummary();

        [JsonPropertyName("history")]
        public ChargeHistory History { get; set; } = new ChargeHistory();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefundRequest
    {
        /// <summary>
        /// The amount to refund on a captured/charged charge.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("amount")]
        public int Amount { get; set; }

        /// <summary>
        /// A textual description of the operation, which will be displayed in the user's app.
        /// </summary>

        [JsonPropertyName("description")]
        public string Description { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaptureRequestV3
    {
        /// <summary>
        /// The amount to capture on a reserved charge.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("amount")]
        public int Amount { get; set; }

        /// <summary>
        /// A textual description of the operation, which will be displayed in the user's app.
        /// </summary>

        [JsonPropertyName("description")]
        public string Description { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A period of time, defined by a unit (DAY, WEEK, ...) and a count (number of said units)
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimePeriod
    {
        /// <summary>
        /// Unit for time period
        /// </summary>

        [JsonPropertyName("unit")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public TimePeriodUnit Unit { get; set; }

        /// <summary>
        /// Number of units in the time period. Example: unit=week, count=2 to define two weeks
        /// </summary>

        [JsonPropertyName("count")]
        public int Count { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A period of time, defined by a unit (DAY, WEEK, ...) and a count (number of said units)
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimePeriodResponse
    {
        /// <summary>
        /// Unit for time period
        /// </summary>

        [JsonPropertyName("unit")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public TimePeriodResponseUnit Unit { get; set; }

        /// <summary>
        /// Number of units in the time period. Example: unit=week, count=2 to define two weeks
        /// </summary>

        [JsonPropertyName("count")]
        public int Count { get; set; }

        /// <summary>
        /// Textual representation used in Vipps MobilePay to describe the time period
        /// </summary>

        [JsonPropertyName("text")]
        public string Text { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ForceAcceptAgreement
    {

        [JsonPropertyName("customerPhoneNumber")]
        public string CustomerPhoneNumber { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ForceAcceptAgreementV3
    {

        [JsonPropertyName("phoneNumber")]
        public string PhoneNumber { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An error from Microsoft Azure. We have limited control of these errors,
    /// <br/>and can not give as detailed information as with the errors from our own code.
    /// <br/>The most important property is the HTTP status code.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorFromAzure
    {

        [JsonPropertyName("responseInfo")]
        public ResponseInfo ResponseInfo { get; set; } = new ResponseInfo();

        [JsonPropertyName("result")]
        public Result Result { get; set; } = new Result();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An error from Vipps MobilePay.
    /// <br/>The most important property is the HTTP status code.
    /// <br/>The response body contains more details of the error.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorV2
    {
        /// <summary>
        /// Field that caused the error
        /// </summary>

        [JsonPropertyName("field")]
        public string Field { get; set; }

        /// <summary>
        /// The error message
        /// </summary>

        [JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// The code for the specific error
        /// </summary>

        [JsonPropertyName("code")]
        public string Code { get; set; }

        /// <summary>
        /// A unique ID for this error, useful for searching in logs
        /// </summary>

        [JsonPropertyName("contextId")]
        public string ContextId { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorArray : Collection<ErrorV2>
    {

    }

    /// <summary>
    /// Error response using the Problem JSON format
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorV3
    {
        /// <summary>
        /// Path to type of error
        /// </summary>

        [JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Short description of the error
        /// </summary>

        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// HTTP status returned with the problem
        /// </summary>

        [JsonPropertyName("status")]
        public int Status { get; set; }

        /// <summary>
        /// Details about the error
        /// </summary>

        [JsonPropertyName("detail")]
        public string Detail { get; set; }

        /// <summary>
        /// The path of the request
        /// </summary>

        [JsonPropertyName("instance")]
        public string Instance { get; set; }

        /// <summary>
        /// An unique ID for the request
        /// </summary>

        [JsonPropertyName("contextId")]
        public string ContextId { get; set; }

        [JsonPropertyName("extraDetails")]
        public ExtraDetails ExtraDetails { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// extra details about the error
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExtraDetails
    {
        /// <summary>
        /// Name of the field related to the error
        /// </summary>

        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Details about the error
        /// </summary>

        [JsonPropertyName("reason")]
        public string Reason { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChargeEventEvent
    {

        [EnumMember(Value = @"CREATE")]
        CREATE = 0,

        [EnumMember(Value = @"RESERVE")]
        RESERVE = 1,

        [EnumMember(Value = @"CAPTURE")]
        CAPTURE = 2,

        [EnumMember(Value = @"REFUND")]
        REFUND = 3,

        [EnumMember(Value = @"CANCEL")]
        CANCEL = 4,

        [EnumMember(Value = @"FAIL")]
        FAIL = 5,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DraftAgreementV3CountryCode
    {

        [EnumMember(Value = @"NO")]
        NO = 0,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AgreementResponseV3CountryCode
    {

        [EnumMember(Value = @"NO")]
        NO = 0,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PatchAgreementV2Status
    {

        [EnumMember(Value = @"STOPPED")]
        STOPPED = 0,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PatchAgreementV3Status
    {

        [EnumMember(Value = @"STOPPED")]
        STOPPED = 0,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Interval2
    {

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public Interval2Type Type { get; set; } = Vipps.net.Models.Recurring.Interval2Type.RECURRING;

        [JsonPropertyName("period")]
        public TimePeriod Period { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PriceCampaignV3Type
    {

        [EnumMember(Value = @"PRICE_CAMPAIGN")]
        PRICE_CAMPAIGN = 0,

        [EnumMember(Value = @"PERIOD_CAMPAIGN")]
        PERIOD_CAMPAIGN = 1,

        [EnumMember(Value = @"EVENT_CAMPAIGN")]
        EVENT_CAMPAIGN = 2,

        [EnumMember(Value = @"FULL_FLEX_CAMPAIGN")]
        FULL_FLEX_CAMPAIGN = 3,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PeriodCampaignV3Type
    {

        [EnumMember(Value = @"PRICE_CAMPAIGN")]
        PRICE_CAMPAIGN = 0,

        [EnumMember(Value = @"PERIOD_CAMPAIGN")]
        PERIOD_CAMPAIGN = 1,

        [EnumMember(Value = @"EVENT_CAMPAIGN")]
        EVENT_CAMPAIGN = 2,

        [EnumMember(Value = @"FULL_FLEX_CAMPAIGN")]
        FULL_FLEX_CAMPAIGN = 3,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EventCampaignV3Type
    {

        [EnumMember(Value = @"PRICE_CAMPAIGN")]
        PRICE_CAMPAIGN = 0,

        [EnumMember(Value = @"PERIOD_CAMPAIGN")]
        PERIOD_CAMPAIGN = 1,

        [EnumMember(Value = @"EVENT_CAMPAIGN")]
        EVENT_CAMPAIGN = 2,

        [EnumMember(Value = @"FULL_FLEX_CAMPAIGN")]
        FULL_FLEX_CAMPAIGN = 3,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FullFlexCampaignV3Type
    {

        [EnumMember(Value = @"PRICE_CAMPAIGN")]
        PRICE_CAMPAIGN = 0,

        [EnumMember(Value = @"PERIOD_CAMPAIGN")]
        PERIOD_CAMPAIGN = 1,

        [EnumMember(Value = @"EVENT_CAMPAIGN")]
        EVENT_CAMPAIGN = 2,

        [EnumMember(Value = @"FULL_FLEX_CAMPAIGN")]
        FULL_FLEX_CAMPAIGN = 3,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CampaignResponseV3Type
    {

        [EnumMember(Value = @"PRICE_CAMPAIGN")]
        PRICE_CAMPAIGN = 0,

        [EnumMember(Value = @"PERIOD_CAMPAIGN")]
        PERIOD_CAMPAIGN = 1,

        [EnumMember(Value = @"EVENT_CAMPAIGN")]
        EVENT_CAMPAIGN = 2,

        [EnumMember(Value = @"FULL_FLEX_CAMPAIGN")]
        FULL_FLEX_CAMPAIGN = 3,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PeriodCampaignResponseV3Type
    {

        [EnumMember(Value = @"PRICE_CAMPAIGN")]
        PRICE_CAMPAIGN = 0,

        [EnumMember(Value = @"PERIOD_CAMPAIGN")]
        PERIOD_CAMPAIGN = 1,

        [EnumMember(Value = @"EVENT_CAMPAIGN")]
        EVENT_CAMPAIGN = 2,

        [EnumMember(Value = @"FULL_FLEX_CAMPAIGN")]
        FULL_FLEX_CAMPAIGN = 3,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EventCampaignResponseV3Type
    {

        [EnumMember(Value = @"PRICE_CAMPAIGN")]
        PRICE_CAMPAIGN = 0,

        [EnumMember(Value = @"PERIOD_CAMPAIGN")]
        PERIOD_CAMPAIGN = 1,

        [EnumMember(Value = @"EVENT_CAMPAIGN")]
        EVENT_CAMPAIGN = 2,

        [EnumMember(Value = @"FULL_FLEX_CAMPAIGN")]
        FULL_FLEX_CAMPAIGN = 3,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FullFlexCampaignResponseV3Type
    {

        [EnumMember(Value = @"PRICE_CAMPAIGN")]
        PRICE_CAMPAIGN = 0,

        [EnumMember(Value = @"PERIOD_CAMPAIGN")]
        PERIOD_CAMPAIGN = 1,

        [EnumMember(Value = @"EVENT_CAMPAIGN")]
        EVENT_CAMPAIGN = 2,

        [EnumMember(Value = @"FULL_FLEX_CAMPAIGN")]
        FULL_FLEX_CAMPAIGN = 3,

        [EnumMember(Value = @"LEGACY_CAMPAIGN")]
        LEGACY_CAMPAIGN = 4,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LegacyCampaignResponseV3Type
    {

        [EnumMember(Value = @"PRICE_CAMPAIGN")]
        PRICE_CAMPAIGN = 0,

        [EnumMember(Value = @"PERIOD_CAMPAIGN")]
        PERIOD_CAMPAIGN = 1,

        [EnumMember(Value = @"EVENT_CAMPAIGN")]
        EVENT_CAMPAIGN = 2,

        [EnumMember(Value = @"FULL_FLEX_CAMPAIGN")]
        FULL_FLEX_CAMPAIGN = 3,

        [EnumMember(Value = @"LEGACY_CAMPAIGN")]
        LEGACY_CAMPAIGN = 4,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PricingRequestType
    {

        [EnumMember(Value = @"LEGACY")]
        LEGACY = 0,

        [EnumMember(Value = @"VARIABLE")]
        VARIABLE = 1,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PricingResponseType
    {

        [EnumMember(Value = @"LEGACY")]
        LEGACY = 0,

        [EnumMember(Value = @"VARIABLE")]
        VARIABLE = 1,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VariableAmountPricingResponseType
    {

        [EnumMember(Value = @"LEGACY")]
        LEGACY = 0,

        [EnumMember(Value = @"VARIABLE")]
        VARIABLE = 1,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InitialChargeV2TransactionType
    {

        [EnumMember(Value = @"RESERVE_CAPTURE")]
        RESERVE_CAPTURE = 0,

        [EnumMember(Value = @"DIRECT_CAPTURE")]
        DIRECT_CAPTURE = 1,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InitialChargeV3TransactionType
    {

        [EnumMember(Value = @"RESERVE_CAPTURE")]
        RESERVE_CAPTURE = 0,

        [EnumMember(Value = @"DIRECT_CAPTURE")]
        DIRECT_CAPTURE = 1,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChargeResponseV2FailureReason
    {

        [EnumMember(Value = @"user_action_required")]
        User_action_required = 0,

        [EnumMember(Value = @"charge_amount_too_high")]
        Charge_amount_too_high = 1,

        [EnumMember(Value = @"non_technical_error")]
        Non_technical_error = 2,

        [EnumMember(Value = @"technical_error")]
        Technical_error = 3,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChargeResponseV3FailureReason
    {

        [EnumMember(Value = @"user_action_required")]
        User_action_required = 0,

        [EnumMember(Value = @"charge_amount_too_high")]
        Charge_amount_too_high = 1,

        [EnumMember(Value = @"non_technical_error")]
        Non_technical_error = 2,

        [EnumMember(Value = @"technical_error")]
        Technical_error = 3,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TimePeriodUnit
    {

        [EnumMember(Value = @"YEAR")]
        YEAR = 0,

        [EnumMember(Value = @"MONTH")]
        MONTH = 1,

        [EnumMember(Value = @"WEEK")]
        WEEK = 2,

        [EnumMember(Value = @"DAY")]
        DAY = 3,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TimePeriodResponseUnit
    {

        [EnumMember(Value = @"YEAR")]
        YEAR = 0,

        [EnumMember(Value = @"MONTH")]
        MONTH = 1,

        [EnumMember(Value = @"WEEK")]
        WEEK = 2,

        [EnumMember(Value = @"DAY")]
        DAY = 3,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResponseInfo
    {

        [JsonPropertyName("responseCode")]
        public int ResponseCode { get; set; }

        [JsonPropertyName("responseMessage")]
        public string ResponseMessage { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Result
    {
        /// <summary>
        /// When possible: A description of what went wrong.
        /// </summary>

        [JsonPropertyName("message")]
        public string Message { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Interval2Type
    {

        [EnumMember(Value = @"RECURRING")]
        RECURRING = 0,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }

        public string Key { get; }

        public System.Type Type { get; }
    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class JsonInheritanceConverterAttribute : JsonConverterAttribute
    {
        public string DiscriminatorName { get; }

        public JsonInheritanceConverterAttribute(System.Type baseType, string discriminatorName = "discriminator")
            : base(typeof(JsonInheritanceConverter<>).MakeGenericType(baseType))
        {
            DiscriminatorName = discriminatorName;
        }
    }

    public class JsonInheritanceConverter<TBase> : JsonConverter<TBase>
    {
        private readonly string _discriminatorName;

        public JsonInheritanceConverter()
        {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<JsonInheritanceConverterAttribute>(typeof(TBase));
            _discriminatorName = attribute?.DiscriminatorName ?? "discriminator";
        }

        public JsonInheritanceConverter(string discriminatorName)
        {
            _discriminatorName = discriminatorName;
        }

        public string DiscriminatorName { get { return _discriminatorName; } }

        public override TBase Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
        {
            var document = System.Text.Json.JsonDocument.ParseValue(ref reader);
            var hasDiscriminator = document.RootElement.TryGetProperty(_discriminatorName, out var discriminator);
            var subtype = GetDiscriminatorType(document.RootElement, typeToConvert, hasDiscriminator ? discriminator.GetString() : null);

            var bufferWriter = new System.IO.MemoryStream();
            using (var writer = new System.Text.Json.Utf8JsonWriter(bufferWriter))
            {
                document.RootElement.WriteTo(writer);
            }

            return (TBase)System.Text.Json.JsonSerializer.Deserialize(bufferWriter.ToArray(), subtype, options);
        }

        public override void Write(System.Text.Json.Utf8JsonWriter writer, TBase value, System.Text.Json.JsonSerializerOptions options)
        {
            writer.WriteStartObject();
            writer.WriteString(_discriminatorName, GetDiscriminatorValue(value.GetType()));

            var bytes = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes((object)value, options);
            var document = System.Text.Json.JsonDocument.Parse(bytes);
            foreach (var property in document.RootElement.EnumerateObject())
            {
                property.WriteTo(writer);
            }

            writer.WriteEndObject();
        }

        public string GetDiscriminatorValue(System.Type type)
        {
            var jsonInheritanceAttributeDiscriminator = GetSubtypeDiscriminator(type);
            if (jsonInheritanceAttributeDiscriminator != null)
            {
                return jsonInheritanceAttributeDiscriminator;
            }

            return type.Name;
        }

        protected System.Type GetDiscriminatorType(System.Text.Json.JsonElement jObject, System.Type objectType, string discriminatorValue)
        {
            var jsonInheritanceAttributeSubtype = GetObjectSubtype(objectType, discriminatorValue);
            if (jsonInheritanceAttributeSubtype != null)
            {
                return jsonInheritanceAttributeSubtype;
            }

            if (objectType.Name == discriminatorValue)
            {
                return objectType;
            }

            var typeName = objectType.Namespace + "." + discriminatorValue;
            var subtype = System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType).Assembly.GetType(typeName);
            if (subtype != null)
            {
                return subtype;
            }

            throw new System.InvalidOperationException("Could not find subtype of '" + objectType.Name + "' with discriminator '" + discriminatorValue + "'.");
        }

        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }

            return objectType;
        }

        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }

            return objectType.Name;
        }
    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625
