//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace Vipps.net.Models.Recurring
{
    using System;
	using System.Collections.Generic;
	using System.CodeDom.Compiler;
	using System.Text.Json.Serialization;
	using System.Text.Json;
	using System.Runtime.Serialization;
	using System.Collections.ObjectModel;
	using System.Threading.Tasks;
	using System.Threading;
	using System.ComponentModel.DataAnnotations;

    [GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IVippsRecurring
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Agreements
        /// </summary>
        /// <remarks>
        /// The API endpoint allows merchant to fetch all agreements.
        /// <br/>If no query status is supplied, it will default to only retrieving active agreements.
        /// <br/>There is no way to list all agreements with all statuses; this is due to performance.
        /// <br/>**Please note:** Use the query parameters `status` and `createdAfter` specify the
        /// <br/>agreements you want to retrieve, in order to speed up the query. Try to avoid
        /// <br/>requests without query parameters. Set `createdAfter` to the most recent value as possible.
        /// <br/>For instance, if you fetch ACTIVE agreements every 24 hours, use `createdAfter=now-25h` or similar.
        /// <br/>Not that, in the future, it may be possible to encounter errors when the number of agreements in the response is too high
        /// <br/>(e.g., `413 Content Too Large` or similar).
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="status">Filter by the `status` of the agreement.</param>
        /// <param name="createdAfter">Filter by createdAfter timestamp (in milliseconds) for paginating.</param>
        /// <returns>OK'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        Task<ICollection<AgreementResponseV2>> ListAgreementsAsync(string authorization, string ocp_Apim_Subscription_Key, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, AgreementStatus? status = null, long? createdAfter = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new Agreement, to be confirmed in the app
        /// </summary>
        /// <remarks>
        /// The API endpoint allows merchants to create agreements for a user to accept. Once the agreement is drafted,you will receive a `vippsConfirmationUrl`.
        /// <br/>This is used to redirect the user to the landing page, or automatically app-switched to the app if `"isApp":true` is used.
        /// <br/>
        /// <br/>If the user accepts or rejects the agreement, the user will be redirected back to the URL specified in `merchantRedirectUrl`.
        /// <br/>You **have** to implement polling on the agreement to check when the status changes to active instead of relying on the redirect back to the `merchantRedirectUrl`.
        /// <br/>We have no control over if a user is actually redirected back or not, this depends on what browser the user came from.
        /// <br/>
        /// <br/>Please note the different use cases for `initialCharge` and `campaign`. And when to use `RESERVE_CAPTURE` instead of `DIRECT_CAPTURE` as `transactionType`.
        /// <br/>More information about this can be found in the API documentation.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        Task<DraftAgreementResponseV2> DraftAgreementAsync(string authorization, string ocp_Apim_Subscription_Key, DraftAgreementV2 body, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch an Agreement
        /// </summary>
        /// <remarks>
        /// Fetch a single agreement for a user.
        /// <br/>Recommended to use when polling for status changes after sending an agreement to a user.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        Task<AgreementResponseV2> FetchAgreementAsync(string authorization, string ocp_Apim_Subscription_Key, string agreementId, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an Agreement
        /// </summary>
        /// <remarks>
        /// Updates the agreement.
        /// <br/>Note that when updating the status to `STOPPED`,
        /// <br/>you can not re-activate it. If you want to pause an agreement,
        /// <br/>we suggest leaving the agreement active and skipping the creation of charges as long as the agreement is paused in your systems.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="body">agreement</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        Task<AgreementReference> UpdateAgreementPutAsync(string authorization, string ocp_Apim_Subscription_Key, string agreementId, PatchAgreementV2 body, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an Agreement
        /// </summary>
        /// <remarks>
        /// Updates the agreement.
        /// <br/>Note that when updating the status to `STOPPED`,
        /// <br/>you can not re-activate it. If you want to pause an agreement,
        /// <br/>we suggest leaving the agreement active and skipping the creation of charges as long as the agreement is paused in your systems.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="body">agreement</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        Task<AgreementReference> UpdateAgreementPatchAsync(string authorization, string ocp_Apim_Subscription_Key, string agreementId, PatchAgreementV2 body, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Force accept an Agreement (Only available in test environment)
        /// </summary>
        /// <remarks>
        /// Forces an agreement to be accepted by the given customer phone number.
        /// <br/>This endpoint can only be used in the test environment.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        Task<object> AcceptUsingPATCHAsync(string authorization, string ocp_Apim_Subscription_Key, string agreementId, ForceAcceptAgreement body, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Agreements
        /// </summary>
        /// <remarks>
        /// The API endpoint allows merchant to fetch all agreements.
        /// <br/>If no query status is supplied it will default to only retrieving active agreements.
        /// <br/>There is no way to list all Agreements with all statuses, this is due to performance.
        /// <br/>Use the `createdAfter` query to paginate the response.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="continuation_Token">When returned from an endpoint, this indicates that there is more data than can be returned in one response.
        /// <br/>Repeating the request with the received token in the Continuation-Token header will return the next page of data.
        /// <br/>When not returned, the end of the data has been reached.
        /// <br/>
        /// <br/>Continuation-Tokens are short-lived, so they cannot be used several minutes/hours after received.</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="status">Filter by the `status` of the agreement.</param>
        /// <param name="createdAfter">Filter by createdAfter timestamp (in milliseconds) for paginating.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ICollection<AgreementResponseV3>> ListAgreementsV3Async(string authorization, string ocp_Apim_Subscription_Key, string content_Type = null, System.Guid? continuation_Token = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, AgreementStatus? status = null, long? createdAfter = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new Agreement, to be confirmed in the Vipps or MobilePay app
        /// </summary>
        /// <remarks>
        /// The API endpoint allows merchants to create agreements for a user to accept. Once the agreement is drafted, you will receive a `vippsConfirmationUrl`.
        /// <br/>This is used to redirect the user to the Vipps MobilePay landing page, or to the Vipps or MobilePay app when `"isApp":true` is used.
        /// <br/>
        /// <br/>If the user accepts or rejects the agreement, the user will be redirected back to whichever URL has been passed in `merchantRedirectUrl`.
        /// <br/>You **must** implement polling on the agreement to check when the status changes to active, instead of relying on the redirect back to the `merchantRedirectUrl`.
        /// <br/>We have no control over if a user is actually redirected back or not, this depends on what browser the user came from.
        /// <br/>
        /// <br/>Please note the different use cases for `initialCharge` and `campaign`. And when to use `RESERVE_CAPTURE` instead of `DIRECT_CAPTURE` as transactionType.
        /// <br/>More information about this can be found in the API documentation.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="idempotency_Key">An Idempotency key must be provided to ensure idempotent requests.
        /// <br/>Key size can be between 1 to 40 characters.
        /// <br/>Key must not contain '#', '?', '/' or '\\'</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<DraftAgreementResponseV3> DraftAgreementV3Async(string authorization, string ocp_Apim_Subscription_Key, string idempotency_Key, DraftAgreementV3 body, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch an Agreement
        /// </summary>
        /// <remarks>
        /// Fetch a single agreement for a user.
        /// <br/>Recommended to use when polling for status changes after sending an agreement to a user.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<AgreementResponseV3> FetchAgreementV3Async(string authorization, string ocp_Apim_Subscription_Key, string agreementId, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an Agreement
        /// </summary>
        /// <remarks>
        /// Updates the agreement.
        /// <br/>Note that when updating the status to `STOPPED`,
        /// <br/>you can not re-activate it. If you want to pause an agreement,
        /// <br/>we suggest leaving the agreement active and skipping the creation of charges as long as the agreement is paused in your systems.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="idempotency_Key">An Idempotency key must be provided to ensure idempotent requests.
        /// <br/>Key size can be between 1 to 40 characters.
        /// <br/>Key must not contain '#', '?', '/' or '\\'</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="body">agreement</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Accepted. Request accepted, the action will likely succeed but has not yet been enacted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task UpdateAgreementPatchV3Async(string authorization, string ocp_Apim_Subscription_Key, string idempotency_Key, string agreementId, PatchAgreementV3 body, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Force accept an Agreement (Only available in test environment)
        /// </summary>
        /// <remarks>
        /// Forces an agreement to be accepted by the given customer phone number.
        /// <br/>This endpoint can only be used in the test environment.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="idempotency_Key">An Idempotency key must be provided to ensure idempotent requests.
        /// <br/>Key size can be between 1 to 40 characters.
        /// <br/>Key must not contain '#', '?', '/' or '\\'</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<object> AcceptUsingPATCHV3Async(string authorization, string ocp_Apim_Subscription_Key, string idempotency_Key, string agreementId, ForceAcceptAgreementV3 body, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Charges
        /// </summary>
        /// <remarks>
        /// Fetches all charges for a single agreement, including the optional initial charge.
        /// <br/>Supports filtering on `status` using it as a query parameter.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="chargeStatus">Filter by status of the charge.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        Task<ICollection<ChargeResponseV2>> ListChargesAsync(string authorization, string ocp_Apim_Subscription_Key, string agreementId, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, ChargeStatus? chargeStatus = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new charge
        /// </summary>
        /// <remarks>
        /// Creates a new recurring charge *(payment)* that will charge the user on the date specified.
        /// <br/>If the payment fails, the charge will be retried based on `retryDays`.
        /// <br/>We recommend at least two days retry.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="idempotency_Key">An Idempotency key must be provided to ensure idempotent requests.
        /// <br/>Key size can be between 1 to 40 characters.
        /// <br/>Key must not contain '#', '?', '/' or '\\'</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        Task<ChargeReference> CreateChargeAsync(string authorization, string ocp_Apim_Subscription_Key, string idempotency_Key, string agreementId, CreateChargeV2 body, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch a Charge
        /// </summary>
        /// <remarks>
        /// Fetch a single charge for a user.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="chargeId">The charge identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        Task<ChargeResponseV2> FetchChargeAsync(string authorization, string ocp_Apim_Subscription_Key, string agreementId, string chargeId, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel a Charge
        /// </summary>
        /// <remarks>
        /// Cancels a pending, due, or reserved charge.
        /// <br/>When cancelling a charge that is `PARTIALLY_CAPTURED`, the remaining funds on the charge
        /// <br/>will be released back to the customer.
        /// <br/>
        /// <br/>Please note: If you cancel an agreement, all the charges for that agreement are automatically cancelled.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="chargeId">The charge identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        Task<ChargeResponseV2> CancelChargeAsync(string authorization, string ocp_Apim_Subscription_Key, string agreementId, string chargeId, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Capture a reserved charge
        /// </summary>
        /// <remarks>
        /// Captures a reserved charge.
        /// <br/>Only charges with transactionType `RESERVE_CAPTURE` can be captured.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="idempotency_Key">An Idempotency key must be provided to ensure idempotent requests.
        /// <br/>Key size can be between 1 to 40 characters.
        /// <br/>Key must not contain '#', '?', '/' or '\\'</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="chargeId">The charge identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        Task<object> CaptureChargeAsync(string authorization, string ocp_Apim_Subscription_Key, string idempotency_Key, string agreementId, string chargeId, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Refund a charge
        /// </summary>
        /// <remarks>
        /// Refunds a charge, and can also do a partial refund (refunding a smaller part of the payment).
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="idempotency_Key">An Idempotency key must be provided to ensure idempotent requests.
        /// <br/>Key size can be between 1 to 40 characters.
        /// <br/>Key must not contain '#', '?', '/' or '\\'</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="chargeId">The charge identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        Task<object> RefundChargeAsync(string authorization, string ocp_Apim_Subscription_Key, string idempotency_Key, string agreementId, string chargeId, RefundRequest body, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Charges
        /// </summary>
        /// <remarks>
        /// Fetches all charges for a single agreement, including the optional initial charge.
        /// <br/>Supports filtering on status using query parameter.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="continuation_Token">When returned from an endpoint, this indicates that there is more data than can be returned in one response.
        /// <br/>Repeating the request with the received token in the Continuation-Token header will return the next page of data.
        /// <br/>When not returned, the end of the data has been reached.
        /// <br/>
        /// <br/>Continuation-Tokens are short-lived, so they cannot be used several minutes/hours after received.</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="status">Filter by status of the charge.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ICollection<ChargeResponseV3>> ListChargesV3Async(string authorization, string ocp_Apim_Subscription_Key, string agreementId, System.Guid? continuation_Token = null, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, ChargeStatus? status = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new charge
        /// </summary>
        /// <remarks>
        /// Creates a new recurring charge *(payment)* that will charge the user on the date specified.
        /// <br/>If the payment fails, the charge will be retried based on `retryDays`.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="idempotency_Key">An Idempotency key must be provided to ensure idempotent requests.
        /// <br/>Key size can be between 1 to 40 characters.
        /// <br/>Key must not contain '#', '?', '/' or '\\'</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ChargeReference> CreateChargeV3Async(string authorization, string ocp_Apim_Subscription_Key, string idempotency_Key, string agreementId, CreateChargeV3 body, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create multiple charges
        /// </summary>
        /// <remarks>
        /// Asynchronously creates multiple new recurring charges *(payments)* that will be automatically processed on the due date.
        /// <br/>If the payment fails, the charge will be retried based on `retryDays`. Maximum 2000 charges per request.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="idempotency_Key">An Idempotency key must be provided to ensure idempotent requests.
        /// <br/>Key size can be between 1 to 40 characters.
        /// <br/>Key must not contain '#', '?', '/' or '\\'</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>None, some or all charges passed API level validation.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<AsyncChargeResponse> CreateChargeAsyncV3Async(string authorization, string ocp_Apim_Subscription_Key, string idempotency_Key, IEnumerable<CreateChargeAsyncV3> body, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch a charge
        /// </summary>
        /// <remarks>
        /// Fetch a single charge for a user.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="chargeId">The charge identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ChargeResponseV3> FetchChargeV3Async(string authorization, string ocp_Apim_Subscription_Key, string agreementId, string chargeId, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel a charge
        /// </summary>
        /// <remarks>
        /// Cancels a pending, due or reserved charge.
        /// <br/>When cancelling a charge that is `PARTIALLY_CAPTURED`, the remaining funds on the charge
        /// <br/>will be released back to the customer.
        /// <br/>
        /// <br/>Note if you cancel an agreement,
        /// <br/>there is no need to cancel the charges that belongs to the agreement.
        /// <br/>This will be done automatically.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="idempotency_Key">An Idempotency key must be provided to ensure idempotent requests.
        /// <br/>Key size can be between 1 to 40 characters.
        /// <br/>Key must not contain '#', '?', '/' or '\\'</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="chargeId">The charge identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Accepted. Request accepted, the action will likely succeed but has not yet been enacted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task CancelChargeV3Async(string authorization, string ocp_Apim_Subscription_Key, string idempotency_Key, string agreementId, string chargeId, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch a charge by ID
        /// </summary>
        /// <remarks>
        /// A "special case" endpoint to fetch a single charge just by `chargeId`, when the `agreementId` is unknown.
        /// <br/>This is useful for investigating claims from customers, but not intended for automation.
        /// <br/>
        /// <br/>Please note: This is *not* a replacement for the normal endpoint for fetching charges:
        /// <br/>`GET:/recurring/v3/agreements/{agreementId}/charges/{chargeId}`.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="chargeId">The charge identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ChargeResponseV3> FetchChargeByIdV3Async(string authorization, string ocp_Apim_Subscription_Key, string chargeId, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Capture a reserved charge
        /// </summary>
        /// <remarks>
        /// Captures a reserved charge.
        /// <br/>Only charges with transactionType `RESERVE_CAPTURE` can be captured.
        /// <br/>Can also do partial captures (captures a smaller part of the payment).
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="idempotency_Key">An Idempotency key must be provided to ensure idempotent requests.
        /// <br/>Key size can be between 1 to 40 characters.
        /// <br/>Key must not contain '#', '?', '/' or '\\'</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="chargeId">The charge identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Accepted. Request accepted, the action will likely succeed but has not yet been enacted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task CaptureChargeV3Async(string authorization, string ocp_Apim_Subscription_Key, string idempotency_Key, string agreementId, string chargeId, CaptureRequestV3 body, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Refund a charge
        /// </summary>
        /// <remarks>
        /// Refunds a charge, can also do a partial refund (refunding a smaller part of the payment).
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="idempotency_Key">An Idempotency key must be provided to ensure idempotent requests.
        /// <br/>Key size can be between 1 to 40 characters.
        /// <br/>Key must not contain '#', '?', '/' or '\\'</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="chargeId">The charge identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Accepted. Request accepted, the action will likely succeed but has not yet been enacted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task RefundChargeV3Async(string authorization, string ocp_Apim_Subscription_Key, string idempotency_Key, string agreementId, string chargeId, RefundRequest body, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

    }

    [GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VippsRecurring : IVippsRecurring
    {
    #pragma warning disable 8618 // Set by constructor via BaseUrl property
        private string _baseUrl;
    #pragma warning restore 8618 // Set by constructor via BaseUrl property
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<JsonSerializerOptions> _settings = new System.Lazy<JsonSerializerOptions>(CreateSerializerSettings, true);

        public VippsRecurring(System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = "https://api.vipps.no";
            _httpClient = httpClient;
        }

        private static JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        private static void UpdateJsonSerializerSettings(JsonSerializerOptions settings) => throw new NotImplementedException();

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Agreements
        /// </summary>
        /// <remarks>
        /// The API endpoint allows merchant to fetch all agreements.
        /// <br/>If no query status is supplied, it will default to only retrieving active agreements.
        /// <br/>There is no way to list all agreements with all statuses; this is due to performance.
        /// <br/>**Please note:** Use the query parameters `status` and `createdAfter` specify the
        /// <br/>agreements you want to retrieve, in order to speed up the query. Try to avoid
        /// <br/>requests without query parameters. Set `createdAfter` to the most recent value as possible.
        /// <br/>For instance, if you fetch ACTIVE agreements every 24 hours, use `createdAfter=now-25h` or similar.
        /// <br/>Not that, in the future, it may be possible to encounter errors when the number of agreements in the response is too high
        /// <br/>(e.g., `413 Content Too Large` or similar).
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="status">Filter by the `status` of the agreement.</param>
        /// <param name="createdAfter">Filter by createdAfter timestamp (in milliseconds) for paginating.</param>
        /// <returns>OK'</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async Task<ICollection<AgreementResponseV2>> ListAgreementsAsync(string authorization, string ocp_Apim_Subscription_Key, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, AgreementStatus? status = null, long? createdAfter = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_Type != null)
                        request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));

                    if (merchant_Serial_Number != null)
                        request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "recurring/v2/agreements"
                    urlBuilder_.Append("recurring/v2/agreements");
            urlBuilder_.Append('?');
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
            }
            if (createdAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdAfter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(createdAfter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
            }
            urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ICollection<AgreementResponseV2>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorArray>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorArray>("Possible error responses.\nErrors can be from both our own code (where we have full control) and\nfrom Microsoft Azure (where we rely on standard functionality).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new Agreement, to be confirmed in the app
        /// </summary>
        /// <remarks>
        /// The API endpoint allows merchants to create agreements for a user to accept. Once the agreement is drafted,you will receive a `vippsConfirmationUrl`.
        /// <br/>This is used to redirect the user to the landing page, or automatically app-switched to the app if `"isApp":true` is used.
        /// <br/>
        /// <br/>If the user accepts or rejects the agreement, the user will be redirected back to the URL specified in `merchantRedirectUrl`.
        /// <br/>You **have** to implement polling on the agreement to check when the status changes to active instead of relying on the redirect back to the `merchantRedirectUrl`.
        /// <br/>We have no control over if a user is actually redirected back or not, this depends on what browser the user came from.
        /// <br/>
        /// <br/>Please note the different use cases for `initialCharge` and `campaign`. And when to use `RESERVE_CAPTURE` instead of `DIRECT_CAPTURE` as `transactionType`.
        /// <br/>More information about this can be found in the API documentation.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async Task<DraftAgreementResponseV2> DraftAgreementAsync(string authorization, string ocp_Apim_Subscription_Key, DraftAgreementV2 body, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_Type != null)
                        request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));

                    if (merchant_Serial_Number != null)
                        request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "recurring/v2/agreements"
                    urlBuilder_.Append("recurring/v2/agreements");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DraftAgreementResponseV2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorArray>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorArray>("Possible error responses.\nErrors can be from both our own code (where we have full control) and\nfrom Microsoft Azure (where we rely on standard functionality).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch an Agreement
        /// </summary>
        /// <remarks>
        /// Fetch a single agreement for a user.
        /// <br/>Recommended to use when polling for status changes after sending an agreement to a user.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async Task<AgreementResponseV2> FetchAgreementAsync(string authorization, string ocp_Apim_Subscription_Key, string agreementId, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (agreementId == null)
                throw new System.ArgumentNullException("agreementId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_Type != null)
                        request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));

                    if (merchant_Serial_Number != null)
                        request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "recurring/v2/agreements/{agreementId}"
                    urlBuilder_.Append("recurring/v2/agreements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(agreementId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AgreementResponseV2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorArray>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorArray>("Possible error responses.\nErrors can be from both our own code (where we have full control) and\nfrom Microsoft Azure (where we rely on standard functionality).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an Agreement
        /// </summary>
        /// <remarks>
        /// Updates the agreement.
        /// <br/>Note that when updating the status to `STOPPED`,
        /// <br/>you can not re-activate it. If you want to pause an agreement,
        /// <br/>we suggest leaving the agreement active and skipping the creation of charges as long as the agreement is paused in your systems.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="body">agreement</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async Task<AgreementReference> UpdateAgreementPutAsync(string authorization, string ocp_Apim_Subscription_Key, string agreementId, PatchAgreementV2 body, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (agreementId == null)
                throw new System.ArgumentNullException("agreementId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_Type != null)
                        request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));

                    if (merchant_Serial_Number != null)
                        request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "recurring/v2/agreements/{agreementId}"
                    urlBuilder_.Append("recurring/v2/agreements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(agreementId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AgreementReference>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorArray>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorArray>("Possible error responses.\nErrors can be from both our own code (where we have full control) and\nfrom Microsoft Azure (where we rely on standard functionality).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an Agreement
        /// </summary>
        /// <remarks>
        /// Updates the agreement.
        /// <br/>Note that when updating the status to `STOPPED`,
        /// <br/>you can not re-activate it. If you want to pause an agreement,
        /// <br/>we suggest leaving the agreement active and skipping the creation of charges as long as the agreement is paused in your systems.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="body">agreement</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async Task<AgreementReference> UpdateAgreementPatchAsync(string authorization, string ocp_Apim_Subscription_Key, string agreementId, PatchAgreementV2 body, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (agreementId == null)
                throw new System.ArgumentNullException("agreementId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_Type != null)
                        request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));

                    if (merchant_Serial_Number != null)
                        request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "recurring/v2/agreements/{agreementId}"
                    urlBuilder_.Append("recurring/v2/agreements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(agreementId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AgreementReference>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorArray>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorArray>("Possible error responses.\nErrors can be from both our own code (where we have full control) and\nfrom Microsoft Azure (where we rely on standard functionality).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Force accept an Agreement (Only available in test environment)
        /// </summary>
        /// <remarks>
        /// Forces an agreement to be accepted by the given customer phone number.
        /// <br/>This endpoint can only be used in the test environment.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async Task<object> AcceptUsingPATCHAsync(string authorization, string ocp_Apim_Subscription_Key, string agreementId, ForceAcceptAgreement body, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (agreementId == null)
                throw new System.ArgumentNullException("agreementId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_Type != null)
                        request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));

                    if (merchant_Serial_Number != null)
                        request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "recurring/v2/agreements/{agreementId}/accept"
                    urlBuilder_.Append("recurring/v2/agreements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(agreementId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accept");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorArray>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorArray>("Possible error responses.\nErrors can be from both our own code (where we have full control) and\nfrom Microsoft Azure (where we rely on standard functionality).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Agreements
        /// </summary>
        /// <remarks>
        /// The API endpoint allows merchant to fetch all agreements.
        /// <br/>If no query status is supplied it will default to only retrieving active agreements.
        /// <br/>There is no way to list all Agreements with all statuses, this is due to performance.
        /// <br/>Use the `createdAfter` query to paginate the response.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="continuation_Token">When returned from an endpoint, this indicates that there is more data than can be returned in one response.
        /// <br/>Repeating the request with the received token in the Continuation-Token header will return the next page of data.
        /// <br/>When not returned, the end of the data has been reached.
        /// <br/>
        /// <br/>Continuation-Tokens are short-lived, so they cannot be used several minutes/hours after received.</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="status">Filter by the `status` of the agreement.</param>
        /// <param name="createdAfter">Filter by createdAfter timestamp (in milliseconds) for paginating.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ICollection<AgreementResponseV3>> ListAgreementsV3Async(string authorization, string ocp_Apim_Subscription_Key, string content_Type = null, System.Guid? continuation_Token = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, AgreementStatus? status = null, long? createdAfter = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_Type != null)
                        request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));

                    if (continuation_Token != null)
                        request_.Headers.TryAddWithoutValidation("Continuation-Token", ConvertToString(continuation_Token, System.Globalization.CultureInfo.InvariantCulture));

                    if (merchant_Serial_Number != null)
                        request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "recurring/v3/agreements"
                    urlBuilder_.Append("recurring/v3/agreements");
            urlBuilder_.Append('?');
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
            }
            if (createdAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdAfter")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(createdAfter, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
            }
            urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ICollection<AgreementResponseV3>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorV3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorV3>("Possible error responses.\nErrors can be from both our own code (where we have full control) and\nfrom Microsoft Azure (where we rely on standard functionality).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new Agreement, to be confirmed in the Vipps or MobilePay app
        /// </summary>
        /// <remarks>
        /// The API endpoint allows merchants to create agreements for a user to accept. Once the agreement is drafted, you will receive a `vippsConfirmationUrl`.
        /// <br/>This is used to redirect the user to the Vipps MobilePay landing page, or to the Vipps or MobilePay app when `"isApp":true` is used.
        /// <br/>
        /// <br/>If the user accepts or rejects the agreement, the user will be redirected back to whichever URL has been passed in `merchantRedirectUrl`.
        /// <br/>You **must** implement polling on the agreement to check when the status changes to active, instead of relying on the redirect back to the `merchantRedirectUrl`.
        /// <br/>We have no control over if a user is actually redirected back or not, this depends on what browser the user came from.
        /// <br/>
        /// <br/>Please note the different use cases for `initialCharge` and `campaign`. And when to use `RESERVE_CAPTURE` instead of `DIRECT_CAPTURE` as transactionType.
        /// <br/>More information about this can be found in the API documentation.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="idempotency_Key">An Idempotency key must be provided to ensure idempotent requests.
        /// <br/>Key size can be between 1 to 40 characters.
        /// <br/>Key must not contain '#', '?', '/' or '\\'</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<DraftAgreementResponseV3> DraftAgreementV3Async(string authorization, string ocp_Apim_Subscription_Key, string idempotency_Key, DraftAgreementV3 body, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (idempotency_Key == null)
                        throw new System.ArgumentNullException("idempotency_Key");
                    request_.Headers.TryAddWithoutValidation("Idempotency-Key", ConvertToString(idempotency_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_Type != null)
                        request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));

                    if (merchant_Serial_Number != null)
                        request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "recurring/v3/agreements"
                    urlBuilder_.Append("recurring/v3/agreements");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DraftAgreementResponseV3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorV3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorV3>("Possible error responses.\nErrors can be from both our own code (where we have full control) and\nfrom Microsoft Azure (where we rely on standard functionality).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch an Agreement
        /// </summary>
        /// <remarks>
        /// Fetch a single agreement for a user.
        /// <br/>Recommended to use when polling for status changes after sending an agreement to a user.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<AgreementResponseV3> FetchAgreementV3Async(string authorization, string ocp_Apim_Subscription_Key, string agreementId, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (agreementId == null)
                throw new System.ArgumentNullException("agreementId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_Type != null)
                        request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));

                    if (merchant_Serial_Number != null)
                        request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "recurring/v3/agreements/{agreementId}"
                    urlBuilder_.Append("recurring/v3/agreements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(agreementId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AgreementResponseV3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorV3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorV3>("Possible error responses.\nErrors can be from both our own code (where we have full control) and\nfrom Microsoft Azure (where we rely on standard functionality).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an Agreement
        /// </summary>
        /// <remarks>
        /// Updates the agreement.
        /// <br/>Note that when updating the status to `STOPPED`,
        /// <br/>you can not re-activate it. If you want to pause an agreement,
        /// <br/>we suggest leaving the agreement active and skipping the creation of charges as long as the agreement is paused in your systems.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="idempotency_Key">An Idempotency key must be provided to ensure idempotent requests.
        /// <br/>Key size can be between 1 to 40 characters.
        /// <br/>Key must not contain '#', '?', '/' or '\\'</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="body">agreement</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Accepted. Request accepted, the action will likely succeed but has not yet been enacted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task UpdateAgreementPatchV3Async(string authorization, string ocp_Apim_Subscription_Key, string idempotency_Key, string agreementId, PatchAgreementV3 body, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (agreementId == null)
                throw new System.ArgumentNullException("agreementId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (idempotency_Key == null)
                        throw new System.ArgumentNullException("idempotency_Key");
                    request_.Headers.TryAddWithoutValidation("Idempotency-Key", ConvertToString(idempotency_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_Type != null)
                        request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));

                    if (merchant_Serial_Number != null)
                        request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "recurring/v3/agreements/{agreementId}"
                    urlBuilder_.Append("recurring/v3/agreements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(agreementId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            return;
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorV3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorV3>("Possible error responses.\nErrors can be from both our own code (where we have full control) and\nfrom Microsoft Azure (where we rely on standard functionality).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Force accept an Agreement (Only available in test environment)
        /// </summary>
        /// <remarks>
        /// Forces an agreement to be accepted by the given customer phone number.
        /// <br/>This endpoint can only be used in the test environment.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="idempotency_Key">An Idempotency key must be provided to ensure idempotent requests.
        /// <br/>Key size can be between 1 to 40 characters.
        /// <br/>Key must not contain '#', '?', '/' or '\\'</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<object> AcceptUsingPATCHV3Async(string authorization, string ocp_Apim_Subscription_Key, string idempotency_Key, string agreementId, ForceAcceptAgreementV3 body, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (agreementId == null)
                throw new System.ArgumentNullException("agreementId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (idempotency_Key == null)
                        throw new System.ArgumentNullException("idempotency_Key");
                    request_.Headers.TryAddWithoutValidation("Idempotency-Key", ConvertToString(idempotency_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_Type != null)
                        request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));

                    if (merchant_Serial_Number != null)
                        request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "recurring/v3/agreements/{agreementId}/accept"
                    urlBuilder_.Append("recurring/v3/agreements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(agreementId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accept");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorV3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorV3>("Possible error responses.\nErrors can be from both our own code (where we have full control) and\nfrom Microsoft Azure (where we rely on standard functionality).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Charges
        /// </summary>
        /// <remarks>
        /// Fetches all charges for a single agreement, including the optional initial charge.
        /// <br/>Supports filtering on `status` using it as a query parameter.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="chargeStatus">Filter by status of the charge.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async Task<ICollection<ChargeResponseV2>> ListChargesAsync(string authorization, string ocp_Apim_Subscription_Key, string agreementId, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, ChargeStatus? chargeStatus = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (agreementId == null)
                throw new System.ArgumentNullException("agreementId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_Type != null)
                        request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));

                    if (merchant_Serial_Number != null)
                        request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "recurring/v2/agreements/{agreementId}/charges"
                    urlBuilder_.Append("recurring/v2/agreements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(agreementId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/charges");
            urlBuilder_.Append('?');
            if (chargeStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chargeStatus")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(chargeStatus, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
            }
            urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ICollection<ChargeResponseV2>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorArray>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorArray>("Possible error responses.\nErrors can be from both our own code (where we have full control) and\nfrom Microsoft Azure (where we rely on standard functionality).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new charge
        /// </summary>
        /// <remarks>
        /// Creates a new recurring charge *(payment)* that will charge the user on the date specified.
        /// <br/>If the payment fails, the charge will be retried based on `retryDays`.
        /// <br/>We recommend at least two days retry.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="idempotency_Key">An Idempotency key must be provided to ensure idempotent requests.
        /// <br/>Key size can be between 1 to 40 characters.
        /// <br/>Key must not contain '#', '?', '/' or '\\'</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async Task<ChargeReference> CreateChargeAsync(string authorization, string ocp_Apim_Subscription_Key, string idempotency_Key, string agreementId, CreateChargeV2 body, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (agreementId == null)
                throw new System.ArgumentNullException("agreementId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (idempotency_Key == null)
                        throw new System.ArgumentNullException("idempotency_Key");
                    request_.Headers.TryAddWithoutValidation("Idempotency-Key", ConvertToString(idempotency_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_Type != null)
                        request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));

                    if (merchant_Serial_Number != null)
                        request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "recurring/v2/agreements/{agreementId}/charges"
                    urlBuilder_.Append("recurring/v2/agreements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(agreementId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/charges");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ChargeReference>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorArray>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorArray>("Possible error responses.\nErrors can be from both our own code (where we have full control) and\nfrom Microsoft Azure (where we rely on standard functionality).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch a Charge
        /// </summary>
        /// <remarks>
        /// Fetch a single charge for a user.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="chargeId">The charge identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async Task<ChargeResponseV2> FetchChargeAsync(string authorization, string ocp_Apim_Subscription_Key, string agreementId, string chargeId, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (agreementId == null)
                throw new System.ArgumentNullException("agreementId");

            if (chargeId == null)
                throw new System.ArgumentNullException("chargeId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_Type != null)
                        request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));

                    if (merchant_Serial_Number != null)
                        request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "recurring/v2/agreements/{agreementId}/charges/{chargeId}"
                    urlBuilder_.Append("recurring/v2/agreements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(agreementId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/charges/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(chargeId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ChargeResponseV2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorArray>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorArray>("Possible error responses.\nErrors can be from both our own code (where we have full control) and\nfrom Microsoft Azure (where we rely on standard functionality).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel a Charge
        /// </summary>
        /// <remarks>
        /// Cancels a pending, due, or reserved charge.
        /// <br/>When cancelling a charge that is `PARTIALLY_CAPTURED`, the remaining funds on the charge
        /// <br/>will be released back to the customer.
        /// <br/>
        /// <br/>Please note: If you cancel an agreement, all the charges for that agreement are automatically cancelled.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="chargeId">The charge identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async Task<ChargeResponseV2> CancelChargeAsync(string authorization, string ocp_Apim_Subscription_Key, string agreementId, string chargeId, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (agreementId == null)
                throw new System.ArgumentNullException("agreementId");

            if (chargeId == null)
                throw new System.ArgumentNullException("chargeId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_Type != null)
                        request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));

                    if (merchant_Serial_Number != null)
                        request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "recurring/v2/agreements/{agreementId}/charges/{chargeId}"
                    urlBuilder_.Append("recurring/v2/agreements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(agreementId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/charges/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(chargeId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ChargeResponseV2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorArray>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorArray>("Possible error responses.\nErrors can be from both our own code (where we have full control) and\nfrom Microsoft Azure (where we rely on standard functionality).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Capture a reserved charge
        /// </summary>
        /// <remarks>
        /// Captures a reserved charge.
        /// <br/>Only charges with transactionType `RESERVE_CAPTURE` can be captured.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="idempotency_Key">An Idempotency key must be provided to ensure idempotent requests.
        /// <br/>Key size can be between 1 to 40 characters.
        /// <br/>Key must not contain '#', '?', '/' or '\\'</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="chargeId">The charge identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async Task<object> CaptureChargeAsync(string authorization, string ocp_Apim_Subscription_Key, string idempotency_Key, string agreementId, string chargeId, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (agreementId == null)
                throw new System.ArgumentNullException("agreementId");

            if (chargeId == null)
                throw new System.ArgumentNullException("chargeId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (idempotency_Key == null)
                        throw new System.ArgumentNullException("idempotency_Key");
                    request_.Headers.TryAddWithoutValidation("Idempotency-Key", ConvertToString(idempotency_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_Type != null)
                        request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));

                    if (merchant_Serial_Number != null)
                        request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "recurring/v2/agreements/{agreementId}/charges/{chargeId}/capture"
                    urlBuilder_.Append("recurring/v2/agreements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(agreementId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/charges/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(chargeId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/capture");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorArray>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorArray>("Possible error responses.\nErrors can be from both our own code (where we have full control) and\nfrom Microsoft Azure (where we rely on standard functionality).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Refund a charge
        /// </summary>
        /// <remarks>
        /// Refunds a charge, and can also do a partial refund (refunding a smaller part of the payment).
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="idempotency_Key">An Idempotency key must be provided to ensure idempotent requests.
        /// <br/>Key size can be between 1 to 40 characters.
        /// <br/>Key must not contain '#', '?', '/' or '\\'</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="chargeId">The charge identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async Task<object> RefundChargeAsync(string authorization, string ocp_Apim_Subscription_Key, string idempotency_Key, string agreementId, string chargeId, RefundRequest body, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (agreementId == null)
                throw new System.ArgumentNullException("agreementId");

            if (chargeId == null)
                throw new System.ArgumentNullException("chargeId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (idempotency_Key == null)
                        throw new System.ArgumentNullException("idempotency_Key");
                    request_.Headers.TryAddWithoutValidation("Idempotency-Key", ConvertToString(idempotency_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_Type != null)
                        request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));

                    if (merchant_Serial_Number != null)
                        request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "recurring/v2/agreements/{agreementId}/charges/{chargeId}/refund"
                    urlBuilder_.Append("recurring/v2/agreements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(agreementId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/charges/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(chargeId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/refund");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorArray>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorArray>("Possible error responses.\nErrors can be from both our own code (where we have full control) and\nfrom Microsoft Azure (where we rely on standard functionality).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Charges
        /// </summary>
        /// <remarks>
        /// Fetches all charges for a single agreement, including the optional initial charge.
        /// <br/>Supports filtering on status using query parameter.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="continuation_Token">When returned from an endpoint, this indicates that there is more data than can be returned in one response.
        /// <br/>Repeating the request with the received token in the Continuation-Token header will return the next page of data.
        /// <br/>When not returned, the end of the data has been reached.
        /// <br/>
        /// <br/>Continuation-Tokens are short-lived, so they cannot be used several minutes/hours after received.</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="status">Filter by status of the charge.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ICollection<ChargeResponseV3>> ListChargesV3Async(string authorization, string ocp_Apim_Subscription_Key, string agreementId, System.Guid? continuation_Token = null, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, ChargeStatus? status = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (agreementId == null)
                throw new System.ArgumentNullException("agreementId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (continuation_Token != null)
                        request_.Headers.TryAddWithoutValidation("Continuation-Token", ConvertToString(continuation_Token, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_Type != null)
                        request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));

                    if (merchant_Serial_Number != null)
                        request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "recurring/v3/agreements/{agreementId}/charges"
                    urlBuilder_.Append("recurring/v3/agreements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(agreementId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/charges");
            urlBuilder_.Append('?');
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
            }
            urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ICollection<ChargeResponseV3>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorV3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorV3>("Possible error responses.\nErrors can be from both our own code (where we have full control) and\nfrom Microsoft Azure (where we rely on standard functionality).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new charge
        /// </summary>
        /// <remarks>
        /// Creates a new recurring charge *(payment)* that will charge the user on the date specified.
        /// <br/>If the payment fails, the charge will be retried based on `retryDays`.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="idempotency_Key">An Idempotency key must be provided to ensure idempotent requests.
        /// <br/>Key size can be between 1 to 40 characters.
        /// <br/>Key must not contain '#', '?', '/' or '\\'</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ChargeReference> CreateChargeV3Async(string authorization, string ocp_Apim_Subscription_Key, string idempotency_Key, string agreementId, CreateChargeV3 body, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (agreementId == null)
                throw new System.ArgumentNullException("agreementId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (idempotency_Key == null)
                        throw new System.ArgumentNullException("idempotency_Key");
                    request_.Headers.TryAddWithoutValidation("Idempotency-Key", ConvertToString(idempotency_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_Type != null)
                        request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));

                    if (merchant_Serial_Number != null)
                        request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "recurring/v3/agreements/{agreementId}/charges"
                    urlBuilder_.Append("recurring/v3/agreements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(agreementId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/charges");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ChargeReference>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorV3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorV3>("Possible error responses.\nErrors can be from both our own code (where we have full control) and\nfrom Microsoft Azure (where we rely on standard functionality).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create multiple charges
        /// </summary>
        /// <remarks>
        /// Asynchronously creates multiple new recurring charges *(payments)* that will be automatically processed on the due date.
        /// <br/>If the payment fails, the charge will be retried based on `retryDays`. Maximum 2000 charges per request.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="idempotency_Key">An Idempotency key must be provided to ensure idempotent requests.
        /// <br/>Key size can be between 1 to 40 characters.
        /// <br/>Key must not contain '#', '?', '/' or '\\'</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>None, some or all charges passed API level validation.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<AsyncChargeResponse> CreateChargeAsyncV3Async(string authorization, string ocp_Apim_Subscription_Key, string idempotency_Key, IEnumerable<CreateChargeAsyncV3> body, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (idempotency_Key == null)
                        throw new System.ArgumentNullException("idempotency_Key");
                    request_.Headers.TryAddWithoutValidation("Idempotency-Key", ConvertToString(idempotency_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_Type != null)
                        request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));

                    if (merchant_Serial_Number != null)
                        request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "recurring/v3/agreements/charges"
                    urlBuilder_.Append("recurring/v3/agreements/charges");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AsyncChargeResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch a charge
        /// </summary>
        /// <remarks>
        /// Fetch a single charge for a user.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="chargeId">The charge identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ChargeResponseV3> FetchChargeV3Async(string authorization, string ocp_Apim_Subscription_Key, string agreementId, string chargeId, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (agreementId == null)
                throw new System.ArgumentNullException("agreementId");

            if (chargeId == null)
                throw new System.ArgumentNullException("chargeId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_Type != null)
                        request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));

                    if (merchant_Serial_Number != null)
                        request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "recurring/v3/agreements/{agreementId}/charges/{chargeId}"
                    urlBuilder_.Append("recurring/v3/agreements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(agreementId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/charges/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(chargeId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ChargeResponseV3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorV3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorV3>("Possible error responses.\nErrors can be from both our own code (where we have full control) and\nfrom Microsoft Azure (where we rely on standard functionality).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel a charge
        /// </summary>
        /// <remarks>
        /// Cancels a pending, due or reserved charge.
        /// <br/>When cancelling a charge that is `PARTIALLY_CAPTURED`, the remaining funds on the charge
        /// <br/>will be released back to the customer.
        /// <br/>
        /// <br/>Note if you cancel an agreement,
        /// <br/>there is no need to cancel the charges that belongs to the agreement.
        /// <br/>This will be done automatically.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="idempotency_Key">An Idempotency key must be provided to ensure idempotent requests.
        /// <br/>Key size can be between 1 to 40 characters.
        /// <br/>Key must not contain '#', '?', '/' or '\\'</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="chargeId">The charge identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Accepted. Request accepted, the action will likely succeed but has not yet been enacted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task CancelChargeV3Async(string authorization, string ocp_Apim_Subscription_Key, string idempotency_Key, string agreementId, string chargeId, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (agreementId == null)
                throw new System.ArgumentNullException("agreementId");

            if (chargeId == null)
                throw new System.ArgumentNullException("chargeId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (idempotency_Key == null)
                        throw new System.ArgumentNullException("idempotency_Key");
                    request_.Headers.TryAddWithoutValidation("Idempotency-Key", ConvertToString(idempotency_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_Type != null)
                        request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));

                    if (merchant_Serial_Number != null)
                        request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "recurring/v3/agreements/{agreementId}/charges/{chargeId}"
                    urlBuilder_.Append("recurring/v3/agreements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(agreementId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/charges/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(chargeId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            return;
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorV3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorV3>("Possible error responses.\nErrors can be from both our own code (where we have full control) and\nfrom Microsoft Azure (where we rely on standard functionality).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch a charge by ID
        /// </summary>
        /// <remarks>
        /// A "special case" endpoint to fetch a single charge just by `chargeId`, when the `agreementId` is unknown.
        /// <br/>This is useful for investigating claims from customers, but not intended for automation.
        /// <br/>
        /// <br/>Please note: This is *not* a replacement for the normal endpoint for fetching charges:
        /// <br/>`GET:/recurring/v3/agreements/{agreementId}/charges/{chargeId}`.
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="chargeId">The charge identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ChargeResponseV3> FetchChargeByIdV3Async(string authorization, string ocp_Apim_Subscription_Key, string chargeId, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (chargeId == null)
                throw new System.ArgumentNullException("chargeId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_Type != null)
                        request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));

                    if (merchant_Serial_Number != null)
                        request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "recurring/v3/charges/{chargeId}"
                    urlBuilder_.Append("recurring/v3/charges/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(chargeId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ChargeResponseV3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorV3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorV3>("Possible error responses.\nErrors can be from both our own code (where we have full control) and\nfrom Microsoft Azure (where we rely on standard functionality).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Capture a reserved charge
        /// </summary>
        /// <remarks>
        /// Captures a reserved charge.
        /// <br/>Only charges with transactionType `RESERVE_CAPTURE` can be captured.
        /// <br/>Can also do partial captures (captures a smaller part of the payment).
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="idempotency_Key">An Idempotency key must be provided to ensure idempotent requests.
        /// <br/>Key size can be between 1 to 40 characters.
        /// <br/>Key must not contain '#', '?', '/' or '\\'</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="chargeId">The charge identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Accepted. Request accepted, the action will likely succeed but has not yet been enacted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task CaptureChargeV3Async(string authorization, string ocp_Apim_Subscription_Key, string idempotency_Key, string agreementId, string chargeId, CaptureRequestV3 body, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (agreementId == null)
                throw new System.ArgumentNullException("agreementId");

            if (chargeId == null)
                throw new System.ArgumentNullException("chargeId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (idempotency_Key == null)
                        throw new System.ArgumentNullException("idempotency_Key");
                    request_.Headers.TryAddWithoutValidation("Idempotency-Key", ConvertToString(idempotency_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_Type != null)
                        request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));

                    if (merchant_Serial_Number != null)
                        request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "recurring/v3/agreements/{agreementId}/charges/{chargeId}/capture"
                    urlBuilder_.Append("recurring/v3/agreements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(agreementId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/charges/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(chargeId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/capture");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            return;
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorV3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorV3>("Possible error responses.\nErrors can be from both our own code (where we have full control) and\nfrom Microsoft Azure (where we rely on standard functionality).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Refund a charge
        /// </summary>
        /// <remarks>
        /// Refunds a charge, can also do a partial refund (refunding a smaller part of the payment).
        /// </remarks>
        /// <param name="authorization">The access token is a base64-encoded string that is required for all API requests. It is a JWT (JSON Web Token). The access token is fetched from the
        /// <br/>    [`POST:/accesstoken/get`](/api/access-token#tag/Authorization-Service/operation/fetchAuthorizationTokenUsingPost)
        /// <br/>    endpoint.
        /// <br/>It is valid for 1 hour in the test environment and 24 hours in the production environment.</param>
        /// <param name="ocp_Apim_Subscription_Key">The subscription key for your sales unit. See [API keys](/docs/knowledge-base/api-keys/). Keep it secret.</param>
        /// <param name="idempotency_Key">An Idempotency key must be provided to ensure idempotent requests.
        /// <br/>Key size can be between 1 to 40 characters.
        /// <br/>Key must not contain '#', '?', '/' or '\\'</param>
        /// <param name="agreementId">The agreement identifier (ID)</param>
        /// <param name="chargeId">The charge identifier (ID)</param>
        /// <param name="content_Type">The content type must be `application/json`</param>
        /// <param name="merchant_Serial_Number">The Merchant Serial Number (MSN) is a unique ID for the sales unit
        /// <br/>for which this payment is made.
        /// <br/>This is a required parameter if you are a Recurring partner
        /// <br/>making payments on behalf of a merchant.
        /// <br/>The partner must use the merchant's MSN (not the partner's MSN).
        /// <br/>This parameter is optional, and recommended, for regular Vipps MobilePay
        /// <br/>merchants making payments for themselves.</param>
        /// <param name="vipps_System_Name">The name of the ecommerce solution. One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the ecommerce solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the ecommerce plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Accepted. Request accepted, the action will likely succeed but has not yet been enacted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task RefundChargeV3Async(string authorization, string ocp_Apim_Subscription_Key, string idempotency_Key, string agreementId, string chargeId, RefundRequest body, string content_Type = null, string merchant_Serial_Number = null, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (agreementId == null)
                throw new System.ArgumentNullException("agreementId");

            if (chargeId == null)
                throw new System.ArgumentNullException("chargeId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (ocp_Apim_Subscription_Key == null)
                        throw new System.ArgumentNullException("ocp_Apim_Subscription_Key");
                    request_.Headers.TryAddWithoutValidation("Ocp-Apim-Subscription-Key", ConvertToString(ocp_Apim_Subscription_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (idempotency_Key == null)
                        throw new System.ArgumentNullException("idempotency_Key");
                    request_.Headers.TryAddWithoutValidation("Idempotency-Key", ConvertToString(idempotency_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_Type != null)
                        request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));

                    if (merchant_Serial_Number != null)
                        request_.Headers.TryAddWithoutValidation("Merchant-Serial-Number", ConvertToString(merchant_Serial_Number, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "recurring/v3/agreements/{agreementId}/charges/{chargeId}/refund"
                    urlBuilder_.Append("recurring/v3/agreements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(agreementId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/charges/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(chargeId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/refund");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            return;
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorV3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorV3>("Possible error responses.\nErrors can be from both our own code (where we have full control) and\nfrom Microsoft Azure (where we rely on standard functionality).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, IReadOnlyDictionary<string, IEnumerable<string>> headers, CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(EnumMemberAttribute)) 
                            as EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Status of the agreement.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AgreementStatus
    {

        [EnumMember(Value = @"PENDING")]
        PENDING = 0,

        [EnumMember(Value = @"ACTIVE")]
        ACTIVE = 1,

        [EnumMember(Value = @"STOPPED")]
        STOPPED = 2,

        [EnumMember(Value = @"EXPIRED")]
        EXPIRED = 3,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChargeStatus
    {

        [EnumMember(Value = @"PENDING")]
        PENDING = 0,

        [EnumMember(Value = @"DUE")]
        DUE = 1,

        [EnumMember(Value = @"RESERVED")]
        RESERVED = 2,

        [EnumMember(Value = @"CHARGED")]
        CHARGED = 3,

        [EnumMember(Value = @"PARTIALLY_CAPTURED")]
        PARTIALLY_CAPTURED = 4,

        [EnumMember(Value = @"FAILED")]
        FAILED = 5,

        [EnumMember(Value = @"CANCELLED")]
        CANCELLED = 6,

        [EnumMember(Value = @"PARTIALLY_REFUNDED")]
        PARTIALLY_REFUNDED = 7,

        [EnumMember(Value = @"REFUNDED")]
        REFUNDED = 8,

        [EnumMember(Value = @"PROCESSING")]
        PROCESSING = 9,

    }

    /// <summary>
    /// A summary of the amounts captured, refunded and cancelled
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChargeSummary
    {
        /// <summary>
        /// The total amount which has been captured/charged, in case of status charged/partial capture.
        /// <br/>Amounts are specified in minor units.
        /// <br/>NOK and DKK: 1 kr = 100 øre. EUR: 1 Euro = 100 cent.
        /// </summary>

        [JsonPropertyName("captured")]
        public int Captured { get; set; }

        /// <summary>
        /// The total amount which has been refunded, in case of status refund/partial refund.
        /// <br/>Amounts are specified in minor units.
        /// <br/>NOK and DKK: 1 kr = 100 øre. EUR: 1 Euro = 100 cent.
        /// </summary>

        [JsonPropertyName("refunded")]
        public int Refunded { get; set; }

        /// <summary>
        /// The total amount which has been cancelled.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>NOK and DKK: 1 kr = 100 øre. EUR: 1 Euro = 100 cent.
        /// </summary>

        [JsonPropertyName("cancelled")]
        public int Cancelled { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of events related to the charge.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChargeHistory : Collection<ChargeEvent>
    {

    }

    /// <summary>
    /// Describes the operation that was performed on the charge
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChargeEvent
    {
        /// <summary>
        /// Date and time of the event, as timestamp on the format `yyyy-MM-dd'T'HH:mm:ss'Z'`,
        /// <br/>with or without milliseconds.
        /// </summary>

        [JsonPropertyName("occurred")]
        [Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Occurred { get; set; }

        [JsonPropertyName("event")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ChargeEventEvent Event { get; set; }

        /// <summary>
        /// The amount related to the operation.
        /// <br/>Amounts are specified in minor units.
        /// <br/>NOK and DKK: 1 kr = 100 øre. EUR: 1 Euro = 100 cent.
        /// </summary>

        [JsonPropertyName("amount")]
        public int Amount { get; set; }

        /// <summary>
        /// The idempotency key of the event
        /// </summary>

        [JsonPropertyName("idempotencyKey")]
        [Required(AllowEmptyStrings = true)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// True if the operation was successful, false otherwise
        /// </summary>

        [JsonPropertyName("success")]
        public bool Success { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// ISO-4217: https://www.iso.org/iso-4217-currency-codes.html
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Currency
    {

        [EnumMember(Value = @"NOK")]
        NOK = 0,

    }

    /// <summary>
    /// Available types of currency are NOK, EUR and DKK
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CurrencyV3
    {

        [EnumMember(Value = @"NOK")]
        NOK = 0,

        [EnumMember(Value = @"EUR")]
        EUR = 1,

        [EnumMember(Value = @"DKK")]
        DKK = 2,

    }

    /// <summary>
    /// Country code for the agreement according to ISO 3166-2 (two capital letters).
    /// <br/>Needs to be set based on the merchant's market/country. Cross border agreements are not supported, 
    /// <br/>e.g., Norwegian merchants can only create agreements for Norwegian customers and countryCode should be NO.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CountryCode
    {

        [EnumMember(Value = @"NO")]
        NO = 0,

        [EnumMember(Value = @"DK")]
        DK = 1,

        [EnumMember(Value = @"FI")]
        FI = 2,

    }

    /// <summary>
    /// Type of transaction, either direct capture or reserve capture
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransactionType
    {

        [EnumMember(Value = @"DIRECT_CAPTURE")]
        DIRECT_CAPTURE = 0,

        [EnumMember(Value = @"RESERVE_CAPTURE")]
        RESERVE_CAPTURE = 1,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChargeTypeV2
    {

        [EnumMember(Value = @"INITIAL")]
        INITIAL = 0,

        [EnumMember(Value = @"RECURRING")]
        RECURRING = 1,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChargeTypeV3
    {

        [EnumMember(Value = @"INITIAL")]
        INITIAL = 0,

        [EnumMember(Value = @"RECURRING")]
        RECURRING = 1,

        [EnumMember(Value = @"UNSCHEDULED")]
        UNSCHEDULED = 2,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChargeCreationTypeV3
    {

        [EnumMember(Value = @"RECURRING")]
        RECURRING = 0,

        [EnumMember(Value = @"UNSCHEDULED")]
        UNSCHEDULED = 1,

    }

    /// <summary>
    /// Interval for subscription
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Interval
    {

        [EnumMember(Value = @"YEAR")]
        YEAR = 0,

        [EnumMember(Value = @"MONTH")]
        MONTH = 1,

        [EnumMember(Value = @"WEEK")]
        WEEK = 2,

        [EnumMember(Value = @"DAY")]
        DAY = 3,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DraftAgreementV2
    {

        [JsonPropertyName("variableAmount")]
        public VariableAmountV2 VariableAmount { get; set; }

        [JsonPropertyName("campaign")]
        public CampaignV2 Campaign { get; set; }

        [JsonPropertyName("currency")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(3, MinimumLength = 3)]
        [RegularExpression(@"^[A-Z]{3}$")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public Currency Currency { get; set; }

        /// <summary>
        /// Customers phone number (if available). Used to simplify the
        /// <br/>following Vipps MobilePay interaction.
        /// <br/>The format is MSISDN: Digits only: Country code and subscriber
        /// <br/>number, but no prefix.
        /// <br/>If the phone number is a Norwegian phone number `(+47) 91 23 45 67`, the MSISDN representation is `4712345678`.
        /// <br/>See: https://en.wikipedia.org/wiki/MSISDN
        /// </summary>

        [JsonPropertyName("customerPhoneNumber")]
        [StringLength(15, MinimumLength = 10)]
        [RegularExpression(@"^\d{10,15}$")]
        public string CustomerPhoneNumber { get; set; }

        [JsonPropertyName("initialCharge")]
        public InitialChargeV2 InitialCharge { get; set; }

        [JsonPropertyName("interval")]
        [Required(AllowEmptyStrings = true)]
        [RegularExpression(@"^(YEAR|MONTH|WEEK|DAY)$")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public Interval Interval { get; set; }

        /// <summary>
        /// Number of intervals between charges. Example: interval=week,
        /// <br/>intervalCount=2 to be able to charge every two weeks.
        /// <br/>Charges should occur at least once a year.
        /// </summary>

        [JsonPropertyName("intervalCount")]
        [Range(1, 31)]
        public int IntervalCount { get; set; }

        /// <summary>
        /// This optional parameter indicates whether payment request is triggered from
        /// <br/>Mobile App or Web browser. Based on this value, response will be
        /// <br/>redirect URL for Vipps MobilePay landing page or deeplink URL to connect vipps
        /// <br/>App. When isApp is set to true, URLs passed to us will not be
        /// <br/>validated as regular URLs.
        /// <br/>See: https://developer.vippsmobilepay.com/docs/knowledge-base/user-flow
        /// </summary>

        [JsonPropertyName("isApp")]
        public bool IsApp { get; set; } = false;

        /// <summary>
        /// URL where you can send the customer to view/manage their
        /// <br/>subscription. Typically a "My page" where the user can change, pause, cancel, etc.
        /// <br/>The page must offer management tools, not just information about how to
        /// <br/>contact customer service, etc.
        /// <br/>We recommend letting users
        /// <br/>[log in](/docs/APIs/login-api),
        /// <br/>not with username and password.
        /// <br/>We do not have any specific requirements for the security of the page other than requiring HTTPS.
        /// <br/>Only HTTP or HTTPS scheme is allowed. 
        /// </summary>

        [JsonPropertyName("merchantAgreementUrl")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(1024)]
        public string MerchantAgreementUrl { get; set; }

        /// <summary>
        /// URL where customer should be redirected after the agreement has been
        /// <br/>approved/rejected in the Vipps or MobilePay app. 
        /// <br/>HTTPS and deeplinks are allowed (example: myApp://home)
        /// </summary>

        [JsonPropertyName("merchantRedirectUrl")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(1024)]
        public string MerchantRedirectUrl { get; set; }

        /// <summary>
        /// The price of the agreement.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>NOK: 1 kr = 100 øre.
        /// </summary>

        [JsonPropertyName("price")]
        public int Price { get; set; }

        /// <summary>
        /// Product name (short)
        /// </summary>

        [JsonPropertyName("productName")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(45)]
        public string ProductName { get; set; }

        /// <summary>
        /// Product description (longer)
        /// </summary>

        [JsonPropertyName("productDescription")]
        [StringLength(100)]
        public string ProductDescription { get; set; }

        /// <summary>
        /// Space-separated list of the required user information (e.g., "name phoneNumber")
        /// <br/>for the agreement. See the
        /// <br/>[Userinfo user guide](/docs/APIs/userinfo-api/userinfo-api-guide#scope)
        /// <br/>for details.
        /// <br/>Possible values are:
        /// <br/>- name
        /// <br/>- address
        /// <br/>- email
        /// <br/>- phoneNumber
        /// <br/>- birthDate
        /// <br/>- nin
        /// <br/>
        /// </summary>

        [JsonPropertyName("scope")]
        public string Scope { get; set; }

        /// <summary>
        /// If the property is set to `true`, it will cause a push notification
        /// <br/>to be sent to the given phone number immediately, without loading
        /// <br/>the landing page.
        /// <br/>This feature has to be specially enabled for eligible sales
        /// <br/>units: The sales units must be whitelisted by Vipps MobilePay. If the sales unit is not whitelisted,
        /// <br/>the request will fail and an error message will be returned (statusCode=403).
        /// <br/>See: https://developer.vippsmobilepay.com/docs/knowledge-base/landing-page
        /// </summary>

        [JsonPropertyName("skipLandingPage")]
        public bool SkipLandingPage { get; set; } = false;

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DraftAgreementV3
    {

        [JsonPropertyName("campaign")]
        public CampaignV3 Campaign { get; set; }

        [JsonPropertyName("pricing")]
        [Required]
        public PricingRequest Pricing { get; set; } = new PricingRequest();

        /// <summary>
        /// Customers phone number (if available). Used to simplify the
        /// <br/>following interaction. MSISDN: https://en.wikipedia.org/wiki/MSISDN
        /// </summary>

        [JsonPropertyName("phoneNumber")]
        [StringLength(15)]
        public string PhoneNumber { get; set; }

        [JsonPropertyName("initialCharge")]
        public InitialChargeV3 InitialCharge { get; set; }

        [JsonPropertyName("interval")]
        public TimePeriod Interval { get; set; }

        /// <summary>
        /// This optional parameter indicates whether payment request is triggered from
        /// <br/>Mobile App or Web browser. Based on this value, response will be
        /// <br/>redirect URL for Vipps MobilePay landing page or deeplink URL to connect vipps
        /// <br/>App. When isApp is set to true, URLs passed to us will not be
        /// <br/>validated as regular URLs.
        /// <br/>See: https://developer.vippsmobilepay.com/docs/knowledge-base/user-flow
        /// </summary>

        [JsonPropertyName("isApp")]
        public bool IsApp { get; set; } = false;

        /// <summary>
        /// URL where we can send the customer to view/manage their
        /// <br/>subscription. Typically a "My page" where the user can change, pause, cancel, etc.
        /// <br/>The page must offer actual management, not just information about how to
        /// <br/>contact customer service, etc.
        /// <br/>We recommend letting users
        /// <br/>[log in](/docs/APIs/login-api),
        /// <br/>not with username and password.
        /// <br/>We do not have any specific requirements for the security of the page other than requiring HTTPS.
        /// <br/>Only HTTPS scheme is allowed. 
        /// <br/>This URL is required for Norwegian Merchants.
        /// </summary>

        [JsonPropertyName("merchantAgreementUrl")]
        [StringLength(1024)]
        public string MerchantAgreementUrl { get; set; }

        /// <summary>
        /// URL where customer should be redirected after the agreement has been
        /// <br/>approved/rejected in the Vipps mobile application.
        /// <br/>HTTPS and deeplinks are allowed (example: myApp://home)
        /// </summary>

        [JsonPropertyName("merchantRedirectUrl")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(2048)]
        public string MerchantRedirectUrl { get; set; }

        /// <summary>
        /// Product name (short)
        /// </summary>

        [JsonPropertyName("productName")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(45)]
        public string ProductName { get; set; }

        /// <summary>
        /// Product description (longer)
        /// </summary>

        [JsonPropertyName("productDescription")]
        [StringLength(100)]
        public string ProductDescription { get; set; }

        /// <summary>
        /// Space-separated list of the required user information (e.g., "name phoneNumber")
        /// <br/>for the agreement. See the
        /// <br/>[Userinfo user guide](/docs/APIs/userinfo-api/userinfo-api-guide#scope)
        /// <br/>for details.
        /// <br/>Possible values are:
        /// <br/>- name
        /// <br/>- address
        /// <br/>- email
        /// <br/>- phoneNumber
        /// <br/>- birthDate
        /// <br/>- nin
        /// <br/>
        /// </summary>

        [JsonPropertyName("scope")]
        public string Scope { get; set; }

        /// <summary>
        /// If the property is set to `true`, it will cause a push notification
        /// <br/>to be sent to the given phone number immediately, without loading
        /// <br/>the landing page.
        /// <br/>This feature has to be specially enabled for eligible sales
        /// <br/>units: The sales units must be whitelisted by Vipps MobilePay. If the sales unit is not whitelisted,
        /// <br/>the request will fail and an error message will be returned (statusCode=403).
        /// <br/>See: https://developer.vippsmobilepay.com/docs/knowledge-base/landing-page
        /// </summary>

        [JsonPropertyName("skipLandingPage")]
        public bool SkipLandingPage { get; set; } = false;

        /// <summary>
        /// An optional external ID for the agreement.
        /// <br/>The `externalId` can be used by the merchant to map the `agreementId`
        /// <br/>to an ID in a subscription system or similar.
        /// </summary>

        [JsonPropertyName("externalId")]
        [StringLength(64, MinimumLength = 1)]
        [RegularExpression(@"^.{1,64}$")]
        public string ExternalId { get; set; }

        [JsonPropertyName("countryCode")]
        [RegularExpression(@"^[A-Z]{2}$")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public CountryCode CountryCode { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DraftAgreementResponseV2
    {
        /// <summary>
        /// Reference of a an agreement which user may agree to.
        /// <br/>Initially the agreement is in a pending state waiting for user approval.
        /// <br/>It enters active state once the user has approved it in the Vipps or MobilePay app.
        /// </summary>

        [JsonPropertyName("agreementResource")]
        [Required(AllowEmptyStrings = true)]
        public string AgreementResource { get; set; }

        /// <summary>
        /// Id of a an agreement which user may agree to.
        /// <br/>Initially the agreement is in a pending state waiting for user approval.
        /// <br/>It enters active state once the user has approved it in the Vipps or MobilePay app.
        /// </summary>

        [JsonPropertyName("agreementId")]
        [Required(AllowEmptyStrings = true)]
        public string AgreementId { get; set; }

        /// <summary>
        /// The `vippsConfirmationUrl` should be used to redirect the
        /// <br/>user to the Vipps MobilePay landing page in a desktop flow (with `https://`),
        /// <br/>or to the Vipps or MobilePay app in a mobile flow (with `vipps://`), where the
        /// <br/>user can then approve the agreement.
        /// </summary>

        [JsonPropertyName("vippsConfirmationUrl")]
        [Required(AllowEmptyStrings = true)]
        public string VippsConfirmationUrl { get; set; }

        /// <summary>
        /// The Id of the initialCharge if given, otherwise `null`.
        /// <br/>If an `orderId` is specified this is used as the `chargeId` otherwise it is auto generated.
        /// </summary>

        [JsonPropertyName("chargeId")]
        [Required(AllowEmptyStrings = true)]
        [RegularExpression(@"^[a-zA-Z0-9-]{1,50}$")]
        public string ChargeId { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DraftAgreementResponseV3
    {
        /// <summary>
        /// Id of a an agreement which user may agree to.
        /// <br/>Initially the agreement is in a pending state waiting for user approval.
        /// <br/>It enters active state once the user has approved it in the Vipps or MobilePay app.
        /// </summary>

        [JsonPropertyName("agreementId")]
        [Required(AllowEmptyStrings = true)]
        public string AgreementId { get; set; }

        /// <summary>
        /// UUID (RFC 4122) representation of agreementId
        /// </summary>

        [JsonPropertyName("uuid")]
        [Required(AllowEmptyStrings = true)]
        [RegularExpression(@"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")]
        public System.Guid Uuid { get; set; }

        /// <summary>
        /// The `vippsConfirmationUrl` should be used to redirect the
        /// <br/>user to the Vipps MobilePay landing page in a desktop flow (with `https://`),
        /// <br/>or to the Vipps or MobilePay app in a mobile flow (with `vipps://`), where the
        /// <br/>user can then approve the agreement.
        /// </summary>

        [JsonPropertyName("vippsConfirmationUrl")]
        public string VippsConfirmationUrl { get; set; }

        /// <summary>
        /// The Id of the initialCharge if given, otherwise `null`.
        /// <br/>If an `orderId` is specified this is used as the `chargeId` otherwise it is auto generated.
        /// </summary>

        [JsonPropertyName("chargeId")]
        [RegularExpression(@"^[a-zA-Z0-9-]{1,50}$")]
        public string ChargeId { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AgreementResponseV2
    {

        [JsonPropertyName("campaign")]
        public CampaignV2 Campaign { get; set; }

        [JsonPropertyName("currency")]
        [StringLength(3, MinimumLength = 3)]
        [RegularExpression(@"^[A-Z]{3}$")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public Currency Currency { get; set; }

        /// <summary>
        /// Uniquely identifies this agreement
        /// </summary>

        [JsonPropertyName("id")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(36)]
        public string Id { get; set; }

        [JsonPropertyName("interval")]
        [Required(AllowEmptyStrings = true)]
        [RegularExpression(@"^(YEAR|MONTH|WEEK|DAY)$")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public Interval Interval { get; set; }

        /// <summary>
        /// Number of intervals between charges. Example: interval=WEEK, intervalCount=2 to be able to charge every two weeks. Charges should occur at least once a year.
        /// </summary>

        [JsonPropertyName("intervalCount")]
        [Range(1, 31)]
        public int IntervalCount { get; set; }

        /// <summary>
        /// The price of the agreement.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>NOK: 1 kr = 100 øre.
        /// </summary>

        [JsonPropertyName("price")]
        [Range(0, int.MaxValue)]
        public int Price { get; set; }

        /// <summary>
        /// Product name (short)
        /// </summary>

        [JsonPropertyName("productName")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(45)]
        public string ProductName { get; set; }

        /// <summary>
        /// Product description (longer)
        /// </summary>

        [JsonPropertyName("productDescription")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(100)]
        public string ProductDescription { get; set; }

        /// <summary>
        /// Date and time when agreement was started, in ISO 8601 format.
        /// <br/>This is when the agreement was activated.
        /// </summary>

        [JsonPropertyName("start")]
        public System.DateTimeOffset? Start { get; set; }

        /// <summary>
        /// Date and time when agreement was stopped, in ISO 8601 format.
        /// </summary>

        [JsonPropertyName("stop")]
        public System.DateTimeOffset? Stop { get; set; }

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public AgreementStatus Status { get; set; }

        /// <summary>
        /// URL where we can send the customer to view/manage their
        /// <br/>subscription. Typically a "My page" where the user can change, pause, cancel, etc.
        /// <br/>The page must offer actual management, not just information about how to
        /// <br/>contact customer service, etc.
        /// <br/>We recommend letting users log in with Vipps MobilePay, not with username and password:
        /// <br/>https://developer.vippsmobilepay.com/docs/APIs/login-api
        /// <br/>We do not have any specific requirements for the security of the
        /// <br/>page other than requiring HTTPS.
        /// </summary>

        [JsonPropertyName("merchantAgreementUrl")]
        public string MerchantAgreementUrl { get; set; }

        /// <summary>
        /// User identifier (subject). Will be null if profile data was not requested.
        /// </summary>

        [JsonPropertyName("sub")]
        public string Sub { get; set; }

        /// <summary>
        /// The full path of the URL for the userinfo endpoint where the user data can be retrieved:
        /// <br/>[`GET:/vipps-userinfo-api/userinfo/{sub}`](/api/userinfo#operation/getUserinfo).
        /// <br/>This will be null if profile data was not requested.
        /// </summary>

        [JsonPropertyName("userinfoUrl")]
        public string UserinfoUrl { get; set; }

        [JsonPropertyName("variableAmount")]
        public VariableAmountResponseV2 VariableAmount { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AgreementResponseV3
    {

        [JsonPropertyName("campaign")]
        public CampaignResponseV3 Campaign { get; set; }

        [JsonPropertyName("pricing")]
        [Required]
        public PricingResponse Pricing { get; set; }

        /// <summary>
        /// Uniquely identifies this agreement
        /// </summary>

        [JsonPropertyName("id")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(36)]
        public string Id { get; set; }

        [JsonPropertyName("interval")]
        [Required]
        public TimePeriodResponse Interval { get; set; } = new TimePeriodResponse();

        /// <summary>
        /// Product name (short)
        /// </summary>

        [JsonPropertyName("productName")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(45)]
        public string ProductName { get; set; }

        /// <summary>
        /// Product description (longer)
        /// </summary>

        [JsonPropertyName("productDescription")]
        [StringLength(100)]
        public string ProductDescription { get; set; }

        /// <summary>
        /// Date when agreement was created, in ISO 8601 format.
        /// <br/>This is when the agreement was initiated with the API.
        /// </summary>

        [JsonPropertyName("created")]
        [Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Created { get; set; }

        /// <summary>
        /// Date and time when agreement was started, in ISO 8601 format.
        /// <br/>This is when the agreement was activated.
        /// </summary>

        [JsonPropertyName("start")]
        public System.DateTimeOffset? Start { get; set; }

        /// <summary>
        /// Date and time when agreement was stopped, in ISO 8601 format.
        /// </summary>

        [JsonPropertyName("stop")]
        public System.DateTimeOffset? Stop { get; set; }

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public AgreementStatus Status { get; set; }

        /// <summary>
        /// URL where we can send the customer to view/manage their
        /// <br/>subscription. Typically a "My page" where the user can change, pause, cancel, etc.
        /// <br/>The page must offer actual management, not just information about how to
        /// <br/>contact customer service, etc.
        /// <br/>We recommend letting users log in with Vipps MobilePay, not with username and password:
        /// <br/>https://developer.vippsmobilepay.com/docs/APIs/login-api
        /// <br/>We do not have any specific requirements for the security of the
        /// <br/>page other than requiring HTTPS.
        /// </summary>

        [JsonPropertyName("merchantAgreementUrl")]
        [Required(AllowEmptyStrings = true)]
        public string MerchantAgreementUrl { get; set; }

        /// <summary>
        /// URL where customer should be redirected after the agreement has been
        /// <br/>approved/rejected in the Vipps or MobilePay app. 
        /// <br/>HTTPS and deeplinks are allowed (example: myApp://home)
        /// </summary>

        [JsonPropertyName("merchantRedirectUrl")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(1024)]
        public string MerchantRedirectUrl { get; set; }

        /// <summary>
        /// User identifier (subject). Will be null if profile data was not requested.
        /// </summary>

        [JsonPropertyName("sub")]
        public string Sub { get; set; }

        /// <summary>
        /// The full path of the URL for the userinfo endpoint where the user data can be retrieved.:
        /// <br/>[`GET:/vipps-userinfo-api/userinfo/{sub}`](/api/userinfo#operation/getUserinfo).
        /// <br/>This will be null if profile data was not requested.
        /// </summary>

        [JsonPropertyName("userinfoUrl")]
        public string UserinfoUrl { get; set; }

        /// <summary>
        /// An optional external ID for the agreement.
        /// <br/>The `externalId` can be used by the merchant to map the `agreementId`
        /// <br/>to an ID in a subscription system or similar.
        /// </summary>

        [JsonPropertyName("externalId")]
        [StringLength(64, MinimumLength = 1)]
        [RegularExpression(@"^.{1,64}$")]
        public string ExternalId { get; set; }

        [JsonPropertyName("countryCode")]
        [Required(AllowEmptyStrings = true)]
        [RegularExpression(@"^[A-Z]{2}$")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public CountryCode CountryCode { get; set; }

        /// <summary>
        /// UUID (RFC 4122) representation of ID
        /// </summary>

        [JsonPropertyName("uuid")]
        [Required(AllowEmptyStrings = true)]
        [RegularExpression(@"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")]
        public System.Guid Uuid { get; set; }

        /// <summary>
        /// The `vippsConfirmationUrl` should be used to redirect the
        /// <br/>user to the Vipps MobilePay landing page in a desktop flow (with `https://`),
        /// <br/>or to the Vipps or MobilePay app in a mobile flow (with `vipps://`), where the
        /// <br/>user can then approve the agreement.
        /// </summary>

        [JsonPropertyName("vippsConfirmationUrl")]
        public string VippsConfirmationUrl { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchAgreementV2
    {
        /// <summary>
        /// The suggested max amount that the customer should choose.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>NOK: 1 kr = 100 øre.
        /// </summary>

        [JsonPropertyName("suggestedMaxAmount")]
        [Range(100, 2000000)]
        public int SuggestedMaxAmount { get; set; }

        [JsonPropertyName("campaign")]
        public CampaignV2 Campaign { get; set; }

        /// <summary>
        /// The price of the agreement.
        /// <br/>
        /// <br/>Price is specified in minor units.
        /// <br/>NOK: 1 kr = 100 øre.
        /// </summary>

        [JsonPropertyName("price")]
        [Range(0, int.MaxValue)]
        public int Price { get; set; }

        /// <summary>
        /// Product name (short)
        /// </summary>

        [JsonPropertyName("productName")]
        [StringLength(45)]
        public string ProductName { get; set; }

        /// <summary>
        /// Product description (longer)
        /// </summary>

        [JsonPropertyName("productDescription")]
        [StringLength(100)]
        public string ProductDescription { get; set; }

        /// <summary>
        /// URL where we can send the customer to view/manage their
        /// <br/>subscription. Typically a "My page" where the user can change, pause, cancel, etc.
        /// <br/>The page must offer actual management, not just information about how to
        /// <br/>contact customer service, etc.
        /// <br/>We recommend letting users log in with Vipps MobilePay, not with username and password:
        /// <br/>https://developer.vippsmobilepay.com/docs/APIs/login-api
        /// <br/>We do not have any specific requirements for the security of the
        /// <br/>page other than requiring HTTPS.
        /// </summary>

        [JsonPropertyName("merchantAgreementUrl")]
        [StringLength(1024)]
        public string MerchantAgreementUrl { get; set; }

        /// <summary>
        /// Status of the agreement.
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PatchAgreementV2Status Status { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchAgreementV3
    {
        /// <summary>
        /// Name of the product being subscribed to.
        /// </summary>

        [JsonPropertyName("productName")]
        [StringLength(45)]
        public string ProductName { get; set; }

        /// <summary>
        /// Product description (longer)
        /// </summary>

        [JsonPropertyName("productDescription")]
        [StringLength(100)]
        public string ProductDescription { get; set; }

        /// <summary>
        /// URL where we can send the customer to view/manage their
        /// <br/>subscription. Typically a "My page" where the user can change, pause, cancel, etc.
        /// <br/>The page must offer actual management, not just information about how to
        /// <br/>contact customer service, etc.
        /// <br/>We recommend letting users log in with Vipps MobilePay, not with username and password:
        /// <br/>https://developer.vippsmobilepay.com/docs/APIs/login-api
        /// <br/>We do not have any specific requirements for the security of the
        /// <br/>page other than requiring HTTPS.
        /// </summary>

        [JsonPropertyName("merchantAgreementUrl")]
        [StringLength(1024)]
        public string MerchantAgreementUrl { get; set; }

        /// <summary>
        /// An optional external ID for the agreement.
        /// <br/>The `externalId` can be used by the merchant to map the `agreementId`
        /// <br/>to an ID in a subscription system or similar.
        /// </summary>

        [JsonPropertyName("externalId")]
        [StringLength(64, MinimumLength = 1)]
        [RegularExpression(@"^.{1,64}$")]
        public string ExternalId { get; set; }

        /// <summary>
        /// Status of the agreement.
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PatchAgreementV3Status Status { get; set; }

        [JsonPropertyName("pricing")]
        public PricingUpdateRequest Pricing { get; set; }

        /// <summary>
        /// The interval of the agreement.
        /// <br/>
        /// <br/>The interval is specified by the `type` and `period` properties.
        /// <br/>When the type is `RECURRING`, then the property `period` is required.
        /// <br/>When the type is `FLEXIBLE`, then the property `period` is not allowed.
        /// </summary>

        [JsonPropertyName("interval")]
        public Interval2 Interval { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AgreementReference
    {
        /// <summary>
        /// Id of a an agreement which user may agree to.
        /// <br/>Initially the agreement is in a pending state waiting for user approval.
        /// <br/>It enters active state once the user has approved it in the Vipps or MobilePay app.
        /// </summary>

        [JsonPropertyName("agreementId")]
        [Required(AllowEmptyStrings = true)]
        public string AgreementId { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VariableAmountV2
    {
        /// <summary>
        /// The suggested max amount that the customer should choose.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>NOK and DKK: 1 kr = 100 øre. EUR: 1 Euro = 100 cent.
        /// </summary>

        [JsonPropertyName("suggestedMaxAmount")]
        [Range(100, 2000000)]
        public int SuggestedMaxAmount { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VariableAmountResponseV2
    {
        /// <summary>
        /// The suggested max amount that the customer should choose.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>NOK and DKK: 1 kr = 100 øre. EUR: 1 Euro = 100 cent.
        /// </summary>

        [JsonPropertyName("suggestedMaxAmount")]
        public int SuggestedMaxAmount { get; set; }

        /// <summary>
        /// The max amount chosen by the customer.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>NOK and DKK: 1 kr = 100 øre. EUR: 1 Euro = 100 cent.
        /// </summary>

        [JsonPropertyName("maxAmount")]
        public int MaxAmount { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CampaignV2
    {
        /// <summary>
        /// The price of the agreement in the discount period.
        /// <br/>The lowering of the price will be displayed in-app.
        /// <br/>Price is specified in minor units.
        /// <br/>NOK and DKK: 1 kr = 100 øre. EUR: 1 Euro = 100 cent.
        /// </summary>

        [JsonPropertyName("campaignPrice")]
        public int CampaignPrice { get; set; }

        /// <summary>
        /// The date and time the campaign ends.
        /// </summary>

        [JsonPropertyName("end")]
        [Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset End { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CampaignResponseV2
    {
        /// <summary>
        /// The price of the agreement in the discount period. The lowering of the price will be displayed in-app.
        /// <br/>Price is specified in minor units.
        /// <br/>NOK: 1 kr = 100 øre.
        /// </summary>

        [JsonPropertyName("campaignPrice")]
        public int CampaignPrice { get; set; }

        /// <summary>
        /// The date and time the campaign starts. Must be UTC.
        /// </summary>

        [JsonPropertyName("start")]
        public System.DateTimeOffset Start { get; set; }

        /// <summary>
        /// The date and time the campaign ends.
        /// <br/>This is a required field when using `EVENT_CAMPAIGN`.
        /// <br/>Must be UTC.
        /// </summary>

        [JsonPropertyName("end")]
        public System.DateTimeOffset End { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CampaignV3
    {

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PriceCampaignV3
    {
        /// <summary>
        /// The type of campaign. This decides which properties are required
        /// </summary>

        [JsonPropertyName("type")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PriceCampaignV3Type Type { get; set; }

        /// <summary>
        /// The price of the agreement in the discount period. The lowering of the price will be displayed in-app.
        /// <br/>
        /// <br/>Price is specified in minor units.
        /// <br/>NOK and DKK: 1 kr = 100 øre. EUR: 1 Euro = 100 cent.
        /// </summary>

        [JsonPropertyName("price")]
        public int Price { get; set; }

        /// <summary>
        /// The date and time the campaign ends.
        /// <br/>Needs to be UTC.
        /// </summary>

        [JsonPropertyName("end")]
        [Required(AllowEmptyStrings = true)]
        public string End { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PeriodCampaignV3
    {
        /// <summary>
        /// The type of campaign. This decides which properties are required
        /// </summary>

        [JsonPropertyName("type")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PeriodCampaignV3Type Type { get; set; }

        /// <summary>
        /// The price of the agreement in the discount period. The lowering of the price will be displayed in-app.
        /// <br/>
        /// <br/>Price is specified in minor units.
        /// <br/>NOK and DKK: 1 kr = 100 øre. EUR: 1 Euro = 100 cent.
        /// </summary>

        [JsonPropertyName("price")]
        public int Price { get; set; }

        [JsonPropertyName("period")]
        [Required]
        public TimePeriod Period { get; set; } = new TimePeriod();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EventCampaignV3
    {
        /// <summary>
        /// The type of campaign. This decides which properties are required
        /// </summary>

        [JsonPropertyName("type")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public EventCampaignV3Type Type { get; set; }

        /// <summary>
        /// The price of the agreement in the discount period. The lowering of the price will be displayed in-app.
        /// <br/>
        /// <br/>Price is specified in minor units.
        /// <br/>NOK and DKK: 1 kr = 100 øre. EUR: 1 Euro = 100 cent.
        /// </summary>

        [JsonPropertyName("price")]
        public int Price { get; set; }

        /// <summary>
        /// The date and time the campaign ends. Must be UTC.
        /// </summary>

        [JsonPropertyName("eventDate")]
        [Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset EventDate { get; set; }

        /// <summary>
        /// A short text that describes the event
        /// </summary>

        [JsonPropertyName("eventText")]
        [Required(AllowEmptyStrings = true)]
        public string EventText { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CampaignResponseV3
    {

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PeriodCampaignResponseV3
    {
        /// <summary>
        /// The type of campaign. This decides which properties are required
        /// </summary>

        [JsonPropertyName("type")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PeriodCampaignResponseV3Type Type { get; set; }

        /// <summary>
        /// The price of the agreement in the discount period. The lowering of the price will be displayed in-app.
        /// <br/>
        /// <br/>Price is specified in minor units.
        /// <br/>NOK and DKK: 1 kr = 100 øre. EUR: 1 Euro = 100 cent.
        /// </summary>

        [JsonPropertyName("price")]
        public int Price { get; set; }

        /// <summary>
        /// The date and time the campaign ends.
        /// <br/>Needs to be UTC.
        /// </summary>

        [JsonPropertyName("end")]
        [Required(AllowEmptyStrings = true)]
        public string End { get; set; }

        [JsonPropertyName("period")]
        [Required]
        public TimePeriod Period { get; set; } = new TimePeriod();

        /// <summary>
        /// The text displayed in the Vipps or MobilePay app to explain the campaign to the user
        /// </summary>

        [JsonPropertyName("explanation")]
        public string Explanation { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EventCampaignResponseV3
    {
        /// <summary>
        /// The type of campaign. This decides which properties are required
        /// </summary>

        [JsonPropertyName("type")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public EventCampaignResponseV3Type Type { get; set; }

        /// <summary>
        /// The price of the agreement in the discount period. The lowering of the price will be displayed in-app.
        /// <br/>
        /// <br/>Price is specified in minor units.
        /// <br/>NOK and DKK: 1 kr = 100 øre. EUR: 1 Euro = 100 cent.
        /// </summary>

        [JsonPropertyName("price")]
        public int Price { get; set; }

        /// <summary>
        /// The date and time the campaign ends. Must be UTC.
        /// </summary>

        [JsonPropertyName("eventDate")]
        [Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset EventDate { get; set; }

        /// <summary>
        /// A short text that describes the event
        /// </summary>

        [JsonPropertyName("eventText")]
        [Required(AllowEmptyStrings = true)]
        public string EventText { get; set; }

        /// <summary>
        /// The text displayed in the Vipps or MobilePay app to explain the campaign to the user
        /// </summary>

        [JsonPropertyName("explanation")]
        public string Explanation { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LegacyCampaignResponseV3
    {
        /// <summary>
        /// The type of campaign. This decides which properties are required
        /// </summary>

        [JsonPropertyName("type")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public LegacyCampaignResponseV3Type Type { get; set; }

        /// <summary>
        /// The price of the agreement in the discount period. The lowering of the price will be displayed in-app.
        /// <br/>
        /// <br/>Price is specified in minor units.
        /// <br/>NOK and DKK: 1 kr = 100 øre. EUR: 1 Euro = 100 cent.
        /// </summary>

        [JsonPropertyName("price")]
        public int Price { get; set; }

        /// <summary>
        /// The date and time the campaign ends.
        /// <br/>Needs to be UTC.
        /// </summary>

        [JsonPropertyName("end")]
        [Required(AllowEmptyStrings = true)]
        public string End { get; set; }

        /// <summary>
        /// The text displayed in the Vipps or MobilePay app to explain the campaign to the user
        /// </summary>

        [JsonPropertyName("explanation")]
        public string Explanation { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PricingRequest
    {
        /// <summary>
        /// The type of pricing. This decides which properties are required.
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PricingRequestType Type { get; set; } = Vipps.net.Models.Recurring.PricingRequestType.LEGACY;

        [JsonPropertyName("currency")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(3, MinimumLength = 3)]
        [RegularExpression(@"^[A-Z]{3}$")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public CurrencyV3 Currency { get; set; }

        /// <summary>
        /// The price of the agreement, required if type is LEGACY or not present.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>NOK and DKK: 1 kr = 100 øre. EUR: 1 Euro = 100 cent.
        /// </summary>

        [JsonPropertyName("amount")]
        [Range(100, int.MaxValue)]
        public int Amount { get; set; }

        /// <summary>
        /// The suggested max amount that the customer should choose, required if type is VARIABLE.
        /// <br/>There are limits for each currency:
        /// <br/>- NOK: 20 000 kr (2000000 øre)
        /// <br/>- DKK: 300 000 kr (30000000 øre)
        /// <br/>- EUR: 2 000 Euro (200000 cent)
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>NOK and DKK: 1 kr = 100 øre. EUR: 1 Euro = 100 cent.
        /// </summary>

        [JsonPropertyName("suggestedMaxAmount")]
        [Range(100, int.MaxValue)]
        public int SuggestedMaxAmount { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PricingResponse
    {

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VariableAmountPricingResponse
    {
        /// <summary>
        /// The type of pricing. This decides which properties are present.
        /// </summary>

        [JsonPropertyName("type")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public VariableAmountPricingResponseType Type { get; set; }

        [JsonPropertyName("currency")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(3, MinimumLength = 3)]
        [RegularExpression(@"^[A-Z]{3}$")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public CurrencyV3 Currency { get; set; }

        /// <summary>
        /// The suggested max amount that the customer should choose, present if type is VARIABLE.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>NOK and DKK: 1 kr = 100 øre. EUR: 1 Euro = 100 cent.
        /// </summary>

        [JsonPropertyName("suggestedMaxAmount")]
        public int SuggestedMaxAmount { get; set; }

        /// <summary>
        /// The max amount chosen by the customer.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>NOK and DKK: 1 kr = 100 øre. EUR: 1 Euro = 100 cent.       
        /// </summary>

        [JsonPropertyName("maxAmount")]
        public int MaxAmount { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PricingUpdateRequest
    {
        /// <summary>
        /// The price of the agreement, can only be updated if agreement type is LEGACY
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>NOK and DKK: 1 kr = 100 øre. EUR: 1 Euro = 100 cent.
        /// </summary>

        [JsonPropertyName("amount")]
        [Range(100, int.MaxValue)]
        public int Amount { get; set; }

        /// <summary>
        /// The suggested max amount that the customer should choose, required if type is VARIABLE.
        /// <br/>There are limits for each currency:
        /// <br/>- NOK: 20 000 kr (2000000 øre)
        /// <br/>- DKK: 300 000 kr (30000000 øre)
        /// <br/>- EUR: 2 000 Euro (200000 cent)
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>NOK and DKK: 1 kr = 100 øre. EUR: 1 Euro = 100 cent.
        /// </summary>

        [JsonPropertyName("suggestedMaxAmount")]
        [Range(100, int.MaxValue)]
        public int SuggestedMaxAmount { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An initial charge for a new agreement.
    /// <br/>The charge will be processed immediately when the user approves the agreement.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InitialChargeV2
    {
        /// <summary>
        /// The amount that must be paid or approved before starting the agreement.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>NOK: 1 kr = 100 øre.
        /// </summary>

        [JsonPropertyName("amount")]
        public int Amount { get; set; }

        [JsonPropertyName("currency")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(3, MinimumLength = 3)]
        [RegularExpression(@"^[A-Z]{3}$")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public Currency Currency { get; set; }

        /// <summary>
        /// This field is visible to the end user in-app
        /// </summary>

        [JsonPropertyName("description")]
        [Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>
        /// The type of payment to be made.
        /// </summary>

        [JsonPropertyName("transactionType")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public InitialChargeV2TransactionType TransactionType { get; set; }

        /// <summary>
        /// An optional, but recommended `orderId` for the charge.
        /// <br/>If provided, this will be the `chargeId` for this charge.
        /// <br/>See: https://developer.vippsmobilepay.com/docs/knowledge-base/orderid/
        /// <br/>If no `orderId` is specified, the `chargeId` will be automatically generated.
        /// </summary>

        [JsonPropertyName("orderId")]
        public string OrderId { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An initial charge for a new agreement.
    /// <br/>The charge will be processed immediately when the user approves the agreement.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InitialChargeV3
    {
        /// <summary>
        /// The amount that must be paid or approved before starting the agreement.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>NOK and DKK: 1 kr = 100 øre. EUR: 1 Euro = 100 cent.
        /// </summary>

        [JsonPropertyName("amount")]
        public int Amount { get; set; }

        /// <summary>
        /// This field is visible to the end user in-app
        /// </summary>

        [JsonPropertyName("description")]
        [Required]
        [StringLength(100, MinimumLength = 1)]
        public string Description { get; set; }

        /// <summary>
        /// The type of payment to be made.
        /// </summary>

        [JsonPropertyName("transactionType")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public InitialChargeV3TransactionType TransactionType { get; set; }

        /// <summary>
        /// An optional, but recommended `orderId` for the charge.
        /// <br/>If provided, this will be the `chargeId` for this charge.
        /// <br/>See: https://developer.vippsmobilepay.com/docs/knowledge-base/orderid/
        /// <br/>If no `orderId` is specified, the `chargeId` will be automatically generated.
        /// </summary>

        [JsonPropertyName("orderId")]
        public string OrderId { get; set; }

        /// <summary>
        /// An optional external ID for the charge
        /// <br/>The `externalId` can be used by the merchant to map the `chargeId`
        /// <br/>to an ID in a subscription system or similar.
        /// </summary>

        [JsonPropertyName("externalId")]
        [StringLength(64, MinimumLength = 1)]
        [RegularExpression(@"^.{1,64}$")]
        public string ExternalId { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateChargeV2
    {
        /// <summary>
        /// Amount to be paid by the customer.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>NOK: 1 kr = 100 øre.
        /// </summary>

        [JsonPropertyName("amount")]
        [Range(100, int.MaxValue)]
        public int Amount { get; set; }

        [JsonPropertyName("currency")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(3, MinimumLength = 3)]
        [RegularExpression(@"^[A-Z]{3}$")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public Currency Currency { get; set; }

        /// <summary>
        /// This field is visible to the end user in-app
        /// </summary>

        [JsonPropertyName("description")]
        [Required]
        [StringLength(45, MinimumLength = 1)]
        public string Description { get; set; }

        /// <summary>
        /// The date when the charge is due to be processed.
        /// <br/>Must be in the format `YYYY-MM-DD` and ISO 8601.
        /// </summary>

        [JsonPropertyName("due")]
        [Required(AllowEmptyStrings = true)]
        public string Due { get; set; }

        /// <summary>
        /// The service will attempt to charge the customer for the number of days
        /// <br/>specified in `retryDays` after the `due` date.
        /// <br/>We recommend at least two days retry.
        /// </summary>

        [JsonPropertyName("retryDays")]
        [Range(0, 14)]
        public int RetryDays { get; set; }

        /// <summary>
        /// An optional, but recommended `orderId` for the charge.
        /// <br/>If provided, this will be the `chargeId` for this charge.
        /// <br/>See: https://developer.vippsmobilepay.com/docs/knowledge-base/orderid/
        /// <br/>If no `orderId` is specified, the `chargeId` will be automatically generated.
        /// </summary>

        [JsonPropertyName("orderId")]
        [StringLength(50)]
        [RegularExpression(@"^[a-zA-Z\d-]+")]
        public string OrderId { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateChargeV3
    {
        /// <summary>
        /// Amount to be paid by the customer.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>NOK and DKK: 1 kr = 100 øre. EUR: 1 Euro = 100 cent.
        /// </summary>

        [JsonPropertyName("amount")]
        [Range(100, int.MaxValue)]
        public int Amount { get; set; }

        [JsonPropertyName("transactionType")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public TransactionType TransactionType { get; set; }

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ChargeCreationTypeV3 Type { get; set; }

        /// <summary>
        /// This field is visible to the end user in-app
        /// </summary>

        [JsonPropertyName("description")]
        [Required]
        [StringLength(100, MinimumLength = 1)]
        public string Description { get; set; }

        /// <summary>
        /// The date when the charge is due to be processed.
        /// <br/>
        /// <br/>Must be at least two days in advance in the production environment,
        /// <br/>and at least one day in the test environment.
        /// <br/>
        /// <br/>If the charge is `DIRECT_CAPTURE`, the charge is processed and charged on the `due` date.
        /// <br/>If the charge is `RESERVE_CAPTURE`, the charge is `RESERVED` on `due` date.
        /// <br/>
        /// <br/>Must be in the format `YYYY-MM-DD` and ISO 8601.
        /// <br/>
        /// <br/>Required only for `RECURRING` charges
        /// </summary>

        [JsonPropertyName("due")]
        public string Due { get; set; }

        /// <summary>
        /// The service will attempt to charge the customer for the number of days
        /// <br/>specified in `retryDays` after the `due` date.
        /// <br/>We recommend at least two days retry.
        /// <br/>
        /// <br/>Required only for `RECURRING` charges
        /// </summary>

        [JsonPropertyName("retryDays")]
        [Range(0, 14)]
        public int RetryDays { get; set; }

        /// <summary>
        /// An optional, but recommended `orderId` for the charge.
        /// <br/>If provided, this will be the `chargeId` for this charge.
        /// <br/>This is the unique identifier of the payment, from the payment is initiated and all the way to the settlement data.
        /// <br/>See: https://developer.vippsmobilepay.com/docs/knowledge-base/orderid/
        /// <br/>If no `orderId` is specified, the `chargeId` will be automatically generated.
        /// </summary>

        [JsonPropertyName("orderId")]
        [StringLength(50, MinimumLength = 1)]
        [RegularExpression(@"^[a-zA-Z\d-]+")]
        public string OrderId { get; set; }

        /// <summary>
        /// An optional external ID for the charge, that takes the place of the `orderId` in settlement reports without overriding the default `chargeId`
        /// <br/>The `externalId` can be used by the merchant to map the `chargeId` to an ID in a subscription system or similar.
        /// <br/>Note that while `orderId` must be unique per merchant, `externalId` does not have this limitation, 
        /// <br/>so you need to avoid assigning the same `externalId` to multiple charges if you want to keep them separate in settlement reports.
        /// </summary>

        [JsonPropertyName("externalId")]
        [StringLength(64, MinimumLength = 1)]
        [RegularExpression(@"^.{1,64}$")]
        public string ExternalId { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateChargeAsyncV3
    {
        /// <summary>
        /// Id of a an agreement which user may agree to.
        /// <br/>Initially the agreement is in a pending state waiting for user approval.
        /// <br/>It enters active state once the user has approved it in the Vipps or MobilePay app
        /// </summary>

        [JsonPropertyName("agreementId")]
        [Required(AllowEmptyStrings = true)]
        public string AgreementId { get; set; }

        /// <summary>
        /// Amount to be paid by the customer.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>NOK and DKK: 1 kr = 100 øre. EUR: 1 Euro = 100 cent.
        /// </summary>

        [JsonPropertyName("amount")]
        [Range(100, int.MaxValue)]
        public int Amount { get; set; }

        [JsonPropertyName("transactionType")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public TransactionType TransactionType { get; set; }

        /// <summary>
        /// This field is visible to the end user in-app
        /// </summary>

        [JsonPropertyName("description")]
        [Required]
        [StringLength(100, MinimumLength = 1)]
        public string Description { get; set; }

        /// <summary>
        /// The date when the charge is due to be processed.
        /// <br/>
        /// <br/>Must be at least two days in advance in the production environment,
        /// <br/>and at least one day in the test environment.
        /// <br/>
        /// <br/>If the charge is `DIRECT_CAPTURE`, the charge is processed and charged on the `due` date.
        /// <br/>If the charge is `RESERVE_CAPTURE`, the charge is `RESERVED` on `due` date.
        /// <br/>
        /// <br/>Must be in the format `YYYY-MM-DD` and ISO 8601.
        /// </summary>

        [JsonPropertyName("due")]
        [Required(AllowEmptyStrings = true)]
        public string Due { get; set; }

        /// <summary>
        /// The service will attempt to charge the customer for the number of days
        /// <br/>specified in `retryDays` after the `due` date.
        /// <br/>We recommend at least two days retry.
        /// </summary>

        [JsonPropertyName("retryDays")]
        [Range(0, 14)]
        public int RetryDays { get; set; }

        /// <summary>
        /// This will be the `chargeId` for this charge.
        /// <br/>This is the unique identifier of the payment, from the payment is initiated and all the way to the settlement data.
        /// <br/>See: https://developer.vippsmobilepay.com/docs/knowledge-base/orderid/
        /// </summary>

        [JsonPropertyName("orderId")]
        [Required]
        [StringLength(50, MinimumLength = 1)]
        [RegularExpression(@"^[a-zA-Z\d-]+")]
        public string OrderId { get; set; }

        /// <summary>
        /// An optional external ID for the charge, that takes the place of the `orderId` in settlement reports without overriding the default `chargeId`
        /// <br/>The `externalId` can be used by the merchant to map the `chargeId` to an ID in a subscription system or similar.
        /// <br/>Note that while `orderId` must be unique per merchant, `externalId` does not have this limitation, 
        /// <br/>so you need to avoid assigning the same `externalId` to multiple charges if you want to keep them separate in settlement reports.
        /// </summary>

        [JsonPropertyName("externalId")]
        [StringLength(64, MinimumLength = 1)]
        [RegularExpression(@"^.{1,64}$")]
        public string ExternalId { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AsyncChargeResponse
    {

        [JsonPropertyName("invalidCharges")]
        [Required]
        public ICollection<InvalidChargeResponse> InvalidCharges { get; set; } = new Collection<InvalidChargeResponse>();

        [JsonPropertyName("validCharges")]
        [Required]
        public ICollection<string> ValidCharges { get; set; } = new Collection<string>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvalidChargeResponse
    {

        [JsonPropertyName("chargeBatchItemDto")]
        [Required]
        public ChargeBatchItemDto ChargeBatchItemDto { get; set; } = new ChargeBatchItemDto();

        [JsonPropertyName("errors")]
        [Required]
        public ICollection<string> Errors { get; set; } = new Collection<string>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChargeBatchItemDto
    {

        [JsonPropertyName("due")]
        [Required(AllowEmptyStrings = true)]
        public string Due { get; set; }

        [JsonPropertyName("retryDays")]
        public int RetryDays { get; set; }

        [JsonPropertyName("amount")]
        public int Amount { get; set; }

        [JsonPropertyName("description")]
        [Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        [JsonPropertyName("transactionType")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ChargeBatchItemDtoTransactionType TransactionType { get; set; }

        [JsonPropertyName("orderId")]
        [Required]
        [StringLength(50, MinimumLength = 1)]
        [RegularExpression(@"^[a-zA-Z\d-]+")]
        public string OrderId { get; set; }

        [JsonPropertyName("agreementId")]
        public string AgreementId { get; set; }

        [JsonPropertyName("externalId")]
        public string ExternalId { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChargeReference
    {
        /// <summary>
        /// Unique identifier for this charge, up to 15 characters.
        /// </summary>

        [JsonPropertyName("chargeId")]
        [StringLength(15)]
        public string ChargeId { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChargeResponseV2
    {
        /// <summary>
        /// Amount to be paid by the customer.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>NOK: 1 kr = 100 øre.
        /// </summary>

        [JsonPropertyName("amount")]
        public int Amount { get; set; }

        /// <summary>
        /// The total amount which has been refunded, in case of status refund/partial refund.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>NOK: 1 kr = 100 øre.
        /// </summary>

        [JsonPropertyName("amountRefunded")]
        public int AmountRefunded { get; set; }

        /// <summary>
        /// Description of the charge.
        /// </summary>

        [JsonPropertyName("description")]
        [Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>
        /// The due date for this charge.
        /// </summary>

        [JsonPropertyName("due")]
        [Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Due { get; set; }

        /// <summary>
        /// Identifier for this charge (for this customer's subscription).
        /// </summary>

        [JsonPropertyName("id")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(15)]
        public string Id { get; set; }

        [JsonPropertyName("status")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ChargeStatus Status { get; set; }

        /// <summary>
        /// Contains null until the status has reached CHARGED.
        /// </summary>

        [JsonPropertyName("transactionId")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(36)]
        [RegularExpression(@"^\d{10+}$")]
        public string TransactionId { get; set; }

        [JsonPropertyName("type")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ChargeTypeV2 Type { get; set; }

        /// <summary>
        /// Identifies the reason why the charged has been marked as `FAILED`:
        /// <br/>  * `user_action_required` - The user's card can not fulfil the payment. The user needs to take action in the app.
        /// <br/>     Examples: Card is blocked for ecommerce, insufficient funds, expired card.
        /// <br/>
        /// <br/>  * `charge_amount_too_high` - The user's max amount is too low. The user needs to update their max amount in the Vipps or MobilePay app.
        /// <br/>
        /// <br/>  * `non_technical_error` - Something went wrong with charging the user.
        /// <br/>     Examples: User has deleted their Vipps MobilePay Profile.
        /// <br/>
        /// <br/>  * `technical_error` - Something went wrong in Recurring while performing the payment.
        /// <br/>     Examples: Failure in Recurring, failure in downstream services.
        /// <br/>
        /// </summary>

        [JsonPropertyName("failureReason")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ChargeResponseV2FailureReason FailureReason { get; set; }

        /// <summary>
        /// Description for the failure reason.
        /// </summary>

        [JsonPropertyName("failureDescription")]
        public string FailureDescription { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChargeResponseV3
    {
        /// <summary>
        /// Amount to be paid by the customer.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>NOK and DKK: 1 kr = 100 øre. EUR: 1 Euro = 100 cent.
        /// </summary>

        [JsonPropertyName("amount")]
        public int Amount { get; set; }

        [JsonPropertyName("currency")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(3, MinimumLength = 3)]
        [RegularExpression(@"^[A-Z]{3}$")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public CurrencyV3 Currency { get; set; }

        /// <summary>
        /// Description of the charge
        /// </summary>

        [JsonPropertyName("description")]
        [Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>
        /// The due date for this charge
        /// </summary>

        [JsonPropertyName("due")]
        [Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Due { get; set; }

        /// <summary>
        /// Identifier for this charge (for this customer's subscription).
        /// </summary>

        [JsonPropertyName("id")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(15)]
        public string Id { get; set; }

        /// <summary>
        /// Id of the agreement the charge belongs to
        /// </summary>

        [JsonPropertyName("agreementId")]
        [Required(AllowEmptyStrings = true)]
        public string AgreementId { get; set; }

        /// <summary>
        /// An optional external ID for the charge
        /// <br/>The `externalId` can be used by the merchant to map the `chargeId`
        /// <br/>to an ID in a subscription system or similar.
        /// </summary>

        [JsonPropertyName("externalId")]
        [Required]
        [StringLength(64, MinimumLength = 1)]
        [RegularExpression(@"^.{1,64}$")]
        public string ExternalId { get; set; }

        /// <summary>
        /// An optional external ID for the agreement
        /// <br/>The `externalId` can be used by the merchant to map the `agreementId`
        /// <br/>to an ID in a subscription system or similar.
        /// </summary>

        [JsonPropertyName("externalAgreementId")]
        [StringLength(64, MinimumLength = 1)]
        [RegularExpression(@"^.{1,64}$")]
        public string ExternalAgreementId { get; set; }

        /// <summary>
        /// The service will attempt to charge the customer for the number of days
        /// <br/>specified in `retryDays` after the `due` date.
        /// <br/>We recommend at least two days retry.
        /// </summary>

        [JsonPropertyName("retryDays")]
        [Range(0, 14)]
        public int RetryDays { get; set; }

        [JsonPropertyName("status")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ChargeStatus Status { get; set; }

        /// <summary>
        /// Contains null until the status has reached CHARGED
        /// </summary>

        [JsonPropertyName("transactionId")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(36)]
        [RegularExpression(@"^\d{10+}$")]
        public string TransactionId { get; set; }

        [JsonPropertyName("type")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ChargeTypeV3 Type { get; set; }

        [JsonPropertyName("transactionType")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public TransactionType TransactionType { get; set; }

        /// <summary>
        /// Identifies the reason why the charged has been marked as `FAILED`:
        /// <br/>  * `user_action_required` - The user's card can not fulfil the payment, user needs to take action in the Vipps or MobilePay app.
        /// <br/>     Examples: Card is blocked for ecommerce, insufficient funds, expired card.
        /// <br/>
        /// <br/>  * `charge_amount_too_high` - The user's max amount is too low, user needs to update their max amount in the Vipps or MobilePay app.
        /// <br/>
        /// <br/>  * `non_technical_error` - Something went wrong with charging the user.
        /// <br/>     Examples: User has deleted their Vipps MobilePay Profile.
        /// <br/>
        /// <br/>  * `technical_error` - Something went wrong in Recurring while performing the payment.
        /// <br/>     Examples: Failure in Recurring, failure in downstream services.
        /// <br/>
        /// </summary>

        [JsonPropertyName("failureReason")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ChargeResponseV3FailureReason? FailureReason { get; set; }

        /// <summary>
        /// Description for the failure reason
        /// </summary>

        [JsonPropertyName("failureDescription")]
        public string FailureDescription { get; set; }

        [JsonPropertyName("summary")]
        [Required]
        public ChargeSummary Summary { get; set; } = new ChargeSummary();

        [JsonPropertyName("history")]
        [Required]
        public ChargeHistory History { get; set; } = new ChargeHistory();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefundRequest
    {
        /// <summary>
        /// The amount to refund on a captured/charged charge.
        /// <br/>
        /// <br/>Amounts are specified in minor units.
        /// <br/>NOK and DKK: 1 kr = 100 øre. EUR: 1 Euro = 100 cent.
        /// </summary>

        [JsonPropertyName("amount")]
        [Range(100, int.MaxValue)]
        public int Amount { get; set; }

        /// <summary>
        /// A textual description of the operation, which will be displayed in the user's app.
        /// </summary>

        [JsonPropertyName("description")]
        [Required]
        public string Description { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaptureRequestV3
    {
        /// <summary>
        /// The amount to capture on a reserved charge.
        /// <br/>Amounts are specified in minor units.
        /// <br/>NOK and DKK: 1 kr = 100 øre. EUR: 1 Euro = 100 cent.
        /// </summary>

        [JsonPropertyName("amount")]
        [Range(100, int.MaxValue)]
        public int Amount { get; set; }

        /// <summary>
        /// Deprecated. Description in CreateChargeV3 is used instead.
        /// </summary>

        [JsonPropertyName("description")]
        [StringLength(100, MinimumLength = 1)]
        [System.Obsolete]
        public string Description { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A period of time, defined by a unit (DAY, WEEK, ...) and a count (number of said units)
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimePeriod
    {
        /// <summary>
        /// Unit for time period
        /// </summary>

        [JsonPropertyName("unit")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public TimePeriodUnit Unit { get; set; }

        /// <summary>
        /// Number of units in the time period. Example: unit=week, count=2 to define two weeks
        /// </summary>

        [JsonPropertyName("count")]
        [Range(1, 31)]
        public int Count { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A period of time, defined by a unit (DAY, WEEK, ...) and a count (number of said units)
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimePeriodResponse
    {
        /// <summary>
        /// Unit for time period
        /// </summary>

        [JsonPropertyName("unit")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public TimePeriodResponseUnit Unit { get; set; }

        /// <summary>
        /// Number of units in the time period. Example: unit=week, count=2 to define two weeks
        /// </summary>

        [JsonPropertyName("count")]
        public int Count { get; set; }

        /// <summary>
        /// Textual representation used in Vipps MobilePay to describe the time period
        /// </summary>

        [JsonPropertyName("text")]
        public string Text { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ForceAcceptAgreement
    {

        [JsonPropertyName("customerPhoneNumber")]
        [Required(AllowEmptyStrings = true)]
        public string CustomerPhoneNumber { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ForceAcceptAgreementV3
    {

        [JsonPropertyName("phoneNumber")]
        [Required(AllowEmptyStrings = true)]
        public string PhoneNumber { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An error from Microsoft Azure. We have limited control of these errors,
    /// <br/>and can not give as detailed information as with the errors from our own code.
    /// <br/>The most important property is the HTTP status code.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorFromAzure
    {

        [JsonPropertyName("responseInfo")]
        [Required]
        public ResponseInfo ResponseInfo { get; set; } = new ResponseInfo();

        [JsonPropertyName("result")]
        [Required]
        public Result Result { get; set; } = new Result();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An error from Vipps MobilePay.
    /// <br/>The most important property is the HTTP status code.
    /// <br/>The response body contains more details of the error.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorV2
    {
        /// <summary>
        /// Field that caused the error
        /// </summary>

        [JsonPropertyName("field")]
        public string Field { get; set; }

        /// <summary>
        /// The error message
        /// </summary>

        [JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// The code for the specific error
        /// </summary>

        [JsonPropertyName("code")]
        public string Code { get; set; }

        /// <summary>
        /// A unique ID for this error, useful for searching in logs
        /// </summary>

        [JsonPropertyName("contextId")]
        public string ContextId { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorArray : Collection<ErrorV2>
    {

    }

    /// <summary>
    /// Error response using the Problem JSON format
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorV3
    {
        /// <summary>
        /// Path to type of error
        /// </summary>

        [JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Short description of the error
        /// </summary>

        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// HTTP status returned with the problem
        /// </summary>

        [JsonPropertyName("status")]
        public int Status { get; set; }

        /// <summary>
        /// Details about the error
        /// </summary>

        [JsonPropertyName("detail")]
        public string Detail { get; set; }

        /// <summary>
        /// The path of the request
        /// </summary>

        [JsonPropertyName("instance")]
        public string Instance { get; set; }

        /// <summary>
        /// An unique ID for the request
        /// </summary>

        [JsonPropertyName("contextId")]
        public string ContextId { get; set; }

        [JsonPropertyName("extraDetails")]
        public ExtraDetails ExtraDetails { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// extra details about the error
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExtraDetails
    {
        /// <summary>
        /// Name of the field related to the error
        /// </summary>

        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Details about the error
        /// </summary>

        [JsonPropertyName("reason")]
        public string Reason { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChargeEventEvent
    {

        [EnumMember(Value = @"CREATE")]
        CREATE = 0,

        [EnumMember(Value = @"RESERVE")]
        RESERVE = 1,

        [EnumMember(Value = @"CAPTURE")]
        CAPTURE = 2,

        [EnumMember(Value = @"REFUND")]
        REFUND = 3,

        [EnumMember(Value = @"CANCEL")]
        CANCEL = 4,

        [EnumMember(Value = @"FAIL")]
        FAIL = 5,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PatchAgreementV2Status
    {

        [EnumMember(Value = @"STOPPED")]
        STOPPED = 0,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PatchAgreementV3Status
    {

        [EnumMember(Value = @"STOPPED")]
        STOPPED = 0,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Interval2
    {

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public Interval2Type Type { get; set; } = Vipps.net.Models.Recurring.Interval2Type.RECURRING;

        [JsonPropertyName("period")]
        public TimePeriod Period { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PriceCampaignV3Type
    {

        [EnumMember(Value = @"PRICE_CAMPAIGN")]
        PRICE_CAMPAIGN = 0,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PeriodCampaignV3Type
    {

        [EnumMember(Value = @"PERIOD_CAMPAIGN")]
        PERIOD_CAMPAIGN = 0,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EventCampaignV3Type
    {

        [EnumMember(Value = @"EVENT_CAMPAIGN")]
        EVENT_CAMPAIGN = 0,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CampaignResponseV3Type
    {

        [EnumMember(Value = @"PRICE_CAMPAIGN")]
        PRICE_CAMPAIGN = 0,

        [EnumMember(Value = @"PERIOD_CAMPAIGN")]
        PERIOD_CAMPAIGN = 1,

        [EnumMember(Value = @"EVENT_CAMPAIGN")]
        EVENT_CAMPAIGN = 2,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PeriodCampaignResponseV3Type
    {

        [EnumMember(Value = @"PRICE_CAMPAIGN")]
        PRICE_CAMPAIGN = 0,

        [EnumMember(Value = @"PERIOD_CAMPAIGN")]
        PERIOD_CAMPAIGN = 1,

        [EnumMember(Value = @"EVENT_CAMPAIGN")]
        EVENT_CAMPAIGN = 2,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EventCampaignResponseV3Type
    {

        [EnumMember(Value = @"PRICE_CAMPAIGN")]
        PRICE_CAMPAIGN = 0,

        [EnumMember(Value = @"PERIOD_CAMPAIGN")]
        PERIOD_CAMPAIGN = 1,

        [EnumMember(Value = @"EVENT_CAMPAIGN")]
        EVENT_CAMPAIGN = 2,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LegacyCampaignResponseV3Type
    {

        [EnumMember(Value = @"PRICE_CAMPAIGN")]
        PRICE_CAMPAIGN = 0,

        [EnumMember(Value = @"PERIOD_CAMPAIGN")]
        PERIOD_CAMPAIGN = 1,

        [EnumMember(Value = @"EVENT_CAMPAIGN")]
        EVENT_CAMPAIGN = 2,

        [EnumMember(Value = @"LEGACY_CAMPAIGN")]
        LEGACY_CAMPAIGN = 3,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PricingRequestType
    {

        [EnumMember(Value = @"LEGACY")]
        LEGACY = 0,

        [EnumMember(Value = @"VARIABLE")]
        VARIABLE = 1,

        [EnumMember(Value = @"FLEXIBLE")]
        FLEXIBLE = 2,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PricingResponseType
    {

        [EnumMember(Value = @"LEGACY")]
        LEGACY = 0,

        [EnumMember(Value = @"VARIABLE")]
        VARIABLE = 1,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VariableAmountPricingResponseType
    {

        [EnumMember(Value = @"LEGACY")]
        LEGACY = 0,

        [EnumMember(Value = @"VARIABLE")]
        VARIABLE = 1,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InitialChargeV2TransactionType
    {

        [EnumMember(Value = @"RESERVE_CAPTURE")]
        RESERVE_CAPTURE = 0,

        [EnumMember(Value = @"DIRECT_CAPTURE")]
        DIRECT_CAPTURE = 1,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InitialChargeV3TransactionType
    {

        [EnumMember(Value = @"RESERVE_CAPTURE")]
        RESERVE_CAPTURE = 0,

        [EnumMember(Value = @"DIRECT_CAPTURE")]
        DIRECT_CAPTURE = 1,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChargeBatchItemDtoTransactionType
    {

        [EnumMember(Value = @"DIRECT_CAPTURE")]
        DIRECT_CAPTURE = 0,

        [EnumMember(Value = @"RESERVE_CAPTURE")]
        RESERVE_CAPTURE = 1,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChargeResponseV2FailureReason
    {

        [EnumMember(Value = @"user_action_required")]
        User_action_required = 0,

        [EnumMember(Value = @"charge_amount_too_high")]
        Charge_amount_too_high = 1,

        [EnumMember(Value = @"non_technical_error")]
        Non_technical_error = 2,

        [EnumMember(Value = @"technical_error")]
        Technical_error = 3,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChargeResponseV3FailureReason
    {

        [EnumMember(Value = @"user_action_required")]
        User_action_required = 0,

        [EnumMember(Value = @"charge_amount_too_high")]
        Charge_amount_too_high = 1,

        [EnumMember(Value = @"non_technical_error")]
        Non_technical_error = 2,

        [EnumMember(Value = @"technical_error")]
        Technical_error = 3,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TimePeriodUnit
    {

        [EnumMember(Value = @"YEAR")]
        YEAR = 0,

        [EnumMember(Value = @"MONTH")]
        MONTH = 1,

        [EnumMember(Value = @"WEEK")]
        WEEK = 2,

        [EnumMember(Value = @"DAY")]
        DAY = 3,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TimePeriodResponseUnit
    {

        [EnumMember(Value = @"YEAR")]
        YEAR = 0,

        [EnumMember(Value = @"MONTH")]
        MONTH = 1,

        [EnumMember(Value = @"WEEK")]
        WEEK = 2,

        [EnumMember(Value = @"DAY")]
        DAY = 3,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResponseInfo
    {

        [JsonPropertyName("responseCode")]
        public int ResponseCode { get; set; }

        [JsonPropertyName("responseMessage")]
        [Required(AllowEmptyStrings = true)]
        public string ResponseMessage { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Result
    {
        /// <summary>
        /// When possible: A description of what went wrong.
        /// </summary>

        [JsonPropertyName("message")]
        [Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Interval2Type
    {

        [EnumMember(Value = @"RECURRING")]
        RECURRING = 0,

        [EnumMember(Value = @"FLEXIBLE")]
        FLEXIBLE = 1,

    }



    [GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public IReadOnlyDictionary<string, IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, IReadOnlyDictionary<string, IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, IReadOnlyDictionary<string, IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625
