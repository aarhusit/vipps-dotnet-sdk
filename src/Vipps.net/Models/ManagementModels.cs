//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace Vipps.net.Models.Management
{
    using System;
	using System.Collections.Generic;
	using System.CodeDom.Compiler;
	using System.Text.Json.Serialization;
	using System.Text.Json;
	using System.Runtime.Serialization;
	using System.Collections.ObjectModel;
	using System.Threading.Tasks;
	using System.Threading;
	using System.ComponentModel.DataAnnotations;

    

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExtraDetails
    {
        /// <summary>
        /// Key
        /// </summary>

        [JsonPropertyName("key")]
        public string Key { get; set; }

        /// <summary>
        /// Value
        /// </summary>

        [JsonPropertyName("value")]
        public string Value { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductOrderRequest
    {

        [JsonPropertyName("businessIdentifier")]
        [Required]
        public BusinessIdentifier BusinessIdentifier { get; set; } = new BusinessIdentifier();

        /// <summary>
        /// The name of the point of sale that will be shown to the users in
        /// <br/>the Vipps app and on the Vipps landing page.
        /// <br/>The sales unit name can be edited later on portal.vippsmobilepay.com.
        /// </summary>

        [JsonPropertyName("salesUnitName")]
        [StringLength(30, MinimumLength = 1)]
        [RegularExpression(@"^[\p{L}\p{M}\d\\(\)-_\+\s\.]+$")]
        public string SalesUnitName { get; set; }

        /// <summary>
        /// A base64 encoded string of the logo of the merchant.
        /// <br/>The logo will be displayed in the Vipps app, both when paying and on receipts and also in Vipps landing page.
        /// <br/>The logo must be in PNG (Portable Network Graphics) format.
        /// <br/>Square images are recommended.
        /// <br/>The longest side can not be more than 1000 pixels.
        /// <br/>The minimum size is 100 x 100 pixels.
        /// <br/>Images not matching the above criteria will not be shown to the merchant in the merchant portal.
        /// <br/>The logo can be edited later on portal.vippsmobilepay.com.
        /// <br/>
        /// </summary>

        [JsonPropertyName("salesUnitLogo")]
        public byte[] SalesUnitLogo { get; set; }

        [JsonPropertyName("settlementBankAccount")]
        public BankAccount SettlementBankAccount { get; set; }

        /// <summary>
        /// This is the ID for one of the price packages that are available for the partner to use.
        /// <br/>The partner's price packages are retrieved with `GET:/management/v1/partners/price-packages`.
        /// <br/>Only applicable when the `productType` allows for different prices, such as:
        /// <br/>`VIPPS_PA_NETT`, `VIPPS_I_KASSA` and `VIPPS_CHECKOUT`. 
        /// <br/>If this field is not provided, the merchant must select the price manually.
        /// <br/>Partners may have, and specify, price packages that are not shown to merchants that order manually.
        /// </summary>

        [JsonPropertyName("pricePackageId")]
        public System.Guid? PricePackageId { get; set; }

        /// <summary>
        /// The type of product ordered for the merchant.
        /// </summary>

        [JsonPropertyName("productType")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ProductOrderRequestProductType ProductType { get; set; }

        [JsonPropertyName("productUseCase")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ProductUseCase? ProductUseCase { get; set; }

        /// <summary>
        /// Annual turnover for the merchant in NOK (without Ã¸re).
        /// </summary>

        [JsonPropertyName("annualTurnover")]
        [Range(0D, 999999999D)]
        public long? AnnualTurnover { get; set; }

        /// <summary>
        /// Description (explanation) of the product or products that will be sold.
        /// <br/>Include all information relevant to processing the product order, so the 
        /// <br/>processing of the application can be as efficient as possible. 
        /// <br/>This can include hints such as specifying "POS integration in physical store"
        /// <br/>to indicate that the sales unit needs `skipLandingPage` activated.
        /// </summary>

        [JsonPropertyName("intendedPurpose")]
        public string IntendedPurpose { get; set; }

        [JsonPropertyName("website")]
        public Website Website { get; set; }

        [JsonPropertyName("complianceData")]
        public ComplianceData ComplianceData { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductOrderResponse
    {
        /// <summary>
        /// A UUID reference that identifies the product order request submitted by the partner.
        /// </summary>

        [JsonPropertyName("prefilledOrderId")]
        public System.Guid PrefilledOrderId { get; set; }

        /// <summary>
        /// A URL for the merchant to the prefilled product order to complete the signup.
        /// </summary>

        [JsonPropertyName("prefillUrl")]
        public System.Uri PrefillUrl { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// **Please note:** There are strict rules for what information Vipps MobilePay is allowed to share with
    /// <br/>a partner, as this requires active consent from the merchant, and the merchant must also
    /// <br/>be able to withdraw the consent.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductOrderDetailsResponse
    {
        /// <summary>
        /// A UUID reference that identifies the product order request.
        /// </summary>

        [JsonPropertyName("productOrderId")]
        public System.Guid ProductOrderId { get; set; }

        /// <summary>
        /// The status of the product order
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ProductOrderDetailsResponseStatus Status { get; set; }

        [JsonPropertyName("businessIdentifier")]
        public BusinessIdentifier BusinessIdentifier { get; set; }

        /// <summary>
        /// A URL to the merchants prefilled product order where they can submit the order.
        /// </summary>

        [JsonPropertyName("productOrderUrl")]
        public System.Uri ProductOrderUrl { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiQualityResponse
    {
        /// <summary>
        /// List of API endpoint quality items.
        /// </summary>

        [JsonPropertyName("ApiQualityItems")]
        [Required]
        public ICollection<ApiQualityEndpointData> ApiQualityItems { get; set; } = new Collection<ApiQualityEndpointData>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Quality stats for the use of one API endpoint.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiQualityEndpointData
    {
        /// <summary>
        /// URL of the endpoint
        /// </summary>

        [JsonPropertyName("endpoint")]
        public string Endpoint { get; set; }

        /// <summary>
        /// The number of requests to this endpoint.
        /// </summary>

        [JsonPropertyName("total Requests")]
        public double Total_Requests { get; set; }

        /// <summary>
        /// The percentage of successful (HTTP 2XX) requests.
        /// </summary>

        [JsonPropertyName("successRate")]
        public double SuccessRate { get; set; }

        /// <summary>
        /// The number of `HTTP 200 OK` responses.
        /// </summary>

        [JsonPropertyName("status200")]
        public int Status200 { get; set; }

        /// <summary>
        /// The number of `HTTP 400 Bad Request` responses.
        /// </summary>

        [JsonPropertyName("status400")]
        public int Status400 { get; set; }

        /// <summary>
        /// The number of `HTTP 401 Unauthorized` responses.
        /// </summary>

        [JsonPropertyName("status401")]
        public int Status401 { get; set; }

        /// <summary>
        /// The number of `HTTP 402 Forbidden` responses.
        /// </summary>

        [JsonPropertyName("status403")]
        public int Status403 { get; set; }

        /// <summary>
        /// The number of `HTTP 404 Not Found` responses.
        /// </summary>

        [JsonPropertyName("status404")]
        public int Status404 { get; set; }

        /// <summary>
        /// The number of `HTTP 429 Too Many Requests` responses.
        /// </summary>

        [JsonPropertyName("status429")]
        public int Status429 { get; set; }

        /// <summary>
        /// The number of `HTTP 500 Server Error` responses.
        /// </summary>

        [JsonPropertyName("status500")]
        public int Status500 { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of a sales unit. More properties may be added at a later date.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesUnit
    {

        [JsonPropertyName("msn")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(6, MinimumLength = 5)]
        [RegularExpression(@"^\d{5,6}$")]
        public string Msn { get; set; }

        /// <summary>
        /// The sales unit's name
        /// </summary>

        [JsonPropertyName("name")]
        [Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [JsonPropertyName("businessIdentifier")]
        [Required]
        public BusinessIdentifier BusinessIdentifier { get; set; } = new BusinessIdentifier();

        /// <summary>
        /// Additional details that might or might not be available. In the case that any of these are not provided, it doesn't mean that those details don't apply.
        /// </summary>

        [JsonPropertyName("configuration")]
        public Configuration Configuration { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPartnerResponse
    {
        /// <summary>
        /// The unique ID of the partner
        /// </summary>

        [JsonPropertyName("partnerId")]
        [Required]
        [StringLength(10, MinimumLength = 3)]
        [RegularExpression(@"^\d{3,10}$")]
        public string PartnerId { get; set; }

        /// <summary>
        /// The partner's name
        /// </summary>

        [JsonPropertyName("name")]
        [Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The partner's level.
        /// <br/>See: https://developer.vippsmobilepay.com/docs/partner/partner-level-up/
        /// </summary>

        [JsonPropertyName("level")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public GetPartnerResponseLevel Level { get; set; }

        /// <summary>
        /// The partner's contact person in Vipps MobilePay.
        /// </summary>

        [JsonPropertyName("partnerContactName")]
        public string PartnerContactName { get; set; }

        /// <summary>
        /// The partner's contact person's email address.
        /// </summary>

        [JsonPropertyName("partnerContactEmail")]
        public string PartnerContactEmail { get; set; }

        /// <summary>
        /// Status of the partner
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public GetPartnerResponseStatus Status { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of the partner's price packages
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPartnerPricePackagesResponse : Collection<PricePackage>
    {

    }

    /// <summary>
    /// A merchant
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Merchant
    {

        [JsonPropertyName("businessIdentifier")]
        [Required]
        public BusinessIdentifier BusinessIdentifier { get; set; } = new BusinessIdentifier();

        /// <summary>
        /// The name of the merchant
        /// </summary>

        [JsonPropertyName("name")]
        [Required]
        [StringLength(50, MinimumLength = 1)]
        public string Name { get; set; }

        /// <summary>
        /// Status of the merchant.
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public MerchantStatus Status { get; set; }

        /// <summary>
        /// The timestamp (ISO-8601) for when the merchant was created.
        /// </summary>

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// The timestamp (ISO-8601) for when the merchant was updated (if it has been updated).
        /// </summary>

        [JsonPropertyName("updatedAt")]
        public System.DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// The merchant's country code, ISO 3166-2 (two capital letters).
        /// </summary>

        [JsonPropertyName("countryCode")]
        [RegularExpression(@"^[A-Z]{2}$")]
        public string CountryCode { get; set; }

        [JsonPropertyName("businessAddress")]
        public Address BusinessAddress { get; set; }

        [JsonPropertyName("businessPostAddress")]
        public Address BusinessPostAddress { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BankAccount
    {
        /// <summary>
        /// The type of identifier for the bank account. Only Norwegian bank account number ('BBAN:NO') is currently supported.
        /// </summary>

        [JsonPropertyName("scheme")]
        [Required]
        [StringLength(20, MinimumLength = 5)]
        public string Scheme { get; set; }

        /// <summary>
        /// The account number (or ID).
        /// </summary>

        [JsonPropertyName("id")]
        [Required(AllowEmptyStrings = true)]
        [RegularExpression(@"^\d{9,34}$")]
        public string Id { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address
    {
        /// <summary>
        /// Array of addressLines, for example street name, number, etc. May be empty if there is no street address.
        /// </summary>

        [JsonPropertyName("lines")]
        [Required]
        public ICollection<string> Lines { get; set; } = new Collection<string>();

        /// <summary>
        /// Postcode of the address in local country format.
        /// </summary>

        [JsonPropertyName("postCode")]
        [StringLength(20)]
        public string PostCode { get; set; }

        /// <summary>
        /// The city.
        /// </summary>

        [JsonPropertyName("city")]
        [StringLength(30)]
        public string City { get; set; }

        /// <summary>
        /// Country code according to ISO 3166-2 (two capital letters).
        /// </summary>

        [JsonPropertyName("countryCode")]
        [StringLength(2)]
        [RegularExpression(@"^[A-Z]{2}$")]
        public string CountryCode { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response of a successful get merchant(s) operation
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetMerchantResponse : Merchant
    {

    }

    /// <summary>
    /// List of the merchants a partner has access to
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAllMerchantsResponse
    {
        /// <summary>
        /// List of merchants
        /// </summary>

        [JsonPropertyName("merchants")]
        [Required]
        public ICollection<Merchant> Merchants { get; set; } = new Collection<Merchant>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of MSNs (merchant serial numbers), that the calling partner has access to.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetMsnResponse : Collection<MsnInfo>
    {

    }

    /// <summary>
    /// Response of a successful get contracts operation
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetMerchantContractsResponse
    {
        /// <summary>
        /// List of URLs to download PDF contracts
        /// </summary>

        [JsonPropertyName("urls")]
        [Required]
        public object Urls { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// High-level details about a MSN
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MsnInfo
    {

        [JsonPropertyName("msn")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(6, MinimumLength = 5)]
        [RegularExpression(@"^\d{5,6}$")]
        public string Msn { get; set; }

        /// <summary>
        /// The name of the sales unit.
        /// </summary>

        [JsonPropertyName("name")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(50)]
        public string Name { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateMsn
    {
        /// <summary>
        /// Name of the sales unit.
        /// </summary>

        [JsonPropertyName("name")]
        [StringLength(50)]
        public string Name { get; set; }

        /// <summary>
        /// Base64 encoded string of the logo of the merchant.
        /// <br/>The logo will be displayed in the Vipps app, both when paying and on receipts and also in Vipps landing page.
        /// <br/>The logo must be in PNG (Portable Network Graphics) format.
        /// <br/>Square images are recommended.
        /// <br/>The longest side can not be more than 1000 pixels.
        /// <br/>The minimum size is 100 x 100 pixels.
        /// <br/>Images not matching the above criteria will not be shown to the merchant in the merchant portal.
        /// <br/>The logo can be edited later on portal.vippsmobilepay.com.
        /// <br/>
        /// </summary>

        [JsonPropertyName("salesUnitLogo")]
        public byte[] SalesUnitLogo { get; set; }

        /// <summary>
        /// Status of the sales unit.
        /// <br/>This may be used to activate and deactivate a sales unit.
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public UpdateMsnStatus Status { get; set; } = Vipps.net.Models.Management.UpdateMsnStatus.ACTIVE;

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Business registration number of the merchant for whom the partner is submitting the product order.
    /// <br/>Only Norwegian (`business:NO:ORG`) business registration numbers are allowed for now, but this format supports all countries.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessIdentifier
    {
        /// <summary>
        /// The type of organization identifier, typically `business:countryCode:type`, for example `business:NO:ORG`, `business:DK:CVR`, `business:FI:business:FI:Y-tunnus`, etc.
        /// </summary>

        [JsonPropertyName("scheme")]
        [Required]
        [StringLength(20, MinimumLength = 10)]
        public string Scheme { get; set; }

        /// <summary>
        /// The business identifier, typically the organization number, VAT registration number, etc.
        /// </summary>

        [JsonPropertyName("id")]
        [Required(AllowEmptyStrings = true)]
        [RegularExpression(@"^\d{9}$")]
        public string Id { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Where will sales take place?
    /// <br/>A website?
    /// <br/>A website that is not yet launched, so a test website must be used?
    /// <br/>A native app?
    /// <br/>Something else?
    /// <br/>If you are offering a Point of Sales (POS) integration, you should specify `Unknown`.
    /// <br/>
    /// <br/>For all alternatives: Make sure to provide enough details in `intendedPurpose`.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductUseCase
    {

        [EnumMember(Value = @"Website")]
        Website = 0,

        [EnumMember(Value = @"WebsiteWithTest")]
        WebsiteWithTest = 1,

        [EnumMember(Value = @"App")]
        App = 2,

        [EnumMember(Value = @"Unknown")]
        Unknown = 3,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PricePackage
    {
        /// <summary>
        /// The unique ID for the price package in UUID format.
        /// </summary>

        [JsonPropertyName("pricePackageId")]
        [Required(AllowEmptyStrings = true)]
        public System.Guid PricePackageId { get; set; }

        /// <summary>
        /// The price package's name.
        /// </summary>

        [JsonPropertyName("name")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(30)]
        public string Name { get; set; }

        /// <summary>
        /// A short human-readable summary of the price.
        /// </summary>

        [JsonPropertyName("description")]
        [StringLength(6)]
        public string Description { get; set; }

        /// <summary>
        /// An boolean indicating whether the price package is visible for merchants to order on their own in our signup forms.
        /// </summary>

        [JsonPropertyName("visibleInSignupForm")]
        public bool VisibleInSignupForm { get; set; }

        [JsonPropertyName("productType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PricePackageProductType ProductType { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Problem
    {
        /// <summary>
        /// A URI reference that identifies the problem type.
        /// </summary>

        [JsonPropertyName("type")]
        public System.Uri Type { get; set; }

        /// <summary>
        /// A short, human-readable summary of the problem type.  It will not change from occurrence to occurrence of the problem.
        /// </summary>

        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// The HTTP response code
        /// </summary>

        [JsonPropertyName("status")]
        public int Status { get; set; }

        /// <summary>
        /// A human-readable explanation specific to this occurrence of the problem.
        /// </summary>

        [JsonPropertyName("detail")]
        public string Detail { get; set; }

        /// <summary>
        /// A URI reference that identifies the specific occurrence of the problem
        /// </summary>

        [JsonPropertyName("instance")]
        public string Instance { get; set; }

        [JsonPropertyName("extraDetails")]
        public ICollection<ExtraDetails> ExtraDetails { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductOrderRequestProductType
    {

        [EnumMember(Value = @"VIPPS_PA_NETT")]
        VIPPS_PA_NETT = 0,

        [EnumMember(Value = @"VIPPS_LOGG_INN")]
        VIPPS_LOGG_INN = 1,

        [EnumMember(Value = @"VIPPS_CHECKOUT")]
        VIPPS_CHECKOUT = 2,

        [EnumMember(Value = @"VIPPS_I_KASSA")]
        VIPPS_I_KASSA = 3,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Website
    {
        /// <summary>
        /// For 'WebsiteWithTest' or 'Website'. The URL to the merchant's website
        /// </summary>

        [JsonPropertyName("url")]
        [Required(AllowEmptyStrings = true)]
        [RegularExpression(@"^(https:\/\/)[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$")]
        public string Url { get; set; }

        /// <summary>
        /// The URL that points to the merchants sales terms
        /// </summary>

        [JsonPropertyName("termsUrl")]
        [Required(AllowEmptyStrings = true)]
        [RegularExpression(@"^(https:\/\/)[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$")]
        public string TermsUrl { get; set; }

        /// <summary>
        /// For 'WebsiteWithTest'. The URL to the merchants test website
        /// </summary>

        [JsonPropertyName("testWebsiteUrl")]
        [RegularExpression(@"^(https:\/\/)[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$")]
        public string TestWebsiteUrl { get; set; }

        /// <summary>
        /// For 'WebsiteWithTest'. Username to log in on the test website
        /// </summary>

        [JsonPropertyName("testWebsiteUsername")]
        public string TestWebsiteUsername { get; set; }

        /// <summary>
        /// For 'WebsiteWithTest'. Password to log in on the test website
        /// </summary>

        [JsonPropertyName("testWebsitePassword")]
        public string TestWebsitePassword { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ComplianceData
    {

        [JsonPropertyName("giftCard")]
        public GiftCard GiftCard { get; set; }

        [JsonPropertyName("membership")]
        public Membership Membership { get; set; }

        [JsonPropertyName("subscription")]
        public Subscription Subscription { get; set; }

        [JsonPropertyName("course")]
        public Course Course { get; set; }

        [JsonPropertyName("ticket")]
        public Ticket Ticket { get; set; }

        [JsonPropertyName("rent")]
        public Rent Rent { get; set; }

        [JsonPropertyName("prepaidServices")]
        public PrepaidServices PrepaidServices { get; set; }

        [JsonPropertyName("donation")]
        public Donation Donation { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductOrderDetailsResponseStatus
    {

        [EnumMember(Value = @"RECEIVED")]
        RECEIVED = 0,

        [EnumMember(Value = @"MERCHANT_VIEWED")]
        MERCHANT_VIEWED = 1,

        [EnumMember(Value = @"ORDER_SUBMITTED")]
        ORDER_SUBMITTED = 2,

        [EnumMember(Value = @"EXPIRED")]
        EXPIRED = 3,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Configuration
    {
        /// <summary>
        /// This is `true` if the sales unit is allowed to make payments. The most common cause for this being false is the that sales unit only being approved for the Login API.
        /// </summary>

        [JsonPropertyName("paymentAllowed")]
        public bool PaymentAllowed { get; set; }

        /// <summary>
        /// The capture type of the sales unit.
        /// <br/>We strongly recommend `ReserveCapture`, see the API
        /// <br/>documentation: https://developer.vippsmobilepay.com/docs/knowledge-base/reserve-and-capture/
        /// </summary>

        [JsonPropertyName("captureType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ConfigurationCaptureType CaptureType { get; set; } = Vipps.net.Models.Management.ConfigurationCaptureType.ReserveCapture;

        /// <summary>
        /// This is `true` if the merchant has access to sending `skipLandingPage` for eCom API requests.
        /// <br/>See the [landing page](/docs/knowledge-base/landing-page/).
        /// </summary>

        [JsonPropertyName("skipLandingPageAllowed")]
        public bool SkipLandingPageAllowed { get; set; }

        /// <summary>
        /// This is `true` is the sales unit has access to the Recurring API.
        /// <br/>Vipps is required to perform some extra
        /// <br/>compliance checks before activating the Recurring API.
        /// <br/>See: https://developer.vippsmobilepay.com/docs/APIs/recurring-api
        /// </summary>

        [JsonPropertyName("recurringAllowed")]
        public bool RecurringAllowed { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GetPartnerResponseLevel
    {

        [EnumMember(Value = @"Vipps Partner")]
        Vipps_Partner = 0,

        [EnumMember(Value = @"Vipps Partner Plus")]
        Vipps_Partner_Plus = 1,

        [EnumMember(Value = @"Vipps Partner Premium")]
        Vipps_Partner_Premium = 2,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GetPartnerResponseStatus
    {

        [EnumMember(Value = @"PENDING")]
        PENDING = 0,

        [EnumMember(Value = @"ACTIVE")]
        ACTIVE = 1,

        [EnumMember(Value = @"DEACTIVATED")]
        DEACTIVATED = 2,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MerchantStatus
    {

        [EnumMember(Value = @"ACTIVE")]
        ACTIVE = 0,

        [EnumMember(Value = @"DEACTIVATED")]
        DEACTIVATED = 1,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UpdateMsnStatus
    {

        [EnumMember(Value = @"ACTIVE")]
        ACTIVE = 0,

        [EnumMember(Value = @"DEACTIVATED")]
        DEACTIVATED = 1,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PricePackageProductType
    {

        [EnumMember(Value = @"ePayment")]
        EPayment = 0,

        [EnumMember(Value = @"ePaymentCustomerPresent")]
        EPaymentCustomerPresent = 1,

        [EnumMember(Value = @"checkout")]
        Checkout = 2,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GiftCard
    {
        /// <summary>
        /// The percentage the giftcard sales consists of. Either 'Less than 10%' or '10% and more'
        /// </summary>

        [JsonPropertyName("isSalesPercentageLessThanTen")]
        public bool IsSalesPercentageLessThanTen { get; set; } = false;

        /// <summary>
        /// If 'isSalesPercentageLessThanTen' is true: For how long is the gift card valid after purchase?
        /// </summary>

        [JsonPropertyName("validityDuration")]
        public string ValidityDuration { get; set; }

        /// <summary>
        /// If 'isSalesPercentageLessThanTen' is true: What percentage of total sales are giftcards?
        /// </summary>

        [JsonPropertyName("giftCardTurnoverShare")]
        public string GiftCardTurnoverShare { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Membership
    {
        /// <summary>
        /// Estimated turnover share of membership sales in percentage
        /// </summary>

        [JsonPropertyName("turnoverShare")]
        [Required(AllowEmptyStrings = true)]
        public string TurnoverShare { get; set; }

        /// <summary>
        /// Is the membership valid from the current calendar year or 1 year from payment?
        /// </summary>

        [JsonPropertyName("membershipValidity")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public MembershipValidity MembershipValidity { get; set; }

        /// <summary>
        /// Distribution of memberships in different periods that is being sold
        /// </summary>

        [JsonPropertyName("periodDistribution")]
        [Required(AllowEmptyStrings = true)]
        public string PeriodDistribution { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Subscription
    {
        /// <summary>
        /// Estimated turnover share of subscription sales in percentage
        /// </summary>

        [JsonPropertyName("turnoverShare")]
        [Required(AllowEmptyStrings = true)]
        public string TurnoverShare { get; set; }

        /// <summary>
        /// Distribution of subscriptions in different periods that is being sold
        /// </summary>

        [JsonPropertyName("periodDistribution")]
        [Required(AllowEmptyStrings = true)]
        public string PeriodDistribution { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Course
    {
        /// <summary>
        /// Estimated turnover share of course sales in percentage
        /// </summary>

        [JsonPropertyName("turnoverShare")]
        [Required(AllowEmptyStrings = true)]
        public string TurnoverShare { get; set; }

        /// <summary>
        /// How long in advance it is common to order and pay for a course
        /// </summary>

        [JsonPropertyName("timeBeforeOrder")]
        [Required(AllowEmptyStrings = true)]
        public string TimeBeforeOrder { get; set; }

        /// <summary>
        /// How long the duration of a course usually is
        /// </summary>

        [JsonPropertyName("period")]
        [Required(AllowEmptyStrings = true)]
        public string Period { get; set; }

        /// <summary>
        /// True if there are online courses offered
        /// </summary>

        [JsonPropertyName("isOnlineCourseOffered")]
        public bool? IsOnlineCourseOffered { get; set; } = false;

        /// <summary>
        /// How long after purchase does a user have access to the course
        /// </summary>

        [JsonPropertyName("onlineAccessibleTime")]
        public string OnlineAccessibleTime { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ticket
    {
        /// <summary>
        /// Estimated turnover share of ticket sales in percentage
        /// </summary>

        [JsonPropertyName("turnoverShare")]
        [Required(AllowEmptyStrings = true)]
        public string TurnoverShare { get; set; }

        /// <summary>
        /// How long in advance of an event it is common to order and pay for a ticket
        /// </summary>

        [JsonPropertyName("prepurchaseTime")]
        [Required(AllowEmptyStrings = true)]
        public string PrepurchaseTime { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rent
    {
        /// <summary>
        /// Estimated turnover share of rent sales in percentage
        /// </summary>

        [JsonPropertyName("turnoverShare")]
        [Required(AllowEmptyStrings = true)]
        public string TurnoverShare { get; set; }

        /// <summary>
        /// How long in advance of the rental period it is common to order and pay
        /// </summary>

        [JsonPropertyName("prepurchaseTime")]
        [Required(AllowEmptyStrings = true)]
        public string PrepurchaseTime { get; set; }

        /// <summary>
        /// How long the average rental period is
        /// </summary>

        [JsonPropertyName("averageRentalDuration")]
        [Required(AllowEmptyStrings = true)]
        public string AverageRentalDuration { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrepaidServices
    {
        /// <summary>
        /// Estimated turnover share of prepaid services sales in percentage
        /// </summary>

        [JsonPropertyName("turnoverShare")]
        [Required(AllowEmptyStrings = true)]
        public string TurnoverShare { get; set; }

        /// <summary>
        /// How long in advance of a service it is common to order and pay
        /// </summary>

        [JsonPropertyName("prepurchaseTime")]
        [Required(AllowEmptyStrings = true)]
        public string PrepurchaseTime { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Donation
    {
        /// <summary>
        /// true if merchant will receive donation through Vipps
        /// </summary>

        [JsonPropertyName("acceptsDonation")]
        public bool AcceptsDonation { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ConfigurationCaptureType
    {

        [EnumMember(Value = @"ReserveCapture")]
        ReserveCapture = 0,

        [EnumMember(Value = @"DirectCapture")]
        DirectCapture = 1,

        [EnumMember(Value = @"NotApplicable")]
        NotApplicable = 2,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MembershipValidity
    {

        [EnumMember(Value = @"CurrentCalendarYear")]
        CurrentCalendarYear = 0,

        [EnumMember(Value = @"OneYearFromPayment")]
        OneYearFromPayment = 1,

    }



    [GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public IReadOnlyDictionary<string, IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, IReadOnlyDictionary<string, IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, IReadOnlyDictionary<string, IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625