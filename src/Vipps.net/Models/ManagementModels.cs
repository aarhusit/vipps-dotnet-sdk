//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace Vipps.net.Models.Management
{
    using System;
	using System.Collections.Generic;
	using System.CodeDom.Compiler;
	using System.Text.Json.Serialization;
	using System.Text.Json;
	using System.Runtime.Serialization;
	using System.Collections.ObjectModel;
	using System.Threading.Tasks;
	using System.Threading;
	using System.ComponentModel.DataAnnotations;

    [GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IVippsManagement
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Partners - Get information about a partner.
        /// </summary>
        /// <remarks>
        /// Status: Idea/proposal.
        /// <br/>
        /// <br/>For partners using
        /// <br/>[partner keys](/docs/partner/partner-keys):
        /// <br/>Get details for the partner that is making the request.
        /// <br/>An endpoint where a partner can fetch the information stored about them.
        /// </remarks>
        /// <param name="vipps_System_Name">The name of the solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<GetPartnerResponse> GetPartnerWhoamiAsync(string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get price packages for a partner
        /// </summary>
        /// <remarks>
        /// The price packages can have different names and percentages.
        /// <br/>Each price packages has a unique ID: `pricePackageId`.
        /// <br/>This endpoint gives partners an overview of their price packages.
        /// <br/>The `pricePackageId` is also used for the prefill endpoint:
        /// <br/>`POST:/product-orders`.
        /// </remarks>
        /// <param name="vipps_System_Name">The name of the solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ICollection<PricePackage>> GetPartnerPricePackagesAsync(string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get information about a prefilled product order
        /// </summary>
        /// <remarks>
        /// Status: Available.
        /// <br/>Information about a prefilled product order
        /// </remarks>
        /// <param name="prefilledProductOrderId">The ID of the prefilled product order</param>
        /// <param name="vipps_System_Name">The name of the solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ProductOrderDetailsResponse> GetPrefilledProductOrderDetailsAsync(System.Guid prefilledProductOrderId, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a product order
        /// </summary>
        /// <remarks>
        /// Delete a product order that has not been submitted by the merchant.
        /// </remarks>
        /// <param name="prefilledProductOrderId">The ID of the prefilled product order</param>
        /// <param name="vipps_System_Name">The name of the solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task DeleteProductOrderAsync(System.Guid prefilledProductOrderId, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of prefilled product orders
        /// </summary>
        /// <remarks>
        /// Information about prefilled product orders you have created.
        /// </remarks>
        /// <param name="includeExpired">Include expired product orders in the response.
        /// <br/>Default is false.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ICollection<ProductOrderDetailsResponse>> GetPrefilledProductOrdersAsync(bool? includeExpired = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Prefill a product order on behalf of a merchant
        /// </summary>
        /// <remarks>
        /// Submit data that prefills the order form on https://portal.vippsmobilepay.com,
        /// <br/>so the merchant can review the information and submit the product order.
        /// <br/>
        /// <br/>Please note that `complianceData` and `website` are required for the `PAYMENT_INTEGRATION` product type.
        /// <br/>Partners can still submit the product orders without it, but the merchant will have to fill
        /// <br/>in compliance data and website information manually in the merchant portal product order form and submit,
        /// <br/>and this is a common source of problems.
        /// <br/>
        /// <br/>We have made as many of the fields as possible optional, but please
        /// <br/>try to send as much as you can, to make it easy for the merchant and
        /// <br/>make the processing as fast as possible.
        /// <br/>
        /// <br/>**IMPORTANT:** Please provide all the necessary details, so it will not be necessary for us
        /// <br/>to request more details. This is the most common reason for delays. See:
        /// <br/>https://developer.vippsmobilepay.com/docs/partner/#typical-reasons-for-delays
        /// </remarks>
        /// <param name="idempotency_Key">An Idempotency key must be provided to ensure idempotent requests.</param>
        /// <param name="body">Product order for a merchant request body</param>
        /// <param name="vipps_System_Name">The name of the solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ProductOrderResponse> OrderProductAsync(string idempotency_Key, ProductOrderRequest body, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Merchants - Get all merchants
        /// </summary>
        /// <remarks>
        /// Status: Idea/proposal.
        /// <br/>
        /// <br/>For partners.
        /// <br/>Get a (long) list of all merchants that have one or more sale units registered with the partner making the API call.
        /// </remarks>
        /// <param name="vipps_System_Name">The name of the solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<GetAllMerchantsResponse> GetAllMerchantsAsync(string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a merchant by business identifier
        /// </summary>
        /// <remarks>
        /// Get basic information about a merchant.
        /// <br/>**Please note:** There are strict rules for what information Vipps MobilePay is allowed to share with
        /// <br/>a partner, as this requires active consent from the merchant, and the merchant must also
        /// <br/>be able to withdraw the consent.
        /// </remarks>
        /// <param name="id">The ID used for identifying a merchant. For Norwegian companies this is the organization number.</param>
        /// <param name="vipps_System_Name">The name of the solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<GetMerchantResponse> GetMerchantByBusinessIdentifierAsync(string scheme, string id, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Merchants - Get a merchant's contract(s)
        /// </summary>
        /// <remarks>
        /// Status: Idea/proposal.
        /// <br/>
        /// <br/>May return a (link to a) PDF.
        /// </remarks>
        /// <param name="id">The ID used for identifying a merchant. For Norwegian companies this is the organization number.</param>
        /// <param name="vipps_System_Name">The name of the solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<GetMerchantContractsResponse> GetMerchantContractsAsync(string scheme, string id, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get sales units for a merchant by business identifier
        /// </summary>
        /// <remarks>
        /// Get a list of sales units (MSNs) for the merchant.
        /// <br/>When used by a partner: Only returns sales units connected to the partner.
        /// </remarks>
        /// <param name="id">The ID used for identifying a merchant. For Norwegian companies this is the organization number.</param>
        /// <param name="vipps_System_Name">The name of the solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ICollection<MsnInfo>> GetSalesUnitsByBusinessIdentifierAsync(string scheme, string id, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of sales units that a merchant or partner can access
        /// </summary>
        /// <remarks>
        /// For partners using
        /// <br/>[partner keys](/docs/partner/partner-keys):
        /// <br/>Get a (long) list of all sales units registered with the partner making the API call.
        /// </remarks>
        /// <param name="vipps_System_Name">The name of the solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ICollection<MsnInfo>> GetAllSalesUnitsAsync(string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get sales unit details based on MSN
        /// </summary>
        /// <remarks>
        /// Eliminates the need to contact the merchant or Vipps MobilePay
        /// <br/>to get information about the sales units.
        /// </remarks>
        /// <param name="msn">The Vipps MSN (merchant serial number) for the sales unit.</param>
        /// <param name="vipps_System_Name">The name of the solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<SalesUnit> GetMsnAsync(string msn, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sales units - Update sales unit
        /// </summary>
        /// <remarks>
        /// Status: Idea/proposal.
        /// <br/>
        /// <br/>Change the sales unit's name, logo, possibly more.
        /// </remarks>
        /// <param name="msn">The Vipps MSN (merchant serial number) for the sales unit.</param>
        /// <param name="body">What to patch</param>
        /// <param name="vipps_System_Name">The name of the solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task UpdateMsnAsync(string msn, UpdateMsn body, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// API quality - Get API quality info.
        /// </summary>
        /// <remarks>
        /// Status: Idea/proposal.
        /// <br/>
        /// <br/>Provide success and failure rates for all API requests.
        /// <br/>This is to help you keep you API integrations free from errors.
        /// <br/>Partners are contractually required to monitor for errors (and correct problems quickly),
        /// <br/>and this endpoint makes that work much easier.
        /// </remarks>
        /// <param name="msn">The Vipps MSN (merchant serial number) for the sales unit.</param>
        /// <param name="vipps_System_Name">The name of the solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ApiQualityResponse> GetApiQualityAsync(string msn, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken));

    }

    [GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VippsManagement : IVippsManagement
    {
    #pragma warning disable 8618 // Set by constructor via BaseUrl property
        private string _baseUrl;
    #pragma warning restore 8618 // Set by constructor via BaseUrl property
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<JsonSerializerOptions> _settings = new System.Lazy<JsonSerializerOptions>(CreateSerializerSettings, true);

        public VippsManagement(System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = "https://api.vipps.no";
            _httpClient = httpClient;
        }

        private static JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        private static void UpdateJsonSerializerSettings(JsonSerializerOptions settings) => throw new NotImplementedException();

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Partners - Get information about a partner.
        /// </summary>
        /// <remarks>
        /// Status: Idea/proposal.
        /// <br/>
        /// <br/>For partners using
        /// <br/>[partner keys](/docs/partner/partner-keys):
        /// <br/>Get details for the partner that is making the request.
        /// <br/>An endpoint where a partner can fetch the information stored about them.
        /// </remarks>
        /// <param name="vipps_System_Name">The name of the solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<GetPartnerResponse> GetPartnerWhoamiAsync(string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "management/v1/partners/whoami"
                    urlBuilder_.Append("management/v1/partners/whoami");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPartnerResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Default problem response", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get price packages for a partner
        /// </summary>
        /// <remarks>
        /// The price packages can have different names and percentages.
        /// <br/>Each price packages has a unique ID: `pricePackageId`.
        /// <br/>This endpoint gives partners an overview of their price packages.
        /// <br/>The `pricePackageId` is also used for the prefill endpoint:
        /// <br/>`POST:/product-orders`.
        /// </remarks>
        /// <param name="vipps_System_Name">The name of the solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ICollection<PricePackage>> GetPartnerPricePackagesAsync(string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "management/v1/partners/price-packages"
                    urlBuilder_.Append("management/v1/partners/price-packages");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ICollection<PricePackage>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Default problem response", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get information about a prefilled product order
        /// </summary>
        /// <remarks>
        /// Status: Available.
        /// <br/>Information about a prefilled product order
        /// </remarks>
        /// <param name="prefilledProductOrderId">The ID of the prefilled product order</param>
        /// <param name="vipps_System_Name">The name of the solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ProductOrderDetailsResponse> GetPrefilledProductOrderDetailsAsync(System.Guid prefilledProductOrderId, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (prefilledProductOrderId == null)
                throw new System.ArgumentNullException("prefilledProductOrderId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "management/v1/product-orders/{prefilledProductOrderId}/details"
                    urlBuilder_.Append("management/v1/product-orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(prefilledProductOrderId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/details");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProductOrderDetailsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Default problem response", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a product order
        /// </summary>
        /// <remarks>
        /// Delete a product order that has not been submitted by the merchant.
        /// </remarks>
        /// <param name="prefilledProductOrderId">The ID of the prefilled product order</param>
        /// <param name="vipps_System_Name">The name of the solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task DeleteProductOrderAsync(System.Guid prefilledProductOrderId, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (prefilledProductOrderId == null)
                throw new System.ArgumentNullException("prefilledProductOrderId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "management/v1/product-orders/{prefilledProductOrderId}"
                    urlBuilder_.Append("management/v1/product-orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(prefilledProductOrderId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Default problem response", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of prefilled product orders
        /// </summary>
        /// <remarks>
        /// Information about prefilled product orders you have created.
        /// </remarks>
        /// <param name="includeExpired">Include expired product orders in the response.
        /// <br/>Default is false.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ICollection<ProductOrderDetailsResponse>> GetPrefilledProductOrdersAsync(bool? includeExpired = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "management/v1/product-orders"
                    urlBuilder_.Append("management/v1/product-orders");
            urlBuilder_.Append('?');
            if (includeExpired != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeExpired")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeExpired, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
            }
            urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ICollection<ProductOrderDetailsResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Prefill a product order on behalf of a merchant
        /// </summary>
        /// <remarks>
        /// Submit data that prefills the order form on https://portal.vippsmobilepay.com,
        /// <br/>so the merchant can review the information and submit the product order.
        /// <br/>
        /// <br/>Please note that `complianceData` and `website` are required for the `PAYMENT_INTEGRATION` product type.
        /// <br/>Partners can still submit the product orders without it, but the merchant will have to fill
        /// <br/>in compliance data and website information manually in the merchant portal product order form and submit,
        /// <br/>and this is a common source of problems.
        /// <br/>
        /// <br/>We have made as many of the fields as possible optional, but please
        /// <br/>try to send as much as you can, to make it easy for the merchant and
        /// <br/>make the processing as fast as possible.
        /// <br/>
        /// <br/>**IMPORTANT:** Please provide all the necessary details, so it will not be necessary for us
        /// <br/>to request more details. This is the most common reason for delays. See:
        /// <br/>https://developer.vippsmobilepay.com/docs/partner/#typical-reasons-for-delays
        /// </remarks>
        /// <param name="idempotency_Key">An Idempotency key must be provided to ensure idempotent requests.</param>
        /// <param name="body">Product order for a merchant request body</param>
        /// <param name="vipps_System_Name">The name of the solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ProductOrderResponse> OrderProductAsync(string idempotency_Key, ProductOrderRequest body, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (idempotency_Key == null)
                        throw new System.ArgumentNullException("idempotency_Key");
                    request_.Headers.TryAddWithoutValidation("Idempotency-Key", ConvertToString(idempotency_Key, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "management/v1/product-orders"
                    urlBuilder_.Append("management/v1/product-orders");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProductOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Default problem response", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Merchants - Get all merchants
        /// </summary>
        /// <remarks>
        /// Status: Idea/proposal.
        /// <br/>
        /// <br/>For partners.
        /// <br/>Get a (long) list of all merchants that have one or more sale units registered with the partner making the API call.
        /// </remarks>
        /// <param name="vipps_System_Name">The name of the solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<GetAllMerchantsResponse> GetAllMerchantsAsync(string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "management/v1/merchants"
                    urlBuilder_.Append("management/v1/merchants");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetAllMerchantsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Default problem response", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a merchant by business identifier
        /// </summary>
        /// <remarks>
        /// Get basic information about a merchant.
        /// <br/>**Please note:** There are strict rules for what information Vipps MobilePay is allowed to share with
        /// <br/>a partner, as this requires active consent from the merchant, and the merchant must also
        /// <br/>be able to withdraw the consent.
        /// </remarks>
        /// <param name="id">The ID used for identifying a merchant. For Norwegian companies this is the organization number.</param>
        /// <param name="vipps_System_Name">The name of the solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<GetMerchantResponse> GetMerchantByBusinessIdentifierAsync(string scheme, string id, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (scheme == null)
                throw new System.ArgumentNullException("scheme");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "management/v1/merchants/{scheme}/{id}"
                    urlBuilder_.Append("management/v1/merchants/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(scheme, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetMerchantResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Default problem response", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Merchants - Get a merchant's contract(s)
        /// </summary>
        /// <remarks>
        /// Status: Idea/proposal.
        /// <br/>
        /// <br/>May return a (link to a) PDF.
        /// </remarks>
        /// <param name="id">The ID used for identifying a merchant. For Norwegian companies this is the organization number.</param>
        /// <param name="vipps_System_Name">The name of the solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<GetMerchantContractsResponse> GetMerchantContractsAsync(string scheme, string id, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (scheme == null)
                throw new System.ArgumentNullException("scheme");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "management/v1/merchants/{scheme}/{id}/contracts"
                    urlBuilder_.Append("management/v1/merchants/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(scheme, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contracts");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetMerchantContractsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Default problem response", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get sales units for a merchant by business identifier
        /// </summary>
        /// <remarks>
        /// Get a list of sales units (MSNs) for the merchant.
        /// <br/>When used by a partner: Only returns sales units connected to the partner.
        /// </remarks>
        /// <param name="id">The ID used for identifying a merchant. For Norwegian companies this is the organization number.</param>
        /// <param name="vipps_System_Name">The name of the solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ICollection<MsnInfo>> GetSalesUnitsByBusinessIdentifierAsync(string scheme, string id, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (scheme == null)
                throw new System.ArgumentNullException("scheme");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "management/v1/merchants/{scheme}/{id}/sales-units"
                    urlBuilder_.Append("management/v1/merchants/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(scheme, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sales-units");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ICollection<MsnInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Default problem response", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of sales units that a merchant or partner can access
        /// </summary>
        /// <remarks>
        /// For partners using
        /// <br/>[partner keys](/docs/partner/partner-keys):
        /// <br/>Get a (long) list of all sales units registered with the partner making the API call.
        /// </remarks>
        /// <param name="vipps_System_Name">The name of the solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ICollection<MsnInfo>> GetAllSalesUnitsAsync(string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "management/v1/sales-units"
                    urlBuilder_.Append("management/v1/sales-units");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ICollection<MsnInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Default problem response", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get sales unit details based on MSN
        /// </summary>
        /// <remarks>
        /// Eliminates the need to contact the merchant or Vipps MobilePay
        /// <br/>to get information about the sales units.
        /// </remarks>
        /// <param name="msn">The Vipps MSN (merchant serial number) for the sales unit.</param>
        /// <param name="vipps_System_Name">The name of the solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<SalesUnit> GetMsnAsync(string msn, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (msn == null)
                throw new System.ArgumentNullException("msn");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "management/v1/sales-units/{msn}"
                    urlBuilder_.Append("management/v1/sales-units/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(msn, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SalesUnit>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Default problem response", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sales units - Update sales unit
        /// </summary>
        /// <remarks>
        /// Status: Idea/proposal.
        /// <br/>
        /// <br/>Change the sales unit's name, logo, possibly more.
        /// </remarks>
        /// <param name="msn">The Vipps MSN (merchant serial number) for the sales unit.</param>
        /// <param name="body">What to patch</param>
        /// <param name="vipps_System_Name">The name of the solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task UpdateMsnAsync(string msn, UpdateMsn body, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (msn == null)
                throw new System.ArgumentNullException("msn");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "management/v1/sales-units/{msn}"
                    urlBuilder_.Append("management/v1/sales-units/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(msn, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Default problem response", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// API quality - Get API quality info.
        /// </summary>
        /// <remarks>
        /// Status: Idea/proposal.
        /// <br/>
        /// <br/>Provide success and failure rates for all API requests.
        /// <br/>This is to help you keep you API integrations free from errors.
        /// <br/>Partners are contractually required to monitor for errors (and correct problems quickly),
        /// <br/>and this endpoint makes that work much easier.
        /// </remarks>
        /// <param name="msn">The Vipps MSN (merchant serial number) for the sales unit.</param>
        /// <param name="vipps_System_Name">The name of the solution.
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Version">The version number of the solution.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Name">The name of the plugin (if applicable).
        /// <br/>One word in lowercase letters is good.
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <param name="vipps_System_Plugin_Version">The version number of the plugin (if applicable).
        /// <br/>See [HTTP headers](/docs/knowledge-base/http-headers).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ApiQualityResponse> GetApiQualityAsync(string msn, string vipps_System_Name = null, string vipps_System_Version = null, string vipps_System_Plugin_Name = null, string vipps_System_Plugin_Version = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (msn == null)
                throw new System.ArgumentNullException("msn");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (vipps_System_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Name", ConvertToString(vipps_System_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Version", ConvertToString(vipps_System_Version, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Name != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Name", ConvertToString(vipps_System_Plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                    if (vipps_System_Plugin_Version != null)
                        request_.Headers.TryAddWithoutValidation("Vipps-System-Plugin-Version", ConvertToString(vipps_System_Plugin_Version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF-8"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(BaseUrl)) urlBuilder_.Append(BaseUrl);
                    // Operation Path: "management/v1/api-quality/sales-units/{msn}"
                    urlBuilder_.Append("management/v1/api-quality/sales-units/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(msn, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new Dictionary<string, IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiQualityResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Problem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Problem>("Default problem response", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, IReadOnlyDictionary<string, IEnumerable<string>> headers, CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(EnumMemberAttribute)) 
                            as EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExtraDetails
    {
        /// <summary>
        /// Key
        /// </summary>

        [JsonPropertyName("key")]
        public string Key { get; set; }

        /// <summary>
        /// Value
        /// </summary>

        [JsonPropertyName("value")]
        public string Value { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductOrderRequest
    {

        [JsonPropertyName("businessIdentifier")]
        [Required]
        public BusinessIdentifier BusinessIdentifier { get; set; } = new BusinessIdentifier();

        /// <summary>
        /// The name of the point of sale that will be shown to the users in
        /// <br/>the Vipps app and on the Vipps landing page.
        /// <br/>The sales unit name can be edited later on portal.vippsmobilepay.com.
        /// </summary>

        [JsonPropertyName("salesUnitName")]
        [StringLength(30, MinimumLength = 1)]
        [RegularExpression(@"^[\p{L}\p{M}\d\\(\)-_\+\s\.`]+$")]
        public string SalesUnitName { get; set; }

        /// <summary>
        /// A base64 encoded string of the logo of the merchant.
        /// <br/>The logo will be displayed in the Vipps app, both when paying and on receipts and also in Vipps landing page.
        /// <br/>The logo must be in PNG (Portable Network Graphics) format.
        /// <br/>Square images are recommended.
        /// <br/>The longest side can not be more than 1000 pixels.
        /// <br/>The minimum size is 100 x 100 pixels.
        /// <br/>Images not matching the above criteria will not be shown to the merchant in the merchant portal.
        /// <br/>The logo can be edited later on portal.vippsmobilepay.com.
        /// <br/>
        /// </summary>

        [JsonPropertyName("salesUnitLogo")]
        public byte[] SalesUnitLogo { get; set; }

        [JsonPropertyName("settlementBankAccount")]
        public BankAccount SettlementBankAccount { get; set; }

        /// <summary>
        /// This is the ID for one of the price packages that are available for the partner to use.
        /// <br/>The partner's price packages are retrieved with `GET:/management/v1/partners/price-packages`.
        /// <br/>Only applicable when the `productType` allows for different prices, such as:
        /// <br/>`PAYMENT_INTEGRATION`, `CASHIER` and `CHECKOUT`.
        /// <br/>If this field is not provided, the merchant must select the price manually.
        /// <br/>Partners may have, and specify, price packages that are not shown to merchants that order manually.
        /// <br/>If this field is provided, the merchant will not be able to change it in the form.
        /// </summary>

        [JsonPropertyName("pricePackageId")]
        public System.Guid? PricePackageId { get; set; }

        /// <summary>
        /// The type of product ordered for the merchant.
        /// </summary>

        [JsonPropertyName("productType")]
        [Required(AllowEmptyStrings = true)]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ProductOrderRequestProductType ProductType { get; set; }

        [JsonPropertyName("productUseCase")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ProductUseCase? ProductUseCase { get; set; }

        /// <summary>
        /// Annual turnover for the merchant in NOK (without øre).
        /// </summary>

        [JsonPropertyName("annualTurnover")]
        [Range(0D, 999999999D)]
        public long? AnnualTurnover { get; set; }

        /// <summary>
        /// Description (explanation) of the product or products that will be sold.
        /// <br/>Include all information relevant to processing the product order, so the
        /// <br/>processing of the application can be as efficient as possible.
        /// <br/>This can include hints such as specifying "POS integration in physical store"
        /// <br/>to indicate that the sales unit needs `skipLandingPage` activated.
        /// </summary>

        [JsonPropertyName("intendedPurpose")]
        public string IntendedPurpose { get; set; }

        /// <summary>
        /// Properties for use with 'productUseCase: App'
        /// </summary>

        [JsonPropertyName("app")]
        public App App { get; set; }

        [JsonPropertyName("website")]
        public Website Website { get; set; }

        [JsonPropertyName("complianceData")]
        public ComplianceData ComplianceData { get; set; }

        /// <summary>
        /// The [merchant category code (MCC)](https://en.wikipedia.org/wiki/Merchant_category_code)
        /// <br/>is a four-digit number used to classify the merchant by the type of goods or services it provides.
        /// <br/>The MCC is used by Vipps MobilePay to determine the risk level of the merchant.
        /// <br/>Our product order form contains a user-friendly MCC selector, which contains a subset of all MCCs.
        /// <br/>If the MCC specified with the API matches one of the user-selectable ones, that MCC will be pre-selected in the form.
        /// <br/>If the MCC does not match, or no MCC is specified, no MCC will be pre-selected.
        /// </summary>

        [JsonPropertyName("merchantCategoryCode")]
        public string MerchantCategoryCode { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductOrderResponse
    {
        /// <summary>
        /// A UUID reference that identifies the product order request submitted by the partner.
        /// </summary>

        [JsonPropertyName("prefilledOrderId")]
        public System.Guid PrefilledOrderId { get; set; }

        /// <summary>
        /// A URL for the merchant to the prefilled product order to complete the signup.
        /// <br/>The URL expires after 14 days due to regulatory requirements.
        /// <br/>Accessing an expired `prefillUrl` will result in an error.
        /// </summary>

        [JsonPropertyName("prefillUrl")]
        public System.Uri PrefillUrl { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// **Please note:** There are strict rules for what information Vipps MobilePay is allowed to share with
    /// <br/>a partner, as this requires active consent from the merchant, and the merchant must also
    /// <br/>be able to withdraw the consent.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductOrderDetailsResponse
    {
        /// <summary>
        /// A UUID reference that identifies the product order request.
        /// </summary>

        [JsonPropertyName("productOrderId")]
        public System.Guid ProductOrderId { get; set; }

        /// <summary>
        /// The status of the product order
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ProductOrderDetailsResponseStatus Status { get; set; }

        [JsonPropertyName("businessIdentifier")]
        public BusinessIdentifier BusinessIdentifier { get; set; }

        /// <summary>
        /// A URL to the merchants prefilled product order where they can submit the order.
        /// </summary>

        [JsonPropertyName("productOrderUrl")]
        public System.Uri ProductOrderUrl { get; set; }

        [JsonPropertyName("salesUnit")]
        public ProductOrderSalesUnit SalesUnit { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductOrderSalesUnit
    {

        [JsonPropertyName("msn")]
        [StringLength(7, MinimumLength = 5)]
        [RegularExpression(@"^\d{5,6}$")]
        public string Msn { get; set; }

        /// <summary>
        /// Name of the sales unit
        /// </summary>

        [JsonPropertyName("name")]
        public string Name { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiQualityResponse
    {
        /// <summary>
        /// List of API endpoint quality items.
        /// </summary>

        [JsonPropertyName("ApiQualityItems")]
        [Required]
        public ICollection<ApiQualityEndpointData> ApiQualityItems { get; set; } = new Collection<ApiQualityEndpointData>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Quality stats for the use of one API endpoint.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiQualityEndpointData
    {
        /// <summary>
        /// URL of the endpoint
        /// </summary>

        [JsonPropertyName("endpoint")]
        public string Endpoint { get; set; }

        /// <summary>
        /// The number of requests to this endpoint.
        /// </summary>

        [JsonPropertyName("total Requests")]
        public double Total_Requests { get; set; }

        /// <summary>
        /// The percentage of successful (HTTP 2XX) requests.
        /// </summary>

        [JsonPropertyName("successRate")]
        public double SuccessRate { get; set; }

        /// <summary>
        /// The number of `HTTP 200 OK` responses.
        /// </summary>

        [JsonPropertyName("status200")]
        public int Status200 { get; set; }

        /// <summary>
        /// The number of `HTTP 400 Bad Request` responses.
        /// </summary>

        [JsonPropertyName("status400")]
        public int Status400 { get; set; }

        /// <summary>
        /// The number of `HTTP 401 Unauthorized` responses.
        /// </summary>

        [JsonPropertyName("status401")]
        public int Status401 { get; set; }

        /// <summary>
        /// The number of `HTTP 402 Forbidden` responses.
        /// </summary>

        [JsonPropertyName("status403")]
        public int Status403 { get; set; }

        /// <summary>
        /// The number of `HTTP 404 Not Found` responses.
        /// </summary>

        [JsonPropertyName("status404")]
        public int Status404 { get; set; }

        /// <summary>
        /// The number of `HTTP 429 Too Many Requests` responses.
        /// </summary>

        [JsonPropertyName("status429")]
        public int Status429 { get; set; }

        /// <summary>
        /// The number of `HTTP 500 Server Error` responses.
        /// </summary>

        [JsonPropertyName("status500")]
        public int Status500 { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of a sales unit. More properties may be added at a later date.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalesUnit
    {

        [JsonPropertyName("msn")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(7, MinimumLength = 5)]
        [RegularExpression(@"^\d{5,6}$")]
        public string Msn { get; set; }

        /// <summary>
        /// The sales unit's name
        /// </summary>

        [JsonPropertyName("name")]
        [Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [JsonPropertyName("businessIdentifier")]
        [Required]
        public BusinessIdentifier BusinessIdentifier { get; set; } = new BusinessIdentifier();

        /// <summary>
        /// Additional details that might or might not be available.
        /// <br/>In the case that any of these are not provided, it doesn't mean that those details don't apply.
        /// </summary>

        [JsonPropertyName("configuration")]
        public Configuration Configuration { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPartnerResponse
    {
        /// <summary>
        /// The unique ID of the partner
        /// </summary>

        [JsonPropertyName("partnerId")]
        [Required]
        [StringLength(10, MinimumLength = 3)]
        [RegularExpression(@"^\d{3,10}$")]
        public string PartnerId { get; set; }

        /// <summary>
        /// The partner's name
        /// </summary>

        [JsonPropertyName("name")]
        [Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The partner's level.
        /// <br/>See: https://developer.vippsmobilepay.com/docs/partner/partner-level-up/
        /// </summary>

        [JsonPropertyName("level")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public GetPartnerResponseLevel Level { get; set; }

        /// <summary>
        /// The partner's contact person in Vipps MobilePay.
        /// </summary>

        [JsonPropertyName("partnerContactName")]
        public string PartnerContactName { get; set; }

        /// <summary>
        /// The partner's contact person's email address.
        /// </summary>

        [JsonPropertyName("partnerContactEmail")]
        public string PartnerContactEmail { get; set; }

        /// <summary>
        /// Status of the partner
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public GetPartnerResponseStatus Status { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of the partner's price packages
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPartnerPricePackagesResponse : Collection<PricePackage>
    {

    }

    /// <summary>
    /// A merchant
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Merchant
    {

        [JsonPropertyName("businessIdentifier")]
        [Required]
        public BusinessIdentifier BusinessIdentifier { get; set; } = new BusinessIdentifier();

        /// <summary>
        /// The name of the merchant
        /// </summary>

        [JsonPropertyName("name")]
        [Required]
        [StringLength(50, MinimumLength = 1)]
        public string Name { get; set; }

        /// <summary>
        /// Status of the merchant.
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public MerchantStatus Status { get; set; }

        /// <summary>
        /// The timestamp (ISO-8601) for when the merchant was created.
        /// </summary>

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// The timestamp (ISO-8601) for when the merchant was updated (if it has been updated).
        /// </summary>

        [JsonPropertyName("updatedAt")]
        public System.DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// The merchant's country code, ISO 3166-2 (two capital letters), for example `NO`, `DK`, `FI`, etc.
        /// </summary>

        [JsonPropertyName("countryCode")]
        [RegularExpression(@"^[A-Z]{2}$")]
        public string CountryCode { get; set; }

        [JsonPropertyName("businessAddress")]
        public Address BusinessAddress { get; set; }

        [JsonPropertyName("businessPostAddress")]
        public Address BusinessPostAddress { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BankAccount
    {
        /// <summary>
        /// The type of identifier for the bank account, on the format: `BBAN:countryCode`,
        /// <br/>for example `BBAN:NO`, `BBAN:DK`, `BBAN:FI`, etc.
        /// <br/>Only regular bank accounts (`BBAN`) are supported, not IBAN.
        /// <br/>
        /// </summary>

        [JsonPropertyName("scheme")]
        [Required]
        [StringLength(20, MinimumLength = 5)]
        public string Scheme { get; set; }

        /// <summary>
        /// The account number (or ID).
        /// </summary>

        [JsonPropertyName("id")]
        [Required(AllowEmptyStrings = true)]
        [RegularExpression(@"^\d{9,34}$")]
        public string Id { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address
    {
        /// <summary>
        /// Array of addressLines, for example street name, number, etc. May be empty if there is no street address.
        /// </summary>

        [JsonPropertyName("lines")]
        [Required]
        public ICollection<string> Lines { get; set; } = new Collection<string>();

        /// <summary>
        /// Postcode of the address in local country format.
        /// </summary>

        [JsonPropertyName("postCode")]
        [StringLength(20)]
        public string PostCode { get; set; }

        /// <summary>
        /// The city.
        /// </summary>

        [JsonPropertyName("city")]
        [StringLength(30)]
        public string City { get; set; }

        /// <summary>
        /// Country code according to ISO 3166-2 (two capital letters).
        /// <br/>For example `NO`, `DK`, `FI`, etc.
        /// <br/>
        /// </summary>

        [JsonPropertyName("countryCode")]
        [StringLength(2)]
        [RegularExpression(@"^[A-Z]{2}$")]
        public string CountryCode { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response of a successful get merchant(s) operation
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetMerchantResponse : Merchant
    {

    }

    /// <summary>
    /// List of the merchants a partner has access to
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAllMerchantsResponse
    {
        /// <summary>
        /// List of merchants
        /// </summary>

        [JsonPropertyName("merchants")]
        [Required]
        public ICollection<Merchant> Merchants { get; set; } = new Collection<Merchant>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of MSNs (merchant serial numbers), that the calling partner has access to.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetMsnResponse : Collection<MsnInfo>
    {

    }

    /// <summary>
    /// Response of a successful get contracts operation
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetMerchantContractsResponse
    {
        /// <summary>
        /// List of URLs to download PDF contracts
        /// </summary>

        [JsonPropertyName("urls")]
        [Required]
        public object Urls { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// High-level details about a MSN
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MsnInfo
    {

        [JsonPropertyName("msn")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(7, MinimumLength = 5)]
        [RegularExpression(@"^\d{5,6}$")]
        public string Msn { get; set; }

        /// <summary>
        /// The name of the sales unit.
        /// </summary>

        [JsonPropertyName("name")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(50)]
        public string Name { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateMsn
    {
        /// <summary>
        /// Name of the sales unit.
        /// </summary>

        [JsonPropertyName("name")]
        [StringLength(50)]
        public string Name { get; set; }

        /// <summary>
        /// Base64 encoded string of the logo of the merchant.
        /// <br/>The logo will be displayed in the Vipps app, both when paying and on receipts and also in Vipps landing page.
        /// <br/>The logo must be in PNG (Portable Network Graphics) format.
        /// <br/>Square images are recommended.
        /// <br/>The longest side can not be more than 1000 pixels.
        /// <br/>The minimum size is 100 x 100 pixels.
        /// <br/>Images not matching the above criteria will not be shown to the merchant in the merchant portal.
        /// <br/>The logo can be edited later on portal.vippsmobilepay.com.
        /// <br/>
        /// </summary>

        [JsonPropertyName("salesUnitLogo")]
        public byte[] SalesUnitLogo { get; set; }

        /// <summary>
        /// Status of the sales unit.
        /// <br/>This may be used to activate and deactivate a sales unit.
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public UpdateMsnStatus Status { get; set; } = Vipps.net.Models.Management.UpdateMsnStatus.ACTIVE;

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Business registration number of the merchant for whom the partner is submitting the product order.
    /// <br/>Format: `business:countryCode:type`, for example `business:NO:ORG`, `business:DK:CVR`, `business:FI:Y-tunnus`, etc.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessIdentifier
    {
        /// <summary>
        /// The type of organization identifier, typically `business:countryCode:type`, for example `business:NO:ORG`, `business:DK:CVR`, `business:FI:Y-tunnus`, etc.
        /// </summary>

        [JsonPropertyName("scheme")]
        [Required]
        [StringLength(30, MinimumLength = 10)]
        public string Scheme { get; set; }

        /// <summary>
        /// The business identifier, typically the organization number, VAT registration number, etc.
        /// </summary>

        [JsonPropertyName("id")]
        [Required(AllowEmptyStrings = true)]
        [RegularExpression(@"^[\d-]{4,50}$")]
        public string Id { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Where will sales take place?
    /// <br/>A website?
    /// <br/>A website that is not yet launched, so a test website must be used?
    /// <br/>A native app?
    /// <br/>Something else?
    /// <br/>If you are offering a Point of Sales (POS) integration, you should specify `Unknown`.
    /// <br/>
    /// <br/>For all alternatives: Make sure to provide enough details in `intendedPurpose`.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductUseCase
    {

        [EnumMember(Value = @"Website")]
        Website = 0,

        [EnumMember(Value = @"WebsiteWithTest")]
        WebsiteWithTest = 1,

        [EnumMember(Value = @"App")]
        App = 2,

        [EnumMember(Value = @"Unknown")]
        Unknown = 3,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PricePackage
    {
        /// <summary>
        /// The unique ID for the price package in UUID format.
        /// </summary>

        [JsonPropertyName("pricePackageId")]
        [Required(AllowEmptyStrings = true)]
        public System.Guid PricePackageId { get; set; }

        /// <summary>
        /// The price package's name.
        /// </summary>

        [JsonPropertyName("name")]
        [Required(AllowEmptyStrings = true)]
        [StringLength(30)]
        public string Name { get; set; }

        /// <summary>
        /// A short human-readable summary of the price.
        /// </summary>

        [JsonPropertyName("description")]
        [StringLength(6)]
        public string Description { get; set; }

        /// <summary>
        /// A boolean indicating whether the price package is available for merchants to select in our signup forms.
        /// </summary>

        [JsonPropertyName("visibleInSignupForm")]
        public bool VisibleInSignupForm { get; set; }

        [JsonPropertyName("productType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PricePackageProductType ProductType { get; set; }

        /// <summary>
        /// The market the price package is valid for
        /// </summary>

        [JsonPropertyName("market")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PricePackageMarket Market { get; set; }

        /// <summary>
        /// Commission for sales units ordered with this price package
        /// </summary>

        [JsonPropertyName("commission")]
        public string Commission { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Problem
    {
        /// <summary>
        /// A URI reference that identifies the problem type.
        /// </summary>

        [JsonPropertyName("type")]
        public System.Uri Type { get; set; }

        /// <summary>
        /// A short, human-readable summary of the problem type.  It will not change from occurrence to occurrence of the problem.
        /// </summary>

        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// The HTTP response code
        /// </summary>

        [JsonPropertyName("status")]
        public int Status { get; set; }

        /// <summary>
        /// A human-readable explanation specific to this occurrence of the problem.
        /// </summary>

        [JsonPropertyName("detail")]
        public string Detail { get; set; }

        /// <summary>
        /// A URI reference that identifies the specific occurrence of the problem
        /// </summary>

        [JsonPropertyName("instance")]
        public string Instance { get; set; }

        [JsonPropertyName("extraDetails")]
        public ICollection<ExtraDetails> ExtraDetails { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductOrderRequestProductType
    {

        [EnumMember(Value = @"PAYMENT_INTEGRATION")]
        PAYMENT_INTEGRATION = 0,

        [EnumMember(Value = @"CASHIER")]
        CASHIER = 1,

        [EnumMember(Value = @"CHECKOUT")]
        CHECKOUT = 2,

        [EnumMember(Value = @"LOGIN")]
        LOGIN = 3,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class App
    {
        /// <summary>
        /// The name of the app as it's listed in App Store or Play Store.
        /// </summary>

        [JsonPropertyName("appName")]
        [Required(AllowEmptyStrings = true)]
        public string AppName { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Website
    {
        /// <summary>
        /// For 'WebsiteWithTest' or 'Website'. The URL to the merchant's website. Must be a valid URL with HTTPS scheme
        /// </summary>

        [JsonPropertyName("url")]
        [Required(AllowEmptyStrings = true)]
        public string Url { get; set; }

        /// <summary>
        /// The URL that points to the merchants sales terms. Must be a valid URL with HTTPS scheme
        /// </summary>

        [JsonPropertyName("termsUrl")]
        [Required(AllowEmptyStrings = true)]
        public string TermsUrl { get; set; }

        /// <summary>
        /// For 'WebsiteWithTest'. The URL to the merchants test website. Must be a valid URL with HTTPS scheme
        /// </summary>

        [JsonPropertyName("testWebsiteUrl")]
        public string TestWebsiteUrl { get; set; }

        /// <summary>
        /// For 'WebsiteWithTest'. Username to log in on the test website
        /// </summary>

        [JsonPropertyName("testWebsiteUsername")]
        public string TestWebsiteUsername { get; set; }

        /// <summary>
        /// For 'WebsiteWithTest'. Password to log in on the test website
        /// </summary>

        [JsonPropertyName("testWebsitePassword")]
        public string TestWebsitePassword { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ComplianceData
    {

        [JsonPropertyName("giftCard")]
        public GiftCard GiftCard { get; set; }

        [JsonPropertyName("membership")]
        public Membership Membership { get; set; }

        [JsonPropertyName("subscription")]
        public Subscription Subscription { get; set; }

        [JsonPropertyName("course")]
        public Course Course { get; set; }

        [JsonPropertyName("ticket")]
        public Ticket Ticket { get; set; }

        [JsonPropertyName("rent")]
        public Rent Rent { get; set; }

        [JsonPropertyName("prepaidServices")]
        public PrepaidServices PrepaidServices { get; set; }

        [JsonPropertyName("donation")]
        public Donation Donation { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductOrderDetailsResponseStatus
    {

        [EnumMember(Value = @"RECEIVED")]
        RECEIVED = 0,

        [EnumMember(Value = @"MERCHANT_VIEWED")]
        MERCHANT_VIEWED = 1,

        [EnumMember(Value = @"ORDER_SUBMITTED")]
        ORDER_SUBMITTED = 2,

        [EnumMember(Value = @"EXPIRED")]
        EXPIRED = 3,

        [EnumMember(Value = @"COMPLETED")]
        COMPLETED = 4,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Configuration
    {
        /// <summary>
        /// This is `true` if the sales unit is allowed to make payments, and has been through the legally required compliance checks.
        /// <br/>Sales units that are only allowed to use the Login API (and do not make payments) will have `false` here.
        /// <br/>There _may_ (now or in the future) be special cases where `false` does not mean that it's a Login sales unit, but this is rare.
        /// </summary>

        [JsonPropertyName("paymentAllowed")]
        public bool PaymentAllowed { get; set; }

        /// <summary>
        /// The capture type of the sales unit.
        /// <br/>We strongly recommend `ReserveCapture`, and this is the only method supported by the ePayment API.
        /// <br/>See the API documentation: https://developer.vippsmobilepay.com/docs/knowledge-base/reserve-and-capture/
        /// </summary>

        [JsonPropertyName("captureType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ConfigurationCaptureType CaptureType { get; set; } = Vipps.net.Models.Management.ConfigurationCaptureType.ReserveCapture;

        /// <summary>
        /// This is `true` if the merchant has access to sending `skipLandingPage` parameter for eCom API requests.
        /// <br/>See the [landing page](/docs/knowledge-base/landing-page/).
        /// </summary>

        [JsonPropertyName("skipLandingPageAllowed")]
        public bool SkipLandingPageAllowed { get; set; }

        /// <summary>
        /// This is `true` is the sales unit has access to the Recurring API.
        /// <br/>Vipps is required to perform some extra
        /// <br/>compliance checks before activating the Recurring API.
        /// <br/>See: https://developer.vippsmobilepay.com/docs/APIs/recurring-api
        /// </summary>

        [JsonPropertyName("recurringAllowed")]
        public bool RecurringAllowed { get; set; }

        /// <summary>
        /// This is `true` if the sales unit has access to multiple partial captures of a payment.
        /// <br/>See [partial capture](/docs/APIs/epayment-api/operations/capture/#partial-capture).
        /// <br/>Relevant for sales units in Denmark and Finland.
        /// <br/>All Norwegian sales units have access to partial captures by default.
        /// </summary>

        [JsonPropertyName("partialCaptureAllowed")]
        public bool PartialCaptureAllowed { get; set; }

        /// <summary>
        /// This is `true` if the sales unit has access to capturing a payment later than the default 14 days.
        /// <br/>See [late capture](/docs/APIs/epayment-api/operations/capture/#late-capture-for-mobilepay-sales-units/).
        /// <br/>Relevant for sales units in Denmark and Finland.
        /// <br/>All Norwegian sales units can capture up to 180 days.
        /// </summary>

        [JsonPropertyName("lateCaptureAllowed")]
        public bool LateCaptureAllowed { get; set; }

        /// <summary>
        /// This is `true` if editing the phone number on the landing page is locked for the sales unit.
        /// <br/>See [prevent user editing phone number](/docs/knowledge-base/landing-page/#is-it-possible-to-prevent-the-user-from-editing-the-phone-number).
        /// </summary>

        [JsonPropertyName("landingPagePhoneNumberLocked")]
        public bool LandingPagePhoneNumberLocked { get; set; }

        /// <summary>
        /// This is `true` if the sales unit has access to using Long-living payment requests.
        /// <br/>See [long-living payment requests](/docs/recommended-flows/long-living-payments/).
        /// </summary>

        [JsonPropertyName("longLivingPaymentAllowed")]
        public bool LongLivingPaymentAllowed { get; set; }

        /// <summary>
        /// This is `true` if the sales unit accepts paying with credit card. Should be `true` for most sales units.
        /// <br/>See [prevent credit cards](/docs/knowledge-base/payments/#can-i-prevent-people-from-paying-with-credit-cards).
        /// </summary>

        [JsonPropertyName("creditCardPaymentAllowed")]
        public bool CreditCardPaymentAllowed { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GetPartnerResponseLevel
    {

        [EnumMember(Value = @"Vipps Partner")]
        Vipps_Partner = 0,

        [EnumMember(Value = @"Vipps Partner Plus")]
        Vipps_Partner_Plus = 1,

        [EnumMember(Value = @"Vipps Partner Premium")]
        Vipps_Partner_Premium = 2,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GetPartnerResponseStatus
    {

        [EnumMember(Value = @"PENDING")]
        PENDING = 0,

        [EnumMember(Value = @"ACTIVE")]
        ACTIVE = 1,

        [EnumMember(Value = @"DEACTIVATED")]
        DEACTIVATED = 2,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MerchantStatus
    {

        [EnumMember(Value = @"ACTIVE")]
        ACTIVE = 0,

        [EnumMember(Value = @"DEACTIVATED")]
        DEACTIVATED = 1,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UpdateMsnStatus
    {

        [EnumMember(Value = @"ACTIVE")]
        ACTIVE = 0,

        [EnumMember(Value = @"DEACTIVATED")]
        DEACTIVATED = 1,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PricePackageProductType
    {

        [EnumMember(Value = @"PAYMENT_INTEGRATION")]
        PAYMENT_INTEGRATION = 0,

        [EnumMember(Value = @"CASHIER")]
        CASHIER = 1,

        [EnumMember(Value = @"CHECKOUT")]
        CHECKOUT = 2,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PricePackageMarket
    {

        [EnumMember(Value = @"DK")]
        DK = 0,

        [EnumMember(Value = @"NO")]
        NO = 1,

        [EnumMember(Value = @"FI")]
        FI = 2,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GiftCard
    {
        /// <summary>
        /// The percentage the giftcard sales consists of. Either 'Less than 10%' or '10% and more'
        /// </summary>

        [JsonPropertyName("isSalesPercentageLessThanTen")]
        public bool IsSalesPercentageLessThanTen { get; set; } = false;

        /// <summary>
        /// If 'isSalesPercentageLessThanTen' is true: For how long is the gift card valid after purchase?
        /// </summary>

        [JsonPropertyName("validityDuration")]
        public string ValidityDuration { get; set; }

        /// <summary>
        /// If 'isSalesPercentageLessThanTen' is true: What percentage of total sales are giftcards?
        /// </summary>

        [JsonPropertyName("giftCardTurnoverShare")]
        public string GiftCardTurnoverShare { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Membership
    {
        /// <summary>
        /// Estimated turnover share of membership sales in percentage
        /// </summary>

        [JsonPropertyName("turnoverShare")]
        [Required(AllowEmptyStrings = true)]
        public string TurnoverShare { get; set; }

        /// <summary>
        /// Is the membership valid from the current calendar year or 1 year from payment?
        /// </summary>

        [JsonPropertyName("membershipValidity")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public MembershipValidity MembershipValidity { get; set; }

        /// <summary>
        /// Distribution of memberships in different periods that is being sold
        /// </summary>

        [JsonPropertyName("periodDistribution")]
        [Required(AllowEmptyStrings = true)]
        public string PeriodDistribution { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Subscription
    {
        /// <summary>
        /// Estimated turnover share of subscription sales in percentage
        /// </summary>

        [JsonPropertyName("turnoverShare")]
        [Required(AllowEmptyStrings = true)]
        public string TurnoverShare { get; set; }

        /// <summary>
        /// Distribution of subscriptions in different periods that is being sold
        /// </summary>

        [JsonPropertyName("periodDistribution")]
        [Required(AllowEmptyStrings = true)]
        public string PeriodDistribution { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Course
    {
        /// <summary>
        /// Estimated turnover share of course sales in percentage
        /// </summary>

        [JsonPropertyName("turnoverShare")]
        [Required(AllowEmptyStrings = true)]
        public string TurnoverShare { get; set; }

        /// <summary>
        /// How long in advance it is common to order and pay for a course
        /// </summary>

        [JsonPropertyName("timeBeforeOrder")]
        [Required(AllowEmptyStrings = true)]
        public string TimeBeforeOrder { get; set; }

        /// <summary>
        /// How long the duration of a course usually is
        /// </summary>

        [JsonPropertyName("period")]
        [Required(AllowEmptyStrings = true)]
        public string Period { get; set; }

        /// <summary>
        /// True if there are online courses offered
        /// </summary>

        [JsonPropertyName("isOnlineCourseOffered")]
        public bool? IsOnlineCourseOffered { get; set; } = false;

        /// <summary>
        /// How long after purchase does a user have access to the course
        /// </summary>

        [JsonPropertyName("onlineAccessibleTime")]
        public string OnlineAccessibleTime { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ticket
    {
        /// <summary>
        /// Estimated turnover share of ticket sales in percentage
        /// </summary>

        [JsonPropertyName("turnoverShare")]
        [Required(AllowEmptyStrings = true)]
        public string TurnoverShare { get; set; }

        /// <summary>
        /// How long in advance of an event it is common to order and pay for a ticket
        /// </summary>

        [JsonPropertyName("prepurchaseTime")]
        [Required(AllowEmptyStrings = true)]
        public string PrepurchaseTime { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rent
    {
        /// <summary>
        /// Estimated turnover share of rent sales in percentage
        /// </summary>

        [JsonPropertyName("turnoverShare")]
        [Required(AllowEmptyStrings = true)]
        public string TurnoverShare { get; set; }

        /// <summary>
        /// How long in advance of the rental period it is common to order and pay
        /// </summary>

        [JsonPropertyName("prepurchaseTime")]
        [Required(AllowEmptyStrings = true)]
        public string PrepurchaseTime { get; set; }

        /// <summary>
        /// How long the average rental period is
        /// </summary>

        [JsonPropertyName("averageRentalDuration")]
        [Required(AllowEmptyStrings = true)]
        public string AverageRentalDuration { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrepaidServices
    {
        /// <summary>
        /// Estimated turnover share of prepaid services sales in percentage
        /// </summary>

        [JsonPropertyName("turnoverShare")]
        [Required(AllowEmptyStrings = true)]
        public string TurnoverShare { get; set; }

        /// <summary>
        /// How long in advance of a service it is common to order and pay
        /// </summary>

        [JsonPropertyName("prepurchaseTime")]
        [Required(AllowEmptyStrings = true)]
        public string PrepurchaseTime { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Donation
    {
        /// <summary>
        /// true if merchant will receive donation through Vipps
        /// </summary>

        [JsonPropertyName("acceptsDonation")]
        public bool AcceptsDonation { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ConfigurationCaptureType
    {

        [EnumMember(Value = @"ReserveCapture")]
        ReserveCapture = 0,

        [EnumMember(Value = @"DirectCapture")]
        DirectCapture = 1,

        [EnumMember(Value = @"NotApplicable")]
        NotApplicable = 2,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MembershipValidity
    {

        [EnumMember(Value = @"CurrentCalendarYear")]
        CurrentCalendarYear = 0,

        [EnumMember(Value = @"OneYearFromPayment")]
        OneYearFromPayment = 1,

    }



    [GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public IReadOnlyDictionary<string, IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, IReadOnlyDictionary<string, IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, IReadOnlyDictionary<string, IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625
