//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace Vipps.net.Models.Checkout
{
    using System;
	using System.Collections.Generic;
	using System.CodeDom.Compiler;
	using System.Text.Json.Serialization;
	using System.Runtime.Serialization;
	using System.Collections.ObjectModel;

    

    /// <summary>
    /// Amounts are specified in minor units. For Norwegian kroner (NOK), that means 1 NOK = 100 øre. Example: 499 NOK = 49900 øre.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount
    {
        /// <summary>
        /// Must be in Minor Units. The smallest unit of a currency. Example 100 NOK = 10000.
        /// </summary>

        [JsonPropertyName("value")]
        public int Value { get; set; }

        /// <summary>
        /// The currency identifier according to ISO 4217. Only NOK is supported at the moment. Support for EUR, DKK, and SEK will be provided in early 2024.
        /// </summary>

        [JsonPropertyName("currency")]
        public string Currency { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Defines the details of the billing
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillingDetails
    {
        /// <summary>
        /// Example: "Ada"
        /// </summary>

        [JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Example: "Lovelace"
        /// </summary>

        [JsonPropertyName("lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Example: "user@example.com"
        /// </summary>

        [JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>
        /// If no country code is provided, defaults to Norway (47). Example: "4791234567"
        /// </summary>

        [JsonPropertyName("phoneNumber")]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Example: "Robert Levins gate 5"
        /// </summary>

        [JsonPropertyName("streetAddress")]
        public string StreetAddress { get; set; }

        /// <summary>
        /// Example: "0154"
        /// </summary>

        [JsonPropertyName("postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// Example: "Oslo"
        /// </summary>

        [JsonPropertyName("city")]
        public string City { get; set; }

        /// <summary>
        /// The ISO-3166-1 Alpha-2 representation of the country. Example: "NO"
        /// </summary>

        [JsonPropertyName("country")]
        public string Country { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutConfig
    {
        /// <summary>
        /// If customer is physically present: "customer_present", otherwise: "customer_not_present".
        /// </summary>

        [JsonPropertyName("customerInteraction")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public CustomerInteraction? CustomerInteraction { get; set; }

        /// <summary>
        /// Adjust the fields and values present in the Checkout.
        /// </summary>

        [JsonPropertyName("elements")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public Elements? Elements { get; set; }

        /// <summary>
        /// Countries to allow during session
        /// </summary>

        [JsonPropertyName("countries")]
        public Countries Countries { get; set; }

        /// <summary>
        /// One of the following: "WEB_REDIRECT", "NATIVE_REDIRECT". To ensure having a return URL based on an app URL, use "NATIVE_REDIRECT".
        /// </summary>

        [JsonPropertyName("userFlow")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public UserFlow? UserFlow { get; set; }

        /// <summary>
        /// Requires the customer to consent to share their email and openid sub with the merchant to be able to make a wallet payment (default: false).
        /// </summary>

        [JsonPropertyName("requireUserInfo")]
        public bool? RequireUserInfo { get; set; }

        /// <summary>
        /// If used, displays a checkbox that can be used to ask for extra consent.
        /// </summary>

        [JsonPropertyName("customConsent")]
        public CustomConsent CustomConsent { get; set; }

        /// <summary>
        /// Decides whether the order lines are displayed as a shopping cart context in the checkout.
        /// </summary>

        [JsonPropertyName("showOrderSummary")]
        public bool? ShowOrderSummary { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A machine-readable format for specifying errors in HTTP API responses based on &lt;see href="https://tools.ietf.org/html/rfc7807" /&gt;.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutProblemDetails
    {

        [JsonPropertyName("type")]
        public string Type { get; set; }

        [JsonPropertyName("title")]
        public string Title { get; set; }

        [JsonPropertyName("status")]
        public int? Status { get; set; }

        [JsonPropertyName("detail")]
        public string Detail { get; set; }

        [JsonPropertyName("instance")]
        public string Instance { get; set; }

        [JsonPropertyName("errorCode")]
        public string ErrorCode { get; set; }

        [JsonPropertyName("errors")]
        public IDictionary<string, ICollection<string>> Errors { get; set; } = new Dictionary<string, ICollection<string>>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Information about the merchant system.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutSessionThirdPartyInformationHeaders
    {
        /// <summary>
        /// The name of the ecommerce solution. Example: "Acme Commerce".
        /// </summary>

        [JsonPropertyName("vipps-System-Name")]
        public string VippsSystemName { get; set; }

        /// <summary>
        /// The version number of the ecommerce solution. Example: "3.1.2".
        /// </summary>

        [JsonPropertyName("vipps-System-Version")]
        public string VippsSystemVersion { get; set; }

        /// <summary>
        /// The name of the ecommerce plugin. Example: "acme-webshop".
        /// </summary>

        [JsonPropertyName("vipps-System-Plugin-Name")]
        public string VippsSystemPluginName { get; set; }

        /// <summary>
        /// The version number of the ecommerce plugin. Example: "4.5.6".
        /// </summary>

        [JsonPropertyName("vipps-System-Plugin-Version")]
        public string VippsSystemPluginVersion { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Countries
    {
        /// <summary>
        /// List of allowed countries in ISO-3166 Alpha 2. If specified, the customer will only be able to select these countries. Example ["NO", "SE", "DK"]
        /// </summary>

        [JsonPropertyName("supported")]
        public ICollection<string> Supported { get; set; } = new Collection<string>();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// If used, displays a checkbox that can be used to ask for extra consent.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomConsent
    {
        /// <summary>
        /// Text displayed next to the checkbox. This text can contain up to one link in markdown format like this: [linkText](https://example.com)
        /// </summary>

        [JsonPropertyName("text")]
        public string Text { get; set; }

        /// <summary>
        /// Whether box has to be checked to complete the checkout.
        /// </summary>

        [JsonPropertyName("required")]
        public bool Required { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerInteraction
    {

        [EnumMember(Value = @"CUSTOMER_PRESENT")]
        CUSTOMER_PRESENT = 0,

        [EnumMember(Value = @"CUSTOMER_NOT_PRESENT")]
        CUSTOMER_NOT_PRESENT = 1,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Elements
    {

        [EnumMember(Value = @"Full")]
        Full = 0,

        [EnumMember(Value = @"PaymentAndContactInfo")]
        PaymentAndContactInfo = 1,

        [EnumMember(Value = @"PaymentOnly")]
        PaymentOnly = 2,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExternalSessionState
    {

        [EnumMember(Value = @"SessionCreated")]
        SessionCreated = 0,

        [EnumMember(Value = @"PaymentInitiated")]
        PaymentInitiated = 1,

        [EnumMember(Value = @"SessionExpired")]
        SessionExpired = 2,

        [EnumMember(Value = @"PaymentSuccessful")]
        PaymentSuccessful = 3,

        [EnumMember(Value = @"PaymentTerminated")]
        PaymentTerminated = 4,

    }

    /// <summary>
    /// Configuration required to enable Helthjem logistics options
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Helthjem
    {
        /// <summary>
        /// The Username provided to you by Helthjem
        /// </summary>

        [JsonPropertyName("username")]
        public string Username { get; set; }

        /// <summary>
        /// The Password provided to you by Helthjem
        /// </summary>

        [JsonPropertyName("password")]
        public string Password { get; set; }

        /// <summary>
        /// The ShopId provided to you by Helthjem
        /// </summary>

        [JsonPropertyName("shopId")]
        public int ShopId { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HelthjemLogisticsOption : LogisticsOptionBase
    {
        /// <summary>
        /// Amounts are specified in minor units. For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("amount")]
        public Amount Amount { get; set; } = new Amount();

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public HelthjemLogisticsType? Type { get; set; }

        [JsonPropertyName("customType")]
        public string CustomType { get; set; }

        [JsonPropertyName("brand")]
        public string Brand { get; set; } = "HELTHJEM";

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HelthjemLogisticsType
    {

        [EnumMember(Value = @"HOME_DELIVERY")]
        HOME_DELIVERY = 0,

        [EnumMember(Value = @"PICKUP_POINT")]
        PICKUP_POINT = 1,

    }

    /// <summary>
    /// Request to set up a Checkout session
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InitiateSessionRequest
    {

        [JsonPropertyName("merchantInfo")]
        public PaymentMerchantInfo MerchantInfo { get; set; } = new PaymentMerchantInfo();

        [JsonPropertyName("transaction")]
        public PaymentTransaction Transaction { get; set; } = new PaymentTransaction();

        [JsonPropertyName("logistics")]
        public Logistics Logistics { get; set; }

        /// <summary>
        /// If customer information is known, it can be prefilled.
        /// </summary>

        [JsonPropertyName("prefillCustomer")]
        public PrefillCustomer PrefillCustomer { get; set; }

        [JsonPropertyName("configuration")]
        public CheckoutConfig Configuration { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response from initiating a session.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InitiateSessionResponse
    {
        /// <summary>
        /// The token to be provided to Checkout. Example: "eyJhbGciOiJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNobWFjLXNoYTI1NiIsInR5cCI6IkpXVCJ9.eyJzZXNzaW9uSWQiOiJUdHF1Y3I5ZDdKRHZ6clhYWTU1WUZRIiwic2Vzc2lvblBvbGxpbmdVUkwiOiJodHRwOi8vbG9jYWxob3N0OjUwMDAvY2hlY2tvdXQvc2Vzc2lvbi9UdHF1Y3I5ZDdKRHZ6clhYWTU1WUZRIn0.ln7VzZkNvUGu0HhyA_a8IbXQN35WhDBmCYC9IvyYL-I"
        /// </summary>

        [JsonPropertyName("token")]
        public string Token { get; set; }

        /// <summary>
        /// The URL of the checkout frontend. Example: "https://vippscheckout.vipps.no/v1/".
        /// </summary>

        [JsonPropertyName("checkoutFrontendUrl")]
        public string CheckoutFrontendUrl { get; set; }

        /// <summary>
        /// The URL to poll for session information. Example: "https://api.vipps.no/checkout/v1/session/31gf1g413121".
        /// </summary>

        [JsonPropertyName("pollingUrl")]
        public string PollingUrl { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Integrations
    {
        /// <summary>
        /// Configuration required to enable Porterbuddy logistics options
        /// </summary>

        [JsonPropertyName("porterbuddy")]
        public Porterbuddy Porterbuddy { get; set; }

        /// <summary>
        /// Configuration required to enable Helthjem logistics options
        /// </summary>

        [JsonPropertyName("helthjem")]
        public Helthjem Helthjem { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// If both dynamic and fixed options are specified, dynamic options is provided to the user.
    /// <br/>If no DynamicOptionsCallback is provided, only fixed logistics options will be used.
    /// <br/>When using dynamic shipping we recommend that you define logistics.fixedOptions as a backup.
    /// <br/>If the callback does not resolve successfully within 8 seconds, returns null or an empty list the system will fall back to static options.
    /// <br/>If no fallback options are provided, the user will be presented with an error and will not be able to continue with the checkout.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Logistics
    {
        /// <summary>
        /// Merchant's Callback URL for providing dynamic logistics options based on customer address. Example: "https://example.com/vipps/dynamiclogisticsoption". Can not be used with AddressFields set to false.
        /// </summary>

        [JsonPropertyName("dynamicOptionsCallback")]
        public string DynamicOptionsCallback { get; set; }

        /// <summary>
        /// Fixed list of logistics options.
        /// </summary>

        [JsonPropertyName("fixedOptions")]
        public ICollection<LogisticsOptionBase> FixedOptions { get; set; }

        /// <summary>
        /// Some optional checkout features require carrier-specific configuration. Can not be used with AddressFields set to false.
        /// </summary>

        [JsonPropertyName("integrations")]
        public Integrations Integrations { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LogisticsOptionBase
    {

        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("priority")]
        public int Priority { get; set; }

        [JsonPropertyName("isDefault")]
        public bool IsDefault { get; set; }

        [JsonPropertyName("description")]
        public string Description { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Headers required to retrieve an access token.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MerchantAuthInfoHeaders
    {
        /// <summary>
        /// Client ID for the merchant (the "username"). See [API keys](/docs/knowledge-base/api-keys/).
        /// </summary>

        [JsonPropertyName("client_id")]
        public string Client_id { get; set; }

        /// <summary>
        /// Client Secret for the merchant (the "password"). See [API keys](/docs/knowledge-base/api-keys/).
        /// </summary>

        [JsonPropertyName("client_secret")]
        public string Client_secret { get; set; }

        /// <summary>
        /// Subscription key for a sales unit. See [API keys](/docs/knowledge-base/api-keys/).
        /// </summary>

        [JsonPropertyName("ocp-Apim-Subscription-Key")]
        public string OcpApimSubscriptionKey { get; set; }

        /// <summary>
        /// Assigned unique number for a merchant. Found in the merchant portal.  See [API keys](/docs/knowledge-base/api-keys/).
        /// </summary>

        [JsonPropertyName("merchant-Serial-Number")]
        public string MerchantSerialNumber { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Information about the customer address used when retrieving dynamic logistics options.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MerchantLogisticsCallbackRequestBody
    {
        /// <summary>
        /// Example: "Robert Levins gate 5"
        /// </summary>

        [JsonPropertyName("streetAddress")]
        public string StreetAddress { get; set; }

        /// <summary>
        /// Example: "0154"
        /// </summary>

        [JsonPropertyName("postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// Example: "Oslo"
        /// </summary>

        [JsonPropertyName("region")]
        public string Region { get; set; }

        /// <summary>
        /// The ISO-3166-1 Alpha-2 representation of the country. Example: "NO"
        /// </summary>

        [JsonPropertyName("country")]
        public string Country { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderBottomLine
    {
        /// <summary>
        /// The currency identifier according to ISO 4217. Example: "NOK".
        /// </summary>

        [JsonPropertyName("currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Tip amount for the order. Must be in Minor Units. The smallest unit of a currency. Example 100 NOK = 10000.
        /// </summary>

        [JsonPropertyName("tipAmount")]
        public long? TipAmount { get; set; }

        /// <summary>
        /// Amount paid by gift card or coupon. Must be in Minor Units. The smallest unit of a currency. Example 100 NOK = 10000.
        /// </summary>

        [JsonPropertyName("giftCardAmount")]
        public long? GiftCardAmount { get; set; }

        /// <summary>
        /// Identifier of the terminal / point of sale.
        /// </summary>

        [JsonPropertyName("terminalId")]
        public string TerminalId { get; set; }

        /// <summary>
        /// May be used to indicate that the payment comes from multiple sources. Example: giftcard + card
        /// </summary>

        [JsonPropertyName("paymentSources")]
        public PaymentSources PaymentSources { get; set; }

        [JsonPropertyName("receiptNumber")]
        public string ReceiptNumber { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderLine
    {
        /// <summary>
        /// The name of the product in the order line.
        /// </summary>

        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// The product ID.
        /// </summary>

        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Total amount of the order line, including tax and discount. Must be in Minor Units. The smallest unit of a currency. Example 100 NOK = 10000.
        /// </summary>

        [JsonPropertyName("totalAmount")]
        public long TotalAmount { get; set; }

        /// <summary>
        /// Total amount of order line with discount excluding tax. Must be in Minor Units. The smallest unit of a currency. Example 100 NOK = 10000.
        /// </summary>

        [JsonPropertyName("totalAmountExcludingTax")]
        public long TotalAmountExcludingTax { get; set; }

        /// <summary>
        /// Total tax amount paid for the order line. Must be in Minor Units. The smallest unit of a currency. Example 100 NOK = 10000.
        /// </summary>

        [JsonPropertyName("totalTaxAmount")]
        public long TotalTaxAmount { get; set; }

        /// <summary>
        /// Tax percentage for the order line.
        /// </summary>

        [JsonPropertyName("taxPercentage")]
        public int TaxPercentage { get; set; }

        /// <summary>
        /// If no quantity info is provided the order line will default to 1 pcs.
        /// </summary>

        [JsonPropertyName("unitInfo")]
        public OrderUnitInfo UnitInfo { get; set; }

        /// <summary>
        /// Total discount for the order line. Must be in Minor Units. The smallest unit of a currency. Example 100 NOK = 10000.
        /// </summary>

        [JsonPropertyName("discount")]
        public long? Discount { get; set; }

        /// <summary>
        /// URL linking back to the product at the merchant.
        /// </summary>

        [JsonPropertyName("productUrl")]
        public string ProductUrl { get; set; }

        /// <summary>
        /// Flag for marking the orderline as returned. This will make it count negative towards all the sums in BottomLine.
        /// </summary>

        [JsonPropertyName("isReturn")]
        public bool? IsReturn { get; set; }

        /// <summary>
        /// Flag for marking the orderline as a shipping line. This will be shown differently in the app.
        /// </summary>

        [JsonPropertyName("isShipping")]
        public bool? IsShipping { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderSummary
    {
        /// <summary>
        /// The order lines contain descriptions of each item present in the order.
        /// </summary>

        [JsonPropertyName("orderLines")]
        public ICollection<OrderLine> OrderLines { get; set; } = new Collection<OrderLine>();

        /// <summary>
        /// Contains information regarding the order as a whole.
        /// </summary>

        [JsonPropertyName("orderBottomLine")]
        public OrderBottomLine OrderBottomLine { get; set; } = new OrderBottomLine();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderUnitInfo
    {
        /// <summary>
        /// Total price per unit, including tax and excluding discount. Must be in Minor Units. The smallest unit of a currency. Example 100 NOK = 10000.
        /// </summary>

        [JsonPropertyName("unitPrice")]
        public long UnitPrice { get; set; }

        /// <summary>
        /// Quantity given as a integer or fraction (only for cosmetics).
        /// </summary>

        [JsonPropertyName("quantity")]
        public string Quantity { get; set; }

        /// <summary>
        /// Available units for quantity. Will default to PCS if not set.
        /// </summary>

        [JsonPropertyName("quantityUnit")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public QuantityUnit QuantityUnit { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherLogisticsOption : LogisticsOptionBase
    {

        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// Amounts are specified in minor units. For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("amount")]
        public Amount Amount { get; set; } = new Amount();

        [JsonPropertyName("brand")]
        public string Brand { get; set; } = "OTHER";

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentMerchantInfo
    {
        /// <summary>
        /// Complete URL for receiving callback after payment is completed. Example: "https://exmaple.com/vipps/payment-callback/oS1d5f9abD
        /// </summary>

        [JsonPropertyName("callbackUrl")]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// Complete URL for redirecting customers to when the checkout is finished. Example: "https://example.com/vipps".
        /// </summary>

        [JsonPropertyName("returnUrl")]
        public string ReturnUrl { get; set; }

        /// <summary>
        /// The token will be supplied by the callback to the merchant as a header. Example: "iOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6ImllX3FXQ1hoWHh0MXpJ".
        /// </summary>

        [JsonPropertyName("callbackAuthorizationToken")]
        public string CallbackAuthorizationToken { get; set; }

        /// <summary>
        /// Complete URL to the merchant's terms and conditions. Example: "https://example.com/vipps/termsAndConditions".
        /// </summary>

        [JsonPropertyName("termsAndConditionsUrl")]
        public string TermsAndConditionsUrl { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PaymentMethod
    {

        [EnumMember(Value = @"Wallet")]
        Wallet = 0,

        [EnumMember(Value = @"Card")]
        Card = 1,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentSources
    {
        /// <summary>
        /// Amount from gift card
        /// </summary>

        [JsonPropertyName("giftCard")]
        public long? GiftCard { get; set; }

        /// <summary>
        /// Amount from card
        /// </summary>

        [JsonPropertyName("card")]
        public long? Card { get; set; }

        /// <summary>
        /// Amount from voucher
        /// </summary>

        [JsonPropertyName("voucher")]
        public long? Voucher { get; set; }

        /// <summary>
        /// Amount from cash
        /// </summary>

        [JsonPropertyName("cash")]
        public long? Cash { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PaymentState
    {

        [EnumMember(Value = @"CREATED")]
        CREATED = 0,

        [EnumMember(Value = @"AUTHORIZED")]
        AUTHORIZED = 1,

        [EnumMember(Value = @"TERMINATED")]
        TERMINATED = 2,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentTransaction
    {
        /// <summary>
        /// Amounts are specified in minor units. For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("amount")]
        public Amount Amount { get; set; } = new Amount();

        /// <summary>
        /// The merchant's unique reference for the transaction. Also known as OrderId. Example: "acme-shop-123-order123abc". See https://developer.vippsmobilepay.com/docs/common-topics/orderid/
        /// </summary>

        [JsonPropertyName("reference")]
        public string Reference { get; set; }

        /// <summary>
        /// Description visible to the customer during payment. Example: "One pair of socks".
        /// </summary>

        [JsonPropertyName("paymentDescription")]
        public string PaymentDescription { get; set; }

        /// <summary>
        /// Contain descriptions of each item present in the order, and an order bottom line for information regarding the order as a whole.
        /// </summary>

        [JsonPropertyName("orderSummary")]
        public OrderSummary OrderSummary { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The pickup point the customer selected .
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PickupPoint
    {
        /// <summary>
        /// Pickup point ID provided by the carrier. Example: 121648
        /// </summary>

        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Pickup point name. Example: Extra Eiganes
        /// </summary>

        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Pickup point's street address. Example: VITAMINVEIEN 7
        /// </summary>

        [JsonPropertyName("address")]
        public string Address { get; set; }

        /// <summary>
        /// Pickup point's postal code. Example: 0485
        /// </summary>

        [JsonPropertyName("postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// Pickup point's city. Example: OSLO
        /// </summary>

        [JsonPropertyName("city")]
        public string City { get; set; }

        /// <summary>
        /// Pickup point's country. Example: NO
        /// </summary>

        [JsonPropertyName("country")]
        public string Country { get; set; }

        /// <summary>
        /// Pickup point's opening hours. Example: Man-Søn: 1000-2000
        /// </summary>

        [JsonPropertyName("openingHours")]
        public ICollection<string> OpeningHours { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Configuration required to enable Porterbuddy logistics options
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Porterbuddy
    {
        /// <summary>
        /// The public key provided to you by Porterbuddy
        /// </summary>

        [JsonPropertyName("publicToken")]
        public string PublicToken { get; set; }

        /// <summary>
        /// The API key provided to you by Porterbuddy
        /// </summary>

        [JsonPropertyName("apiKey")]
        public string ApiKey { get; set; }

        /// <summary>
        /// Information about the sender
        /// </summary>

        [JsonPropertyName("origin")]
        public PorterbuddyOrigin Origin { get; set; } = new PorterbuddyOrigin();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PorterbuddyLogisticsOption : LogisticsOptionBase
    {
        /// <summary>
        /// Amounts are specified in minor units. For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("amount")]
        public Amount Amount { get; set; }

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PorterbuddyLogisticsType? Type { get; set; }

        [JsonPropertyName("customType")]
        public string CustomType { get; set; }

        [JsonPropertyName("brand")]
        public string Brand { get; set; } = "PORTERBUDDY";

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PorterbuddyLogisticsType
    {

        [EnumMember(Value = @"HOME_DELIVERY")]
        HOME_DELIVERY = 0,

    }

    /// <summary>
    /// Details about the sender of the Porterbuddy parcels
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PorterbuddyOrigin
    {
        /// <summary>
        /// The name of your store
        /// </summary>

        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Your email address where Porterbuddy booking confirmation will be sent
        /// </summary>

        [JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>
        /// Your phone number where Porterbuddy may send you important messages. Format must be MSISDN (including country code). Example: "4791234567"
        /// </summary>

        [JsonPropertyName("phoneNumber")]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Your address where Porterbuddy will pick up the parcels
        /// </summary>

        [JsonPropertyName("address")]
        public PorterbuddyOriginAddress Address { get; set; } = new PorterbuddyOriginAddress();

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PorterbuddyOriginAddress
    {
        /// <summary>
        /// Example: "Robert Levins gate 5"
        /// </summary>

        [JsonPropertyName("streetAddress")]
        public string StreetAddress { get; set; }

        /// <summary>
        /// Example: "0154"
        /// </summary>

        [JsonPropertyName("postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// Example: "Oslo"
        /// </summary>

        [JsonPropertyName("city")]
        public string City { get; set; }

        /// <summary>
        /// The ISO-3166-1 Alpha-2 representation of the country. Example: "NO"
        /// </summary>

        [JsonPropertyName("country")]
        public string Country { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostenLogisticsOption : LogisticsOptionBase
    {
        /// <summary>
        /// Amounts are specified in minor units. For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("amount")]
        public Amount Amount { get; set; } = new Amount();

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PostenLogisticsType? Type { get; set; }

        [JsonPropertyName("customType")]
        public string CustomType { get; set; }

        [JsonPropertyName("brand")]
        public string Brand { get; set; } = "POSTEN";

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PostenLogisticsType
    {

        [EnumMember(Value = @"MAILBOX")]
        MAILBOX = 0,

        [EnumMember(Value = @"PICKUP_POINT")]
        PICKUP_POINT = 1,

        [EnumMember(Value = @"HOME_DELIVERY")]
        HOME_DELIVERY = 2,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostiLogisticsOption : LogisticsOptionBase
    {
        /// <summary>
        /// Amounts are specified in minor units. For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("amount")]
        public Amount Amount { get; set; } = new Amount();

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PostiLogisticsType? Type { get; set; }

        [JsonPropertyName("customType")]
        public string CustomType { get; set; }

        [JsonPropertyName("brand")]
        public string Brand { get; set; } = "POSTI";

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PostiLogisticsType
    {

        [EnumMember(Value = @"MAILBOX")]
        MAILBOX = 0,

        [EnumMember(Value = @"PICKUP_POINT")]
        PICKUP_POINT = 1,

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostnordLogisticsOption : LogisticsOptionBase
    {
        /// <summary>
        /// Amounts are specified in minor units. For Norwegian kroner (NOK) that means 1 kr = 100 øre. Example: 499 kr = 49900 øre.
        /// </summary>

        [JsonPropertyName("amount")]
        public Amount Amount { get; set; } = new Amount();

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PostnordLogisticsType? Type { get; set; }

        [JsonPropertyName("customType")]
        public string CustomType { get; set; }

        [JsonPropertyName("brand")]
        public string Brand { get; set; } = "POSTNORD";

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PostnordLogisticsType
    {

        [EnumMember(Value = @"PICKUP_POINT")]
        PICKUP_POINT = 0,

        [EnumMember(Value = @"HOME_DELIVERY")]
        HOME_DELIVERY = 1,

    }

    /// <summary>
    /// Information about the customer to be prefilled
    /// <br/>            
    /// <br/>If any of the customer information is invalid such as the phone number,
    /// <br/>the customer will be prompted to input new user information.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrefillCustomer
    {
        /// <summary>
        /// Example: "Ada"
        /// </summary>

        [JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Example: "Lovelace"
        /// </summary>

        [JsonPropertyName("lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Example: "user@example.com"
        /// </summary>

        [JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>
        /// Format must be MSISDN (including country code). Example: "4791234567"
        /// </summary>

        [JsonPropertyName("phoneNumber")]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Example: "Robert Levins gate 5"
        /// </summary>

        [JsonPropertyName("streetAddress")]
        public string StreetAddress { get; set; }

        /// <summary>
        /// Example: "Oslo"
        /// </summary>

        [JsonPropertyName("city")]
        public string City { get; set; }

        /// <summary>
        /// Example: "0154"
        /// </summary>

        [JsonPropertyName("postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// The ISO-3166-1 Alpha-2 representation of the country. Example: "NO"
        /// </summary>

        [JsonPropertyName("country")]
        public string Country { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum QuantityUnit
    {

        [EnumMember(Value = @"PCS")]
        PCS = 0,

        [EnumMember(Value = @"KG")]
        KG = 1,

        [EnumMember(Value = @"KM")]
        KM = 2,

        [EnumMember(Value = @"MINUTE")]
        MINUTE = 3,

        [EnumMember(Value = @"LITRE")]
        LITRE = 4,

    }

    /// <summary>
    /// Defines the details of the payment.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResponsePaymentDetails
    {

        [JsonPropertyName("amount")]
        public Amount Amount { get; set; } = new Amount();

        [JsonPropertyName("state")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PaymentState State { get; set; }

        [JsonPropertyName("aggregate")]
        public TransactionAggregate Aggregate { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Session information
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SessionResponse
    {
        /// <summary>
        /// The Id of the session. Example: "v52EtjZriRmGiKiAKHByK2".
        /// </summary>

        [JsonPropertyName("sessionId")]
        public string SessionId { get; set; }

        /// <summary>
        /// The merchant's serial number. Example: "123456"
        /// </summary>

        [JsonPropertyName("merchantSerialNumber")]
        public string MerchantSerialNumber { get; set; }

        /// <summary>
        /// The merchant's unique reference for the transaction. Also known as OrderId. Example: "acme-shop-123-order123abc". See https://developer.vippsmobilepay.com/docs/common-topics/orderid/
        /// </summary>

        [JsonPropertyName("reference")]
        public string Reference { get; set; }

        /// <summary>
        /// The state of the session. Example: "SessionStarted". The state of the payment is in PaymentDetails.State.
        /// </summary>

        [JsonPropertyName("sessionState")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ExternalSessionState SessionState { get; set; }

        [JsonPropertyName("paymentMethod")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PaymentMethod? PaymentMethod { get; set; }

        [JsonPropertyName("paymentDetails")]
        public ResponsePaymentDetails PaymentDetails { get; set; }

        [JsonPropertyName("userInfo")]
        public UserInfo UserInfo { get; set; }

        [JsonPropertyName("shippingDetails")]
        public ShippingDetails ShippingDetails { get; set; }

        [JsonPropertyName("billingDetails")]
        public BillingDetails BillingDetails { get; set; }

        [JsonPropertyName("customConsentProvided")]
        public bool? CustomConsentProvided { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Defines the details of the shipping
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingDetails
    {
        /// <summary>
        /// Example: "Ada"
        /// </summary>

        [JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Example: "Lovelace"
        /// </summary>

        [JsonPropertyName("lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Example: "user@example.com"
        /// </summary>

        [JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>
        /// If no country code is provided, defaults to Norway (47). Example: "4791234567"
        /// </summary>

        [JsonPropertyName("phoneNumber")]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Example: "Robert Levins gate 5"
        /// </summary>

        [JsonPropertyName("streetAddress")]
        public string StreetAddress { get; set; }

        /// <summary>
        /// Example: "0154"
        /// </summary>

        [JsonPropertyName("postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// Example: "Oslo"
        /// </summary>

        [JsonPropertyName("city")]
        public string City { get; set; }

        /// <summary>
        /// The ISO-3166-1 Alpha-2 representation of the country. Example: "NO"
        /// </summary>

        [JsonPropertyName("country")]
        public string Country { get; set; }

        /// <summary>
        /// Id of the shipping method. Example: "123abc"
        /// </summary>

        [JsonPropertyName("shippingMethodId")]
        public string ShippingMethodId { get; set; }

        /// <summary>
        /// Shipping method amount
        /// </summary>

        [JsonPropertyName("amount")]
        public Amount Amount { get; set; }

        [JsonPropertyName("pickupPoint")]
        public PickupPoint PickupPoint { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Defines the details of the transaction
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionAggregate
    {

        [JsonPropertyName("cancelledAmount")]
        public Amount CancelledAmount { get; set; }

        [JsonPropertyName("capturedAmount")]
        public Amount CapturedAmount { get; set; }

        [JsonPropertyName("refundedAmount")]
        public Amount RefundedAmount { get; set; }

        [JsonPropertyName("authorizedAmount")]
        public Amount AuthorizedAmount { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UserFlow
    {

        [EnumMember(Value = @"WEB_REDIRECT")]
        WEB_REDIRECT = 0,

        [EnumMember(Value = @"NATIVE_REDIRECT")]
        NATIVE_REDIRECT = 1,

    }

    /// <summary>
    /// Data from the UserInfo endpoint. Will only be present if UserInfo flow is used.
    /// </summary>
    [GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserInfo
    {
        /// <summary>
        /// The openid sub that uniquely identifies a user.
        /// </summary>

        [JsonPropertyName("sub")]
        public string Sub { get; set; }

        /// <summary>
        /// Example: "user@example.com"
        /// </summary>

        [JsonPropertyName("email")]
        public string Email { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625